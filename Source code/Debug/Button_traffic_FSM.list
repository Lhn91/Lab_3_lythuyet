
Button_traffic_FSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ee0  08002ee0  00003ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f04  08002f04  00004088  2**0
                  CONTENTS
  4 .ARM          00000000  08002f04  08002f04  00004088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f04  08002f04  00004088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f04  08002f04  00003f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f08  08002f08  00003f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08002f0c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000088  08002f94  00004088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08002f94  00004150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008674  00000000  00000000  000040b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce3  00000000  00000000  0000c725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0000e408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007eb  00000000  00000000  0000ee78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001712a  00000000  00000000  0000f663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2ae  00000000  00000000  0002678d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008252d  00000000  00000000  00033a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5f68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c4  00000000  00000000  000b5fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b8870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ec8 	.word	0x08002ec8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002ec8 	.word	0x08002ec8

0800014c <automatic_run>:
int count_buffer[6] = {4,2,1,4,2,1};
int array0[6] ={0,0,0,0,0,0};
void init_automatic(){

}
void automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	switch(status){
 8000152:	4baf      	ldr	r3, [pc, #700]	@ (8000410 <automatic_run+0x2c4>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	3b01      	subs	r3, #1
 8000158:	2b04      	cmp	r3, #4
 800015a:	f200 8137 	bhi.w	80003cc <automatic_run+0x280>
 800015e:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <automatic_run+0x18>)
 8000160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000164:	08000179 	.word	0x08000179
 8000168:	08000195 	.word	0x08000195
 800016c:	0800022d 	.word	0x0800022d
 8000170:	080002b9 	.word	0x080002b9
 8000174:	08000343 	.word	0x08000343
	case INIT:
		if(1){
		status = GREEN_RED;
 8000178:	4ba5      	ldr	r3, [pc, #660]	@ (8000410 <automatic_run+0x2c4>)
 800017a:	2202      	movs	r2, #2
 800017c:	601a      	str	r2, [r3, #0]
		setTimer(1000,1);
 800017e:	2101      	movs	r1, #1
 8000180:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000184:	f001 f9be 	bl	8001504 <setTimer>
		setTimer(3000,0);
 8000188:	2100      	movs	r1, #0
 800018a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800018e:	f001 f9b9 	bl	8001504 <setTimer>
		}
	break;
 8000192:	e124      	b.n	80003de <automatic_run+0x292>

	case GREEN_RED:
		traffic_green_red();
 8000194:	f001 fa98 	bl	80016c8 <traffic_green_red>
		display7seg2_digit(count_buffer[1]);
 8000198:	4b9e      	ldr	r3, [pc, #632]	@ (8000414 <automatic_run+0x2c8>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4618      	mov	r0, r3
 800019e:	f000 fdef 	bl	8000d80 <display7seg2_digit>
		display7seg2_digit2(count_buffer[3]);
 80001a2:	4b9c      	ldr	r3, [pc, #624]	@ (8000414 <automatic_run+0x2c8>)
 80001a4:	68db      	ldr	r3, [r3, #12]
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 fd8e 	bl	8000cc8 <display7seg2_digit2>
				if(timer_flag[1] == 1 ){
 80001ac:	4b9a      	ldr	r3, [pc, #616]	@ (8000418 <automatic_run+0x2cc>)
 80001ae:	685b      	ldr	r3, [r3, #4]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d10e      	bne.n	80001d2 <automatic_run+0x86>
			//update display (7seg)
					count_buffer[1]--;
 80001b4:	4b97      	ldr	r3, [pc, #604]	@ (8000414 <automatic_run+0x2c8>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	3b01      	subs	r3, #1
 80001ba:	4a96      	ldr	r2, [pc, #600]	@ (8000414 <automatic_run+0x2c8>)
 80001bc:	6053      	str	r3, [r2, #4]
					count_buffer[3]--;
 80001be:	4b95      	ldr	r3, [pc, #596]	@ (8000414 <automatic_run+0x2c8>)
 80001c0:	68db      	ldr	r3, [r3, #12]
 80001c2:	3b01      	subs	r3, #1
 80001c4:	4a93      	ldr	r2, [pc, #588]	@ (8000414 <automatic_run+0x2c8>)
 80001c6:	60d3      	str	r3, [r2, #12]
			setTimer(1000,1);
 80001c8:	2101      	movs	r1, #1
 80001ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ce:	f001 f999 	bl	8001504 <setTimer>
		}
		if(timer_flag[0] == 1){
 80001d2:	4b91      	ldr	r3, [pc, #580]	@ (8000418 <automatic_run+0x2cc>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d112      	bne.n	8000200 <automatic_run+0xb4>
			status = AMBER_RED;
 80001da:	4b8d      	ldr	r3, [pc, #564]	@ (8000410 <automatic_run+0x2c4>)
 80001dc:	2203      	movs	r2, #3
 80001de:	601a      	str	r2, [r3, #0]
			setTimer(1000,1);
 80001e0:	2101      	movs	r1, #1
 80001e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001e6:	f001 f98d 	bl	8001504 <setTimer>
			setTimer((count_buffer_root[2]+1)*1000,0);
 80001ea:	4b8c      	ldr	r3, [pc, #560]	@ (800041c <automatic_run+0x2d0>)
 80001ec:	689b      	ldr	r3, [r3, #8]
 80001ee:	3301      	adds	r3, #1
 80001f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80001f4:	fb02 f303 	mul.w	r3, r2, r3
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 f982 	bl	8001504 <setTimer>
		}
		if(isButtonPressed(1) == 1){
 8000200:	2001      	movs	r0, #1
 8000202:	f000 f90d 	bl	8000420 <isButtonPressed>
 8000206:	4603      	mov	r3, r0
 8000208:	2b01      	cmp	r3, #1
 800020a:	f040 80e1 	bne.w	80003d0 <automatic_run+0x284>
			status = MAN_GREEN_RED;
 800020e:	4b80      	ldr	r3, [pc, #512]	@ (8000410 <automatic_run+0x2c4>)
 8000210:	220c      	movs	r2, #12
 8000212:	601a      	str	r2, [r3, #0]
			display7seg(2);
 8000214:	2002      	movs	r0, #2
 8000216:	f000 fe0f 	bl	8000e38 <display7seg>
			display7seg2(4);
 800021a:	2004      	movs	r0, #4
 800021c:	f000 ff9a 	bl	8001154 <display7seg2>
			setTimer(10000,1);
 8000220:	2101      	movs	r1, #1
 8000222:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000226:	f001 f96d 	bl	8001504 <setTimer>
		}
		break;
 800022a:	e0d1      	b.n	80003d0 <automatic_run+0x284>

	case AMBER_RED:
			traffic_amber_red();
 800022c:	f001 fa70 	bl	8001710 <traffic_amber_red>
			display7seg2_digit(count_buffer[2]);
 8000230:	4b78      	ldr	r3, [pc, #480]	@ (8000414 <automatic_run+0x2c8>)
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fda3 	bl	8000d80 <display7seg2_digit>
			display7seg2_digit2(count_buffer[3]);
 800023a:	4b76      	ldr	r3, [pc, #472]	@ (8000414 <automatic_run+0x2c8>)
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fd42 	bl	8000cc8 <display7seg2_digit2>
			if(timer_flag[1] == 1 ){
 8000244:	4b74      	ldr	r3, [pc, #464]	@ (8000418 <automatic_run+0x2cc>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	2b01      	cmp	r3, #1
 800024a:	d10e      	bne.n	800026a <automatic_run+0x11e>
				//update display (7seg)
				count_buffer[2]--;
 800024c:	4b71      	ldr	r3, [pc, #452]	@ (8000414 <automatic_run+0x2c8>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	3b01      	subs	r3, #1
 8000252:	4a70      	ldr	r2, [pc, #448]	@ (8000414 <automatic_run+0x2c8>)
 8000254:	6093      	str	r3, [r2, #8]
				count_buffer[3]--;
 8000256:	4b6f      	ldr	r3, [pc, #444]	@ (8000414 <automatic_run+0x2c8>)
 8000258:	68db      	ldr	r3, [r3, #12]
 800025a:	3b01      	subs	r3, #1
 800025c:	4a6d      	ldr	r2, [pc, #436]	@ (8000414 <automatic_run+0x2c8>)
 800025e:	60d3      	str	r3, [r2, #12]
				setTimer(1000,1);
 8000260:	2101      	movs	r1, #1
 8000262:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000266:	f001 f94d 	bl	8001504 <setTimer>
			}
			if(timer_flag[0] == 1){
 800026a:	4b6b      	ldr	r3, [pc, #428]	@ (8000418 <automatic_run+0x2cc>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d112      	bne.n	8000298 <automatic_run+0x14c>
				status = RED_GREEN;
 8000272:	4b67      	ldr	r3, [pc, #412]	@ (8000410 <automatic_run+0x2c4>)
 8000274:	2204      	movs	r2, #4
 8000276:	601a      	str	r2, [r3, #0]
				setTimer(1000,1);
 8000278:	2101      	movs	r1, #1
 800027a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800027e:	f001 f941 	bl	8001504 <setTimer>
				setTimer((count_buffer_root[1]+1)*1000,0);
 8000282:	4b66      	ldr	r3, [pc, #408]	@ (800041c <automatic_run+0x2d0>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	3301      	adds	r3, #1
 8000288:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800028c:	fb02 f303 	mul.w	r3, r2, r3
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 f936 	bl	8001504 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 8000298:	2001      	movs	r0, #1
 800029a:	f000 f8c1 	bl	8000420 <isButtonPressed>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	f040 8097 	bne.w	80003d4 <automatic_run+0x288>
				status = MAN_AMBER_RED;
 80002a6:	4b5a      	ldr	r3, [pc, #360]	@ (8000410 <automatic_run+0x2c4>)
 80002a8:	220d      	movs	r2, #13
 80002aa:	601a      	str	r2, [r3, #0]
				setTimer(10000,1);
 80002ac:	2101      	movs	r1, #1
 80002ae:	f242 7010 	movw	r0, #10000	@ 0x2710
 80002b2:	f001 f927 	bl	8001504 <setTimer>
			}
			break;
 80002b6:	e08d      	b.n	80003d4 <automatic_run+0x288>

	case RED_GREEN:

			traffic_red_green();
 80002b8:	f001 fa4e 	bl	8001758 <traffic_red_green>
			display7seg2_digit(count_buffer[0]);
 80002bc:	4b55      	ldr	r3, [pc, #340]	@ (8000414 <automatic_run+0x2c8>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fd5d 	bl	8000d80 <display7seg2_digit>
			display7seg2_digit2(count_buffer[4]);
 80002c6:	4b53      	ldr	r3, [pc, #332]	@ (8000414 <automatic_run+0x2c8>)
 80002c8:	691b      	ldr	r3, [r3, #16]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fcfc 	bl	8000cc8 <display7seg2_digit2>
			if(timer_flag[1] == 1){
 80002d0:	4b51      	ldr	r3, [pc, #324]	@ (8000418 <automatic_run+0x2cc>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d10e      	bne.n	80002f6 <automatic_run+0x1aa>
				//update display (7seg)
				count_buffer[0]--;
 80002d8:	4b4e      	ldr	r3, [pc, #312]	@ (8000414 <automatic_run+0x2c8>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	3b01      	subs	r3, #1
 80002de:	4a4d      	ldr	r2, [pc, #308]	@ (8000414 <automatic_run+0x2c8>)
 80002e0:	6013      	str	r3, [r2, #0]
				count_buffer[4]--;
 80002e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000414 <automatic_run+0x2c8>)
 80002e4:	691b      	ldr	r3, [r3, #16]
 80002e6:	3b01      	subs	r3, #1
 80002e8:	4a4a      	ldr	r2, [pc, #296]	@ (8000414 <automatic_run+0x2c8>)
 80002ea:	6113      	str	r3, [r2, #16]
				setTimer(1000,1);
 80002ec:	2101      	movs	r1, #1
 80002ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002f2:	f001 f907 	bl	8001504 <setTimer>
			}
			if(timer_flag[0] == 1){
 80002f6:	4b48      	ldr	r3, [pc, #288]	@ (8000418 <automatic_run+0x2cc>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d112      	bne.n	8000324 <automatic_run+0x1d8>
				status = RED_AMBER;
 80002fe:	4b44      	ldr	r3, [pc, #272]	@ (8000410 <automatic_run+0x2c4>)
 8000300:	2205      	movs	r2, #5
 8000302:	601a      	str	r2, [r3, #0]
				setTimer(1000,1);
 8000304:	2101      	movs	r1, #1
 8000306:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800030a:	f001 f8fb 	bl	8001504 <setTimer>
				setTimer((count_buffer_root[2]+1)*1000,0);
 800030e:	4b43      	ldr	r3, [pc, #268]	@ (800041c <automatic_run+0x2d0>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	3301      	adds	r3, #1
 8000314:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000318:	fb02 f303 	mul.w	r3, r2, r3
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f001 f8f0 	bl	8001504 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 8000324:	2001      	movs	r0, #1
 8000326:	f000 f87b 	bl	8000420 <isButtonPressed>
 800032a:	4603      	mov	r3, r0
 800032c:	2b01      	cmp	r3, #1
 800032e:	d153      	bne.n	80003d8 <automatic_run+0x28c>
				status = MAN_RED_GREEN;
 8000330:	4b37      	ldr	r3, [pc, #220]	@ (8000410 <automatic_run+0x2c4>)
 8000332:	220e      	movs	r2, #14
 8000334:	601a      	str	r2, [r3, #0]
				setTimer(10000,1);
 8000336:	2101      	movs	r1, #1
 8000338:	f242 7010 	movw	r0, #10000	@ 0x2710
 800033c:	f001 f8e2 	bl	8001504 <setTimer>
			}
			break;
 8000340:	e04a      	b.n	80003d8 <automatic_run+0x28c>

	case RED_AMBER:
			traffic_red_amber();
 8000342:	f001 fa2d 	bl	80017a0 <traffic_red_amber>
			display7seg2_digit(count_buffer[0]);
 8000346:	4b33      	ldr	r3, [pc, #204]	@ (8000414 <automatic_run+0x2c8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fd18 	bl	8000d80 <display7seg2_digit>
			display7seg2_digit2(count_buffer[5]);
 8000350:	4b30      	ldr	r3, [pc, #192]	@ (8000414 <automatic_run+0x2c8>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fcb7 	bl	8000cc8 <display7seg2_digit2>
			if(timer_flag[1] == 1 ){
 800035a:	4b2f      	ldr	r3, [pc, #188]	@ (8000418 <automatic_run+0x2cc>)
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d10e      	bne.n	8000380 <automatic_run+0x234>
				//update display (7seg)
				count_buffer[0]--;
 8000362:	4b2c      	ldr	r3, [pc, #176]	@ (8000414 <automatic_run+0x2c8>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	3b01      	subs	r3, #1
 8000368:	4a2a      	ldr	r2, [pc, #168]	@ (8000414 <automatic_run+0x2c8>)
 800036a:	6013      	str	r3, [r2, #0]
				count_buffer[5]--;
 800036c:	4b29      	ldr	r3, [pc, #164]	@ (8000414 <automatic_run+0x2c8>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	3b01      	subs	r3, #1
 8000372:	4a28      	ldr	r2, [pc, #160]	@ (8000414 <automatic_run+0x2c8>)
 8000374:	6153      	str	r3, [r2, #20]
				setTimer(1000,1);
 8000376:	2101      	movs	r1, #1
 8000378:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800037c:	f001 f8c2 	bl	8001504 <setTimer>
			}
			if(timer_flag[0] == 1){
 8000380:	4b25      	ldr	r3, [pc, #148]	@ (8000418 <automatic_run+0x2cc>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d112      	bne.n	80003ae <automatic_run+0x262>
				status = GREEN_RED;
 8000388:	4b21      	ldr	r3, [pc, #132]	@ (8000410 <automatic_run+0x2c4>)
 800038a:	2202      	movs	r2, #2
 800038c:	601a      	str	r2, [r3, #0]
				setTimer((count_buffer_root[1]+1)*1000,0);
 800038e:	4b23      	ldr	r3, [pc, #140]	@ (800041c <automatic_run+0x2d0>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	3301      	adds	r3, #1
 8000394:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000398:	fb02 f303 	mul.w	r3, r2, r3
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 f8b0 	bl	8001504 <setTimer>
				setTimer(1000,1);
 80003a4:	2101      	movs	r1, #1
 80003a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003aa:	f001 f8ab 	bl	8001504 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 80003ae:	2001      	movs	r0, #1
 80003b0:	f000 f836 	bl	8000420 <isButtonPressed>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d110      	bne.n	80003dc <automatic_run+0x290>
				status = MAN_RED_AMBER;
 80003ba:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <automatic_run+0x2c4>)
 80003bc:	220f      	movs	r2, #15
 80003be:	601a      	str	r2, [r3, #0]
				setTimer(10000,1);
 80003c0:	2101      	movs	r1, #1
 80003c2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80003c6:	f001 f89d 	bl	8001504 <setTimer>
			}
			break;
 80003ca:	e007      	b.n	80003dc <automatic_run+0x290>


	default:
		break;
 80003cc:	bf00      	nop
 80003ce:	e006      	b.n	80003de <automatic_run+0x292>
		break;
 80003d0:	bf00      	nop
 80003d2:	e004      	b.n	80003de <automatic_run+0x292>
			break;
 80003d4:	bf00      	nop
 80003d6:	e002      	b.n	80003de <automatic_run+0x292>
			break;
 80003d8:	bf00      	nop
 80003da:	e000      	b.n	80003de <automatic_run+0x292>
			break;
 80003dc:	bf00      	nop
	}

	if (count_buffer[0] < 0 ) {
 80003de:	4b0d      	ldr	r3, [pc, #52]	@ (8000414 <automatic_run+0x2c8>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	da10      	bge.n	8000408 <automatic_run+0x2bc>
		for(int i = 0; i < sizeof(count_buffer_root) /sizeof(count_buffer_root[0]); i++ ){
 80003e6:	2300      	movs	r3, #0
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	e00a      	b.n	8000402 <automatic_run+0x2b6>
			count_buffer[i] = count_buffer_root[i];
 80003ec:	4a0b      	ldr	r2, [pc, #44]	@ (800041c <automatic_run+0x2d0>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003f4:	4907      	ldr	r1, [pc, #28]	@ (8000414 <automatic_run+0x2c8>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < sizeof(count_buffer_root) /sizeof(count_buffer_root[0]); i++ ){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3301      	adds	r3, #1
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b05      	cmp	r3, #5
 8000406:	d9f1      	bls.n	80003ec <automatic_run+0x2a0>
		}
	}

}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000000 	.word	0x20000000
 8000414:	2000001c 	.word	0x2000001c
 8000418:	20000124 	.word	0x20000124
 800041c:	20000004 	.word	0x20000004

08000420 <isButtonPressed>:
int keyReg1[4] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int keyReg2[4] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int keyReg3[4] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int TimerForKeyPressed = 100; //nhan de 2s moi xu li

int isButtonPressed(int i){
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
		if(button_flag[i-1] == 1){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	3b01      	subs	r3, #1
 800042c:	4a09      	ldr	r2, [pc, #36]	@ (8000454 <isButtonPressed+0x34>)
 800042e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d107      	bne.n	8000446 <isButtonPressed+0x26>
			button_flag[i-1] = 0;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3b01      	subs	r3, #1
 800043a:	4a06      	ldr	r2, [pc, #24]	@ (8000454 <isButtonPressed+0x34>)
 800043c:	2100      	movs	r1, #0
 800043e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000442:	2301      	movs	r3, #1
 8000444:	e000      	b.n	8000448 <isButtonPressed+0x28>
		}
		return 0;
 8000446:	2300      	movs	r3, #0
}
 8000448:	4618      	mov	r0, r3
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	200000a4 	.word	0x200000a4

08000458 <subKeyProcess>:
void subKeyProcess(int i){
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000460:	4a04      	ldr	r2, [pc, #16]	@ (8000474 <subKeyProcess+0x1c>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2101      	movs	r1, #1
 8000466:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	200000a4 	.word	0x200000a4

08000478 <getKeyInput>:
void getKeyInput(){
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
	for(int i = 0; i<4;i++){
 800047e:	2300      	movs	r3, #0
 8000480:	607b      	str	r3, [r7, #4]
 8000482:	e08f      	b.n	80005a4 <getKeyInput+0x12c>
 keyReg0[i] = keyReg1[i];
 8000484:	4a4c      	ldr	r2, [pc, #304]	@ (80005b8 <getKeyInput+0x140>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048c:	494b      	ldr	r1, [pc, #300]	@ (80005bc <getKeyInput+0x144>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 keyReg1[i] = keyReg2[i];
 8000494:	4a4a      	ldr	r2, [pc, #296]	@ (80005c0 <getKeyInput+0x148>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800049c:	4946      	ldr	r1, [pc, #280]	@ (80005b8 <getKeyInput+0x140>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 switch (i){
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b03      	cmp	r3, #3
 80004a8:	d831      	bhi.n	800050e <getKeyInput+0x96>
 80004aa:	a201      	add	r2, pc, #4	@ (adr r2, 80004b0 <getKeyInput+0x38>)
 80004ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b0:	080004c1 	.word	0x080004c1
 80004b4:	080004d5 	.word	0x080004d5
 80004b8:	080004e9 	.word	0x080004e9
 80004bc:	080004fd 	.word	0x080004fd
	 case 0: keyReg2[0] = HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 80004c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004c4:	483f      	ldr	r0, [pc, #252]	@ (80005c4 <getKeyInput+0x14c>)
 80004c6:	f001 fce9 	bl	8001e9c <HAL_GPIO_ReadPin>
 80004ca:	4603      	mov	r3, r0
 80004cc:	461a      	mov	r2, r3
 80004ce:	4b3c      	ldr	r3, [pc, #240]	@ (80005c0 <getKeyInput+0x148>)
 80004d0:	601a      	str	r2, [r3, #0]
		 break;
 80004d2:	e01c      	b.n	800050e <getKeyInput+0x96>
	 case 1: keyReg2[1] = HAL_GPIO_ReadPin(b1_GPIO_Port,b1_Pin);
 80004d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004d8:	483b      	ldr	r0, [pc, #236]	@ (80005c8 <getKeyInput+0x150>)
 80004da:	f001 fcdf 	bl	8001e9c <HAL_GPIO_ReadPin>
 80004de:	4603      	mov	r3, r0
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b37      	ldr	r3, [pc, #220]	@ (80005c0 <getKeyInput+0x148>)
 80004e4:	605a      	str	r2, [r3, #4]
		 break;
 80004e6:	e012      	b.n	800050e <getKeyInput+0x96>
	 case 2: keyReg2[2] = HAL_GPIO_ReadPin(b2_GPIO_Port, b2_Pin);
 80004e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004ec:	4836      	ldr	r0, [pc, #216]	@ (80005c8 <getKeyInput+0x150>)
 80004ee:	f001 fcd5 	bl	8001e9c <HAL_GPIO_ReadPin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b32      	ldr	r3, [pc, #200]	@ (80005c0 <getKeyInput+0x148>)
 80004f8:	609a      	str	r2, [r3, #8]
		 break;
 80004fa:	e008      	b.n	800050e <getKeyInput+0x96>
	 case 3: keyReg2[3] = HAL_GPIO_ReadPin(b3_GPIO_Port, b3_Pin);
 80004fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000500:	4831      	ldr	r0, [pc, #196]	@ (80005c8 <getKeyInput+0x150>)
 8000502:	f001 fccb 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b2d      	ldr	r3, [pc, #180]	@ (80005c0 <getKeyInput+0x148>)
 800050c:	60da      	str	r2, [r3, #12]
 }
 if((keyReg0[i] == keyReg1[i])&&(keyReg1[i] == keyReg2[i])){
 800050e:	4a2b      	ldr	r2, [pc, #172]	@ (80005bc <getKeyInput+0x144>)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000516:	4928      	ldr	r1, [pc, #160]	@ (80005b8 <getKeyInput+0x140>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800051e:	429a      	cmp	r2, r3
 8000520:	d13d      	bne.n	800059e <getKeyInput+0x126>
 8000522:	4a25      	ldr	r2, [pc, #148]	@ (80005b8 <getKeyInput+0x140>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800052a:	4925      	ldr	r1, [pc, #148]	@ (80005c0 <getKeyInput+0x148>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000532:	429a      	cmp	r2, r3
 8000534:	d133      	bne.n	800059e <getKeyInput+0x126>
	 if(keyReg3[i] != keyReg2[i]){
 8000536:	4a25      	ldr	r2, [pc, #148]	@ (80005cc <getKeyInput+0x154>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800053e:	4920      	ldr	r1, [pc, #128]	@ (80005c0 <getKeyInput+0x148>)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000546:	429a      	cmp	r2, r3
 8000548:	d014      	beq.n	8000574 <getKeyInput+0xfc>
		 keyReg3[i] = keyReg2[i];
 800054a:	4a1d      	ldr	r2, [pc, #116]	@ (80005c0 <getKeyInput+0x148>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000552:	491e      	ldr	r1, [pc, #120]	@ (80005cc <getKeyInput+0x154>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 if(keyReg2[i] == PRESSED_STATE){
 800055a:	4a19      	ldr	r2, [pc, #100]	@ (80005c0 <getKeyInput+0x148>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d11b      	bne.n	800059e <getKeyInput+0x126>
			 //TODO
			 subKeyProcess(i);
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f7ff ff76 	bl	8000458 <subKeyProcess>
			 TimerForKeyPressed = 50;
 800056c:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <getKeyInput+0x158>)
 800056e:	2232      	movs	r2, #50	@ 0x32
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	e014      	b.n	800059e <getKeyInput+0x126>
		 }
	 }else{
		 TimerForKeyPressed--;
 8000574:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <getKeyInput+0x158>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3b01      	subs	r3, #1
 800057a:	4a15      	ldr	r2, [pc, #84]	@ (80005d0 <getKeyInput+0x158>)
 800057c:	6013      	str	r3, [r2, #0]
		 if(TimerForKeyPressed == 0){
 800057e:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <getKeyInput+0x158>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d10b      	bne.n	800059e <getKeyInput+0x126>
			 //TODO
			if(keyReg2[i] == PRESSED_STATE){
 8000586:	4a0e      	ldr	r2, [pc, #56]	@ (80005c0 <getKeyInput+0x148>)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d102      	bne.n	8000598 <getKeyInput+0x120>
			 subKeyProcess(i);
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff ff60 	bl	8000458 <subKeyProcess>
			}
			 TimerForKeyPressed = 50;
 8000598:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <getKeyInput+0x158>)
 800059a:	2232      	movs	r2, #50	@ 0x32
 800059c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<4;i++){
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	f77f af6c 	ble.w	8000484 <getKeyInput+0xc>
		 }
	 }
 }
	}
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000044 	.word	0x20000044
 80005bc:	20000034 	.word	0x20000034
 80005c0:	20000054 	.word	0x20000054
 80005c4:	40011000 	.word	0x40011000
 80005c8:	40010c00 	.word	0x40010c00
 80005cc:	20000064 	.word	0x20000064
 80005d0:	20000074 	.word	0x20000074

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f001 f974 	bl	80018c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f816 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f89c 	bl	800071c <MX_GPIO_Init>
  MX_TIM2_Init();
 80005e4:	f000 f84e 	bl	8000684 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 80005e8:	4807      	ldr	r0, [pc, #28]	@ (8000608 <main+0x34>)
 80005ea:	f002 f8b5 	bl	8002758 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
setTimer(40,2);
 80005ee:	2102      	movs	r1, #2
 80005f0:	2028      	movs	r0, #40	@ 0x28
 80005f2:	f000 ff87 	bl	8001504 <setTimer>
  while (1)
  {
	  automatic_run();
 80005f6:	f7ff fda9 	bl	800014c <automatic_run>
	  manual_run();
 80005fa:	f000 f91f 	bl	800083c <manual_run>
	  setting_run();
 80005fe:	f000 fa29 	bl	8000a54 <setting_run>
	  automatic_run();
 8000602:	bf00      	nop
 8000604:	e7f7      	b.n	80005f6 <main+0x22>
 8000606:	bf00      	nop
 8000608:	200000b4 	.word	0x200000b4

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b090      	sub	sp, #64	@ 0x40
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	2228      	movs	r2, #40	@ 0x28
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fc28 	bl	8002e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062e:	2302      	movs	r3, #2
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000632:	2301      	movs	r3, #1
 8000634:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000636:	2310      	movs	r3, #16
 8000638:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063a:	2300      	movs	r3, #0
 800063c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fc5a 	bl	8001efc <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800064e:	f000 f8ef 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fec8 	bl	8002400 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000676:	f000 f8db 	bl	8000830 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3740      	adds	r7, #64	@ 0x40
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	463b      	mov	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006aa:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80006ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b0:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80006b6:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006b8:	2209      	movs	r2, #9
 80006ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006c8:	4813      	ldr	r0, [pc, #76]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006ca:	f001 fff5 	bl	80026b8 <HAL_TIM_Base_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006d4:	f000 f8ac 	bl	8000830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	4619      	mov	r1, r3
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006e6:	f002 f973 	bl	80029d0 <HAL_TIM_ConfigClockSource>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006f0:	f000 f89e 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_TIM2_Init+0x94>)
 8000702:	f002 fb4b 	bl	8002d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800070c:	f000 f890 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000b4 	.word	0x200000b4

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000730:	4b35      	ldr	r3, [pc, #212]	@ (8000808 <MX_GPIO_Init+0xec>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a34      	ldr	r2, [pc, #208]	@ (8000808 <MX_GPIO_Init+0xec>)
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b32      	ldr	r3, [pc, #200]	@ (8000808 <MX_GPIO_Init+0xec>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0310 	and.w	r3, r3, #16
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b2f      	ldr	r3, [pc, #188]	@ (8000808 <MX_GPIO_Init+0xec>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a2e      	ldr	r2, [pc, #184]	@ (8000808 <MX_GPIO_Init+0xec>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b2c      	ldr	r3, [pc, #176]	@ (8000808 <MX_GPIO_Init+0xec>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0304 	and.w	r3, r3, #4
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000760:	4b29      	ldr	r3, [pc, #164]	@ (8000808 <MX_GPIO_Init+0xec>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a28      	ldr	r2, [pc, #160]	@ (8000808 <MX_GPIO_Init+0xec>)
 8000766:	f043 0308 	orr.w	r3, r3, #8
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b26      	ldr	r3, [pc, #152]	@ (8000808 <MX_GPIO_Init+0xec>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0308 	and.w	r3, r3, #8
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S1_Pin|S2_Pin|S3_Pin|S4_Pin
 8000778:	2200      	movs	r2, #0
 800077a:	f647 71fe 	movw	r1, #32766	@ 0x7ffe
 800077e:	4823      	ldr	r0, [pc, #140]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000780:	f001 fba3 	bl	8001eca <HAL_GPIO_WritePin>
                          |S5_Pin|S6_Pin|S7_Pin|S8_Pin
                          |S9_Pin|S10_Pin|S11_Pin|S12_Pin
                          |S13_Pin|S14_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_Pin|G_Pin|Y_Pin|EN0_Pin
 8000784:	2200      	movs	r2, #0
 8000786:	f640 413f 	movw	r1, #3135	@ 0xc3f
 800078a:	4821      	ldr	r0, [pc, #132]	@ (8000810 <MX_GPIO_Init+0xf4>)
 800078c:	f001 fb9d 	bl	8001eca <HAL_GPIO_WritePin>
                          |EN1_Pin|R1_Pin|G1_Pin|Y1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	4619      	mov	r1, r3
 80007a4:	481b      	ldr	r0, [pc, #108]	@ (8000814 <MX_GPIO_Init+0xf8>)
 80007a6:	f001 f9fd 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin S3_Pin S4_Pin
                           S5_Pin S6_Pin S7_Pin S8_Pin
                           S9_Pin S10_Pin S11_Pin S12_Pin
                           S13_Pin S14_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin|S4_Pin
 80007aa:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 80007ae:	613b      	str	r3, [r7, #16]
                          |S5_Pin|S6_Pin|S7_Pin|S8_Pin
                          |S9_Pin|S10_Pin|S11_Pin|S12_Pin
                          |S13_Pin|S14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2302      	movs	r3, #2
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	4619      	mov	r1, r3
 80007c2:	4812      	ldr	r0, [pc, #72]	@ (800080c <MX_GPIO_Init+0xf0>)
 80007c4:	f001 f9ee 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_Pin G_Pin Y_Pin EN0_Pin
                           EN1_Pin R1_Pin G1_Pin Y1_Pin */
  GPIO_InitStruct.Pin = R_Pin|G_Pin|Y_Pin|EN0_Pin
 80007c8:	f640 433f 	movw	r3, #3135	@ 0xc3f
 80007cc:	613b      	str	r3, [r7, #16]
                          |EN1_Pin|R1_Pin|G1_Pin|Y1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	4619      	mov	r1, r3
 80007e0:	480b      	ldr	r0, [pc, #44]	@ (8000810 <MX_GPIO_Init+0xf4>)
 80007e2:	f001 f9df 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : b3_Pin b1_Pin b2_Pin */
  GPIO_InitStruct.Pin = b3_Pin|b1_Pin|b2_Pin;
 80007e6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_GPIO_Init+0xf4>)
 80007fc:	f001 f9d2 	bl	8001ba4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	40010800 	.word	0x40010800
 8000810:	40010c00 	.word	0x40010c00
 8000814:	40011000 	.word	0x40011000

08000818 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8000820:	f7ff fe2a 	bl	8000478 <getKeyInput>
	timerRun();
 8000824:	f000 fe8e 	bl	8001544 <timerRun>

}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <manual_run>:
#include "manual.h"

void manual_run() {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	switch (status) {
 8000840:	4b81      	ldr	r3, [pc, #516]	@ (8000a48 <manual_run+0x20c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	3b0c      	subs	r3, #12
 8000846:	2b03      	cmp	r3, #3
 8000848:	f200 80fc 	bhi.w	8000a44 <manual_run+0x208>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <manual_run+0x18>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000865 	.word	0x08000865
 8000858:	080008dd 	.word	0x080008dd
 800085c:	08000955 	.word	0x08000955
 8000860:	080009cb 	.word	0x080009cb
		case MAN_GREEN_RED:
			traffic_green_red();
 8000864:	f000 ff30 	bl	80016c8 <traffic_green_red>
			display7seg2_digit2(count_buffer_root[3]);
 8000868:	4b78      	ldr	r3, [pc, #480]	@ (8000a4c <manual_run+0x210>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fa2b 	bl	8000cc8 <display7seg2_digit2>
			display7seg2_digit(count_buffer_root[1]);
 8000872:	4b76      	ldr	r3, [pc, #472]	@ (8000a4c <manual_run+0x210>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	4618      	mov	r0, r3
 8000878:	f000 fa82 	bl	8000d80 <display7seg2_digit>
			if (isButtonPressed(1)) {
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff fdcf 	bl	8000420 <isButtonPressed>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d008      	beq.n	800089a <manual_run+0x5e>
				setTimer(6000, 1);
 8000888:	2101      	movs	r1, #1
 800088a:	f241 7070 	movw	r0, #6000	@ 0x1770
 800088e:	f000 fe39 	bl	8001504 <setTimer>
				status = MAN_AMBER_RED;
 8000892:	4b6d      	ldr	r3, [pc, #436]	@ (8000a48 <manual_run+0x20c>)
 8000894:	220d      	movs	r2, #13
 8000896:	601a      	str	r2, [r3, #0]
			}else if (timer_flag[1] == 1) {
				setTimer(3000, 0);
				setTimer(1000,1);
				status = GREEN_RED;
			}
			break;
 8000898:	e0cd      	b.n	8000a36 <manual_run+0x1fa>
			} else if(timer_flag[1] == 0 && isButtonPressed(2)){
 800089a:	4b6d      	ldr	r3, [pc, #436]	@ (8000a50 <manual_run+0x214>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d109      	bne.n	80008b6 <manual_run+0x7a>
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff fdbc 	bl	8000420 <isButtonPressed>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d003      	beq.n	80008b6 <manual_run+0x7a>
					status = SETTING_GREEN;
 80008ae:	4b66      	ldr	r3, [pc, #408]	@ (8000a48 <manual_run+0x20c>)
 80008b0:	2216      	movs	r2, #22
 80008b2:	601a      	str	r2, [r3, #0]
			break;
 80008b4:	e0bf      	b.n	8000a36 <manual_run+0x1fa>
			}else if (timer_flag[1] == 1) {
 80008b6:	4b66      	ldr	r3, [pc, #408]	@ (8000a50 <manual_run+0x214>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	f040 80bb 	bne.w	8000a36 <manual_run+0x1fa>
				setTimer(3000, 0);
 80008c0:	2100      	movs	r1, #0
 80008c2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80008c6:	f000 fe1d 	bl	8001504 <setTimer>
				setTimer(1000,1);
 80008ca:	2101      	movs	r1, #1
 80008cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008d0:	f000 fe18 	bl	8001504 <setTimer>
				status = GREEN_RED;
 80008d4:	4b5c      	ldr	r3, [pc, #368]	@ (8000a48 <manual_run+0x20c>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	601a      	str	r2, [r3, #0]
			break;
 80008da:	e0ac      	b.n	8000a36 <manual_run+0x1fa>

		case MAN_AMBER_RED:
			traffic_amber_red();
 80008dc:	f000 ff18 	bl	8001710 <traffic_amber_red>
			display7seg2_digit(count_buffer_root[2]);
 80008e0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a4c <manual_run+0x210>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fa4b 	bl	8000d80 <display7seg2_digit>
			display7seg2_digit2(count_buffer_root[3]);
 80008ea:	4b58      	ldr	r3, [pc, #352]	@ (8000a4c <manual_run+0x210>)
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f9ea 	bl	8000cc8 <display7seg2_digit2>
			if (isButtonPressed(1)) {
 80008f4:	2001      	movs	r0, #1
 80008f6:	f7ff fd93 	bl	8000420 <isButtonPressed>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d008      	beq.n	8000912 <manual_run+0xd6>
				status = MAN_RED_GREEN;
 8000900:	4b51      	ldr	r3, [pc, #324]	@ (8000a48 <manual_run+0x20c>)
 8000902:	220e      	movs	r2, #14
 8000904:	601a      	str	r2, [r3, #0]
				setTimer(6000, 1);
 8000906:	2101      	movs	r1, #1
 8000908:	f241 7070 	movw	r0, #6000	@ 0x1770
 800090c:	f000 fdfa 	bl	8001504 <setTimer>

				setTimer(2000, 0);
				setTimer(1000,1);
				status = GREEN_RED;
			}
			break;
 8000910:	e093      	b.n	8000a3a <manual_run+0x1fe>
			} else if(timer_flag[1] == 0 && isButtonPressed(2)){
 8000912:	4b4f      	ldr	r3, [pc, #316]	@ (8000a50 <manual_run+0x214>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d109      	bne.n	800092e <manual_run+0xf2>
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff fd80 	bl	8000420 <isButtonPressed>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d003      	beq.n	800092e <manual_run+0xf2>
				status = SETTING_AMBER;
 8000926:	4b48      	ldr	r3, [pc, #288]	@ (8000a48 <manual_run+0x20c>)
 8000928:	2217      	movs	r2, #23
 800092a:	601a      	str	r2, [r3, #0]
			break;
 800092c:	e085      	b.n	8000a3a <manual_run+0x1fe>
			}else if (timer_flag[1] == 1) {
 800092e:	4b48      	ldr	r3, [pc, #288]	@ (8000a50 <manual_run+0x214>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2b01      	cmp	r3, #1
 8000934:	f040 8081 	bne.w	8000a3a <manual_run+0x1fe>
				setTimer(2000, 0);
 8000938:	2100      	movs	r1, #0
 800093a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800093e:	f000 fde1 	bl	8001504 <setTimer>
				setTimer(1000,1);
 8000942:	2101      	movs	r1, #1
 8000944:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000948:	f000 fddc 	bl	8001504 <setTimer>
				status = GREEN_RED;
 800094c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a48 <manual_run+0x20c>)
 800094e:	2202      	movs	r2, #2
 8000950:	601a      	str	r2, [r3, #0]
			break;
 8000952:	e072      	b.n	8000a3a <manual_run+0x1fe>

		case MAN_RED_GREEN:
			traffic_red_green();
 8000954:	f000 ff00 	bl	8001758 <traffic_red_green>
			display7seg2_digit(count_buffer_root[0]);
 8000958:	4b3c      	ldr	r3, [pc, #240]	@ (8000a4c <manual_run+0x210>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fa0f 	bl	8000d80 <display7seg2_digit>
			display7seg2_digit2(count_buffer_root[4]);
 8000962:	4b3a      	ldr	r3, [pc, #232]	@ (8000a4c <manual_run+0x210>)
 8000964:	691b      	ldr	r3, [r3, #16]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f9ae 	bl	8000cc8 <display7seg2_digit2>
			if (isButtonPressed(1)) {
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff fd57 	bl	8000420 <isButtonPressed>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d008      	beq.n	800098a <manual_run+0x14e>
				status = MAN_RED_AMBER;
 8000978:	4b33      	ldr	r3, [pc, #204]	@ (8000a48 <manual_run+0x20c>)
 800097a:	220f      	movs	r2, #15
 800097c:	601a      	str	r2, [r3, #0]
				setTimer(6000, 1);
 800097e:	2101      	movs	r1, #1
 8000980:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000984:	f000 fdbe 	bl	8001504 <setTimer>

				setTimer(3000, 0);
				setTimer(1000,1);
				status = RED_GREEN;
			}
			break;
 8000988:	e059      	b.n	8000a3e <manual_run+0x202>
			else if(timer_flag[1] == 0 && isButtonPressed(2)){
 800098a:	4b31      	ldr	r3, [pc, #196]	@ (8000a50 <manual_run+0x214>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d109      	bne.n	80009a6 <manual_run+0x16a>
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff fd44 	bl	8000420 <isButtonPressed>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <manual_run+0x16a>
				status = SETTING_GREEN;
 800099e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a48 <manual_run+0x20c>)
 80009a0:	2216      	movs	r2, #22
 80009a2:	601a      	str	r2, [r3, #0]
			break;
 80009a4:	e04b      	b.n	8000a3e <manual_run+0x202>
			} else if (timer_flag[1] == 1) {
 80009a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a50 <manual_run+0x214>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d147      	bne.n	8000a3e <manual_run+0x202>
				setTimer(3000, 0);
 80009ae:	2100      	movs	r1, #0
 80009b0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80009b4:	f000 fda6 	bl	8001504 <setTimer>
				setTimer(1000,1);
 80009b8:	2101      	movs	r1, #1
 80009ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009be:	f000 fda1 	bl	8001504 <setTimer>
				status = RED_GREEN;
 80009c2:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <manual_run+0x20c>)
 80009c4:	2204      	movs	r2, #4
 80009c6:	601a      	str	r2, [r3, #0]
			break;
 80009c8:	e039      	b.n	8000a3e <manual_run+0x202>

		case MAN_RED_AMBER:
			traffic_red_amber();
 80009ca:	f000 fee9 	bl	80017a0 <traffic_red_amber>
			display7seg2_digit(count_buffer_root[0]);
 80009ce:	4b1f      	ldr	r3, [pc, #124]	@ (8000a4c <manual_run+0x210>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f9d4 	bl	8000d80 <display7seg2_digit>
			display7seg2_digit2(count_buffer_root[5]);
 80009d8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <manual_run+0x210>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f973 	bl	8000cc8 <display7seg2_digit2>
			if (isButtonPressed(1)) {
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fd1c 	bl	8000420 <isButtonPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <manual_run+0x1ba>
				status = MAN_GREEN_RED;
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <manual_run+0x20c>)
 80009f0:	220c      	movs	r2, #12
 80009f2:	601a      	str	r2, [r3, #0]
			else if (timer_flag[1] == 1) {
				setTimer(2000, 0);
				setTimer(1000,1);
				status = RED_AMBER;
			}
			break;
 80009f4:	e025      	b.n	8000a42 <manual_run+0x206>
			else if(timer_flag[1] == 0 && isButtonPressed(2)){
 80009f6:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <manual_run+0x214>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d109      	bne.n	8000a12 <manual_run+0x1d6>
 80009fe:	2002      	movs	r0, #2
 8000a00:	f7ff fd0e 	bl	8000420 <isButtonPressed>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <manual_run+0x1d6>
				status = SETTING_AMBER;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <manual_run+0x20c>)
 8000a0c:	2217      	movs	r2, #23
 8000a0e:	601a      	str	r2, [r3, #0]
			break;
 8000a10:	e017      	b.n	8000a42 <manual_run+0x206>
			else if (timer_flag[1] == 1) {
 8000a12:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <manual_run+0x214>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d113      	bne.n	8000a42 <manual_run+0x206>
				setTimer(2000, 0);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a20:	f000 fd70 	bl	8001504 <setTimer>
				setTimer(1000,1);
 8000a24:	2101      	movs	r1, #1
 8000a26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a2a:	f000 fd6b 	bl	8001504 <setTimer>
				status = RED_AMBER;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <manual_run+0x20c>)
 8000a30:	2205      	movs	r2, #5
 8000a32:	601a      	str	r2, [r3, #0]
			break;
 8000a34:	e005      	b.n	8000a42 <manual_run+0x206>
			break;
 8000a36:	bf00      	nop
 8000a38:	e004      	b.n	8000a44 <manual_run+0x208>
			break;
 8000a3a:	bf00      	nop
 8000a3c:	e002      	b.n	8000a44 <manual_run+0x208>
			break;
 8000a3e:	bf00      	nop
 8000a40:	e000      	b.n	8000a44 <manual_run+0x208>
			break;
 8000a42:	bf00      	nop
	}
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000004 	.word	0x20000004
 8000a50:	20000124 	.word	0x20000124

08000a54 <setting_run>:
 *
 *  Created on: Nov 1, 2024
 *      Author: 84859
 */
#include "setting.h"
void setting_run(){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
	switch(status){
 8000a5a:	4b98      	ldr	r3, [pc, #608]	@ (8000cbc <setting_run+0x268>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b16      	cmp	r3, #22
 8000a60:	d003      	beq.n	8000a6a <setting_run+0x16>
 8000a62:	2b17      	cmp	r3, #23
 8000a64:	f000 8092 	beq.w	8000b8c <setting_run+0x138>
					setTimer((count_buffer_root[1]+1)*1000,0);//chinh
				}
				break;
	}

}
 8000a68:	e123      	b.n	8000cb2 <setting_run+0x25e>
		display7seg2_digit2(count_buffer_root[1]);
 8000a6a:	4b95      	ldr	r3, [pc, #596]	@ (8000cc0 <setting_run+0x26c>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f92a 	bl	8000cc8 <display7seg2_digit2>
		display7seg2_digit(count_buffer_root[4]);
 8000a74:	4b92      	ldr	r3, [pc, #584]	@ (8000cc0 <setting_run+0x26c>)
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 f981 	bl	8000d80 <display7seg2_digit>
		traffic_green_green();
 8000a7e:	f000 fed7 	bl	8001830 <traffic_green_green>
		if(isButtonPressed(1)){
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff fccc 	bl	8000420 <isButtonPressed>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d01a      	beq.n	8000ac4 <setting_run+0x70>
			if((count_buffer_root[1] + count_buffer_root[2])<100 ){
 8000a8e:	4b8c      	ldr	r3, [pc, #560]	@ (8000cc0 <setting_run+0x26c>)
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	4b8b      	ldr	r3, [pc, #556]	@ (8000cc0 <setting_run+0x26c>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	4413      	add	r3, r2
 8000a98:	2b63      	cmp	r3, #99	@ 0x63
 8000a9a:	dc09      	bgt.n	8000ab0 <setting_run+0x5c>
				count_buffer_root[1] +=1;
 8000a9c:	4b88      	ldr	r3, [pc, #544]	@ (8000cc0 <setting_run+0x26c>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a87      	ldr	r2, [pc, #540]	@ (8000cc0 <setting_run+0x26c>)
 8000aa4:	6053      	str	r3, [r2, #4]
				count_buffer_root[4] +=1;
 8000aa6:	4b86      	ldr	r3, [pc, #536]	@ (8000cc0 <setting_run+0x26c>)
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4a84      	ldr	r2, [pc, #528]	@ (8000cc0 <setting_run+0x26c>)
 8000aae:	6113      	str	r3, [r2, #16]
			if(count_buffer_root[1] == 98){
 8000ab0:	4b83      	ldr	r3, [pc, #524]	@ (8000cc0 <setting_run+0x26c>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b62      	cmp	r3, #98	@ 0x62
 8000ab6:	d105      	bne.n	8000ac4 <setting_run+0x70>
				count_buffer_root[1] = 1;
 8000ab8:	4b81      	ldr	r3, [pc, #516]	@ (8000cc0 <setting_run+0x26c>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	605a      	str	r2, [r3, #4]
				count_buffer_root[4] = 1;
 8000abe:	4b80      	ldr	r3, [pc, #512]	@ (8000cc0 <setting_run+0x26c>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	611a      	str	r2, [r3, #16]
		if(isButtonPressed(2)){
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f7ff fcab 	bl	8000420 <isButtonPressed>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d002      	beq.n	8000ad6 <setting_run+0x82>
			status = SETTING_AMBER;
 8000ad0:	4b7a      	ldr	r3, [pc, #488]	@ (8000cbc <setting_run+0x268>)
 8000ad2:	2217      	movs	r2, #23
 8000ad4:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(3)){
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f7ff fca2 	bl	8000420 <isButtonPressed>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d01c      	beq.n	8000b1c <setting_run+0xc8>
			if(count_buffer_root[1] > 1 && count_buffer_root[4] > 1){
 8000ae2:	4b77      	ldr	r3, [pc, #476]	@ (8000cc0 <setting_run+0x26c>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	dd0e      	ble.n	8000b08 <setting_run+0xb4>
 8000aea:	4b75      	ldr	r3, [pc, #468]	@ (8000cc0 <setting_run+0x26c>)
 8000aec:	691b      	ldr	r3, [r3, #16]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	dd0a      	ble.n	8000b08 <setting_run+0xb4>
				count_buffer_root[1] -=1;
 8000af2:	4b73      	ldr	r3, [pc, #460]	@ (8000cc0 <setting_run+0x26c>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	4a71      	ldr	r2, [pc, #452]	@ (8000cc0 <setting_run+0x26c>)
 8000afa:	6053      	str	r3, [r2, #4]
				count_buffer_root[4] -=1;
 8000afc:	4b70      	ldr	r3, [pc, #448]	@ (8000cc0 <setting_run+0x26c>)
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	4a6f      	ldr	r2, [pc, #444]	@ (8000cc0 <setting_run+0x26c>)
 8000b04:	6113      	str	r3, [r2, #16]
 8000b06:	e009      	b.n	8000b1c <setting_run+0xc8>
			else if(count_buffer_root[2]==1){
 8000b08:	4b6d      	ldr	r3, [pc, #436]	@ (8000cc0 <setting_run+0x26c>)
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d105      	bne.n	8000b1c <setting_run+0xc8>
			count_buffer_root[1] = 97;
 8000b10:	4b6b      	ldr	r3, [pc, #428]	@ (8000cc0 <setting_run+0x26c>)
 8000b12:	2261      	movs	r2, #97	@ 0x61
 8000b14:	605a      	str	r2, [r3, #4]
			count_buffer_root[4] = 97;
 8000b16:	4b6a      	ldr	r3, [pc, #424]	@ (8000cc0 <setting_run+0x26c>)
 8000b18:	2261      	movs	r2, #97	@ 0x61
 8000b1a:	611a      	str	r2, [r3, #16]
		if(isButtonPressed(4)){
 8000b1c:	2004      	movs	r0, #4
 8000b1e:	f7ff fc7f 	bl	8000420 <isButtonPressed>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f000 80c1 	beq.w	8000cac <setting_run+0x258>
			count_buffer_root[0] = count_buffer_root[3] = count_buffer_root[1] + count_buffer_root[2] + 1;
 8000b2a:	4b65      	ldr	r3, [pc, #404]	@ (8000cc0 <setting_run+0x26c>)
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	4b64      	ldr	r3, [pc, #400]	@ (8000cc0 <setting_run+0x26c>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	4413      	add	r3, r2
 8000b34:	3301      	adds	r3, #1
 8000b36:	4a62      	ldr	r2, [pc, #392]	@ (8000cc0 <setting_run+0x26c>)
 8000b38:	60d3      	str	r3, [r2, #12]
 8000b3a:	4b61      	ldr	r3, [pc, #388]	@ (8000cc0 <setting_run+0x26c>)
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	4a60      	ldr	r2, [pc, #384]	@ (8000cc0 <setting_run+0x26c>)
 8000b40:	6013      	str	r3, [r2, #0]
			for(int i = 0; i < sizeof(count_buffer_root) /sizeof(count_buffer_root[0]); i++ ){
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	e00a      	b.n	8000b5e <setting_run+0x10a>
						count_buffer[i] = count_buffer_root[i];
 8000b48:	4a5d      	ldr	r2, [pc, #372]	@ (8000cc0 <setting_run+0x26c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b50:	495c      	ldr	r1, [pc, #368]	@ (8000cc4 <setting_run+0x270>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < sizeof(count_buffer_root) /sizeof(count_buffer_root[0]); i++ ){
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b05      	cmp	r3, #5
 8000b62:	d9f1      	bls.n	8000b48 <setting_run+0xf4>
			status = GREEN_RED;
 8000b64:	4b55      	ldr	r3, [pc, #340]	@ (8000cbc <setting_run+0x268>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	601a      	str	r2, [r3, #0]
			setTimer(1000,1);
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b70:	f000 fcc8 	bl	8001504 <setTimer>
			setTimer((count_buffer_root[1]+1)*1000,0);
 8000b74:	4b52      	ldr	r3, [pc, #328]	@ (8000cc0 <setting_run+0x26c>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b7e:	fb02 f303 	mul.w	r3, r2, r3
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fcbd 	bl	8001504 <setTimer>
		break;
 8000b8a:	e08f      	b.n	8000cac <setting_run+0x258>
		traffic_amber_amber();
 8000b8c:	f000 fe2c 	bl	80017e8 <traffic_amber_amber>
		display7seg2_digit2(count_buffer_root[2]);
 8000b90:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc0 <setting_run+0x26c>)
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f897 	bl	8000cc8 <display7seg2_digit2>
				display7seg2_digit(count_buffer_root[5]);
 8000b9a:	4b49      	ldr	r3, [pc, #292]	@ (8000cc0 <setting_run+0x26c>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f8ee 	bl	8000d80 <display7seg2_digit>
		if(isButtonPressed(1)){
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff fc3b 	bl	8000420 <isButtonPressed>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d01a      	beq.n	8000be6 <setting_run+0x192>
					if((count_buffer_root[1] + count_buffer_root[2])<100 ){
 8000bb0:	4b43      	ldr	r3, [pc, #268]	@ (8000cc0 <setting_run+0x26c>)
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	4b42      	ldr	r3, [pc, #264]	@ (8000cc0 <setting_run+0x26c>)
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	4413      	add	r3, r2
 8000bba:	2b63      	cmp	r3, #99	@ 0x63
 8000bbc:	dc09      	bgt.n	8000bd2 <setting_run+0x17e>
						count_buffer_root[2] +=1;
 8000bbe:	4b40      	ldr	r3, [pc, #256]	@ (8000cc0 <setting_run+0x26c>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a3e      	ldr	r2, [pc, #248]	@ (8000cc0 <setting_run+0x26c>)
 8000bc6:	6093      	str	r3, [r2, #8]
						count_buffer_root[5] +=1;
 8000bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc0 <setting_run+0x26c>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a3c      	ldr	r2, [pc, #240]	@ (8000cc0 <setting_run+0x26c>)
 8000bd0:	6153      	str	r3, [r2, #20]
					if(count_buffer_root[2] == 98){
 8000bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc0 <setting_run+0x26c>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b62      	cmp	r3, #98	@ 0x62
 8000bd8:	d105      	bne.n	8000be6 <setting_run+0x192>
						count_buffer_root[2] = 1;
 8000bda:	4b39      	ldr	r3, [pc, #228]	@ (8000cc0 <setting_run+0x26c>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	609a      	str	r2, [r3, #8]
						count_buffer_root[5] = 1;
 8000be0:	4b37      	ldr	r3, [pc, #220]	@ (8000cc0 <setting_run+0x26c>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	615a      	str	r2, [r3, #20]
				if(isButtonPressed(2)){
 8000be6:	2002      	movs	r0, #2
 8000be8:	f7ff fc1a 	bl	8000420 <isButtonPressed>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d002      	beq.n	8000bf8 <setting_run+0x1a4>
					status = SETTING_GREEN;
 8000bf2:	4b32      	ldr	r3, [pc, #200]	@ (8000cbc <setting_run+0x268>)
 8000bf4:	2216      	movs	r2, #22
 8000bf6:	601a      	str	r2, [r3, #0]
				if(isButtonPressed(3)){
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f7ff fc11 	bl	8000420 <isButtonPressed>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01c      	beq.n	8000c3e <setting_run+0x1ea>
					if(count_buffer_root[2] > 1 && count_buffer_root[5] > 1){
 8000c04:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc0 <setting_run+0x26c>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	dd0e      	ble.n	8000c2a <setting_run+0x1d6>
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc0 <setting_run+0x26c>)
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	dd0a      	ble.n	8000c2a <setting_run+0x1d6>
						count_buffer_root[2] -=1;
 8000c14:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc0 <setting_run+0x26c>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	4a29      	ldr	r2, [pc, #164]	@ (8000cc0 <setting_run+0x26c>)
 8000c1c:	6093      	str	r3, [r2, #8]
						count_buffer_root[5] -=1;
 8000c1e:	4b28      	ldr	r3, [pc, #160]	@ (8000cc0 <setting_run+0x26c>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	4a26      	ldr	r2, [pc, #152]	@ (8000cc0 <setting_run+0x26c>)
 8000c26:	6153      	str	r3, [r2, #20]
 8000c28:	e009      	b.n	8000c3e <setting_run+0x1ea>
					else if(count_buffer_root[1] == 1){
 8000c2a:	4b25      	ldr	r3, [pc, #148]	@ (8000cc0 <setting_run+0x26c>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d105      	bne.n	8000c3e <setting_run+0x1ea>
						count_buffer_root[2] = 97;
 8000c32:	4b23      	ldr	r3, [pc, #140]	@ (8000cc0 <setting_run+0x26c>)
 8000c34:	2261      	movs	r2, #97	@ 0x61
 8000c36:	609a      	str	r2, [r3, #8]
						count_buffer_root[5] = 97;
 8000c38:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <setting_run+0x26c>)
 8000c3a:	2261      	movs	r2, #97	@ 0x61
 8000c3c:	615a      	str	r2, [r3, #20]
				if(isButtonPressed(4)){
 8000c3e:	2004      	movs	r0, #4
 8000c40:	f7ff fbee 	bl	8000420 <isButtonPressed>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d032      	beq.n	8000cb0 <setting_run+0x25c>
					count_buffer_root[0] = count_buffer_root[3] = count_buffer_root[1] + count_buffer_root[2]+1;
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <setting_run+0x26c>)
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <setting_run+0x26c>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	4413      	add	r3, r2
 8000c54:	3301      	adds	r3, #1
 8000c56:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc0 <setting_run+0x26c>)
 8000c58:	60d3      	str	r3, [r2, #12]
 8000c5a:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <setting_run+0x26c>)
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	4a18      	ldr	r2, [pc, #96]	@ (8000cc0 <setting_run+0x26c>)
 8000c60:	6013      	str	r3, [r2, #0]
					for(int i = 0; i < sizeof(count_buffer_root) /sizeof(count_buffer_root[0]); i++ ){
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	e00a      	b.n	8000c7e <setting_run+0x22a>
								count_buffer[i] = count_buffer_root[i];
 8000c68:	4a15      	ldr	r2, [pc, #84]	@ (8000cc0 <setting_run+0x26c>)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c70:	4914      	ldr	r1, [pc, #80]	@ (8000cc4 <setting_run+0x270>)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					for(int i = 0; i < sizeof(count_buffer_root) /sizeof(count_buffer_root[0]); i++ ){
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b05      	cmp	r3, #5
 8000c82:	d9f1      	bls.n	8000c68 <setting_run+0x214>
					status = GREEN_RED;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <setting_run+0x268>)
 8000c86:	2202      	movs	r2, #2
 8000c88:	601a      	str	r2, [r3, #0]
					setTimer(1000,1);
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c90:	f000 fc38 	bl	8001504 <setTimer>
					setTimer((count_buffer_root[1]+1)*1000,0);//chinh
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <setting_run+0x26c>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fc2d 	bl	8001504 <setTimer>
				break;
 8000caa:	e001      	b.n	8000cb0 <setting_run+0x25c>
		break;
 8000cac:	bf00      	nop
 8000cae:	e000      	b.n	8000cb2 <setting_run+0x25e>
				break;
 8000cb0:	bf00      	nop
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000004 	.word	0x20000004
 8000cc4:	2000001c 	.word	0x2000001c

08000cc8 <display7seg2_digit2>:
 *  Created on: Sep 24, 2024
 *      Author: 84859
 */
#include "seven_seg.h"
int state = 1;
void display7seg2_digit2(int num){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	if(state){
 8000cd0:	4b27      	ldr	r3, [pc, #156]	@ (8000d70 <display7seg2_digit2+0xa8>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d01a      	beq.n	8000d0e <display7seg2_digit2+0x46>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cde:	4825      	ldr	r0, [pc, #148]	@ (8000d74 <display7seg2_digit2+0xac>)
 8000ce0:	f001 f8f3 	bl	8001eca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cea:	4822      	ldr	r0, [pc, #136]	@ (8000d74 <display7seg2_digit2+0xac>)
 8000cec:	f001 f8ed 	bl	8001eca <HAL_GPIO_WritePin>
		display7seg2(num%10);
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <display7seg2_digit2+0xb0>)
 8000cf4:	fb83 1302 	smull	r1, r3, r3, r2
 8000cf8:	1099      	asrs	r1, r3, #2
 8000cfa:	17d3      	asrs	r3, r2, #31
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	460b      	mov	r3, r1
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	440b      	add	r3, r1
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	1ad1      	subs	r1, r2, r3
 8000d08:	4608      	mov	r0, r1
 8000d0a:	f000 fa23 	bl	8001154 <display7seg2>
	}
	if(!state){
 8000d0e:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <display7seg2_digit2+0xa8>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d115      	bne.n	8000d42 <display7seg2_digit2+0x7a>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d1c:	4815      	ldr	r0, [pc, #84]	@ (8000d74 <display7seg2_digit2+0xac>)
 8000d1e:	f001 f8d4 	bl	8001eca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d28:	4812      	ldr	r0, [pc, #72]	@ (8000d74 <display7seg2_digit2+0xac>)
 8000d2a:	f001 f8ce 	bl	8001eca <HAL_GPIO_WritePin>

		display7seg2(num/10);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a11      	ldr	r2, [pc, #68]	@ (8000d78 <display7seg2_digit2+0xb0>)
 8000d32:	fb82 1203 	smull	r1, r2, r2, r3
 8000d36:	1092      	asrs	r2, r2, #2
 8000d38:	17db      	asrs	r3, r3, #31
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fa09 	bl	8001154 <display7seg2>
		}
	if (timer_flag[2] == 1){
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <display7seg2_digit2+0xb4>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d10d      	bne.n	8000d66 <display7seg2_digit2+0x9e>
		state = !state;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <display7seg2_digit2+0xa8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	bf0c      	ite	eq
 8000d52:	2301      	moveq	r3, #1
 8000d54:	2300      	movne	r3, #0
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <display7seg2_digit2+0xa8>)
 8000d5c:	601a      	str	r2, [r3, #0]
		setTimer(40, 2);
 8000d5e:	2102      	movs	r1, #2
 8000d60:	2028      	movs	r0, #40	@ 0x28
 8000d62:	f000 fbcf 	bl	8001504 <setTimer>
	}
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000078 	.word	0x20000078
 8000d74:	40010c00 	.word	0x40010c00
 8000d78:	66666667 	.word	0x66666667
 8000d7c:	20000124 	.word	0x20000124

08000d80 <display7seg2_digit>:
void display7seg2_digit(int num){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	if(state){
 8000d88:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <display7seg2_digit+0xa8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d01a      	beq.n	8000dc6 <display7seg2_digit+0x46>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d96:	4825      	ldr	r0, [pc, #148]	@ (8000e2c <display7seg2_digit+0xac>)
 8000d98:	f001 f897 	bl	8001eca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000da2:	4822      	ldr	r0, [pc, #136]	@ (8000e2c <display7seg2_digit+0xac>)
 8000da4:	f001 f891 	bl	8001eca <HAL_GPIO_WritePin>
		display7seg(num%10);
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <display7seg2_digit+0xb0>)
 8000dac:	fb83 1302 	smull	r1, r3, r3, r2
 8000db0:	1099      	asrs	r1, r3, #2
 8000db2:	17d3      	asrs	r3, r2, #31
 8000db4:	1ac9      	subs	r1, r1, r3
 8000db6:	460b      	mov	r3, r1
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	440b      	add	r3, r1
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	1ad1      	subs	r1, r2, r3
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	f000 f839 	bl	8000e38 <display7seg>
	}
	if(!state){
 8000dc6:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <display7seg2_digit+0xa8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d115      	bne.n	8000dfa <display7seg2_digit+0x7a>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dd4:	4815      	ldr	r0, [pc, #84]	@ (8000e2c <display7seg2_digit+0xac>)
 8000dd6:	f001 f878 	bl	8001eca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de0:	4812      	ldr	r0, [pc, #72]	@ (8000e2c <display7seg2_digit+0xac>)
 8000de2:	f001 f872 	bl	8001eca <HAL_GPIO_WritePin>

		display7seg(num/10);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a11      	ldr	r2, [pc, #68]	@ (8000e30 <display7seg2_digit+0xb0>)
 8000dea:	fb82 1203 	smull	r1, r2, r2, r3
 8000dee:	1092      	asrs	r2, r2, #2
 8000df0:	17db      	asrs	r3, r3, #31
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f81f 	bl	8000e38 <display7seg>
		}
	if (timer_flag[2] == 1){
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <display7seg2_digit+0xb4>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d10d      	bne.n	8000e1e <display7seg2_digit+0x9e>
		state = !state;
 8000e02:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <display7seg2_digit+0xa8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	bf0c      	ite	eq
 8000e0a:	2301      	moveq	r3, #1
 8000e0c:	2300      	movne	r3, #0
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <display7seg2_digit+0xa8>)
 8000e14:	601a      	str	r2, [r3, #0]
		setTimer(40, 2);
 8000e16:	2102      	movs	r1, #2
 8000e18:	2028      	movs	r0, #40	@ 0x28
 8000e1a:	f000 fb73 	bl	8001504 <setTimer>
	}
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000078 	.word	0x20000078
 8000e2c:	40010c00 	.word	0x40010c00
 8000e30:	66666667 	.word	0x66666667
 8000e34:	20000124 	.word	0x20000124

08000e38 <display7seg>:

void display7seg(int num){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	switch(num){
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b09      	cmp	r3, #9
 8000e44:	f200 8180 	bhi.w	8001148 <display7seg+0x310>
 8000e48:	a201      	add	r2, pc, #4	@ (adr r2, 8000e50 <display7seg+0x18>)
 8000e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4e:	bf00      	nop
 8000e50:	08000e79 	.word	0x08000e79
 8000e54:	08000ec1 	.word	0x08000ec1
 8000e58:	08000f09 	.word	0x08000f09
 8000e5c:	08000f51 	.word	0x08000f51
 8000e60:	08000f99 	.word	0x08000f99
 8000e64:	08000fe1 	.word	0x08000fe1
 8000e68:	08001029 	.word	0x08001029
 8000e6c:	08001071 	.word	0x08001071
 8000e70:	080010b9 	.word	0x080010b9
 8000e74:	08001101 	.word	0x08001101
		 case 0:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	48b4      	ldr	r0, [pc, #720]	@ (8001150 <display7seg+0x318>)
 8000e7e:	f001 f824 	bl	8001eca <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2104      	movs	r1, #4
 8000e86:	48b2      	ldr	r0, [pc, #712]	@ (8001150 <display7seg+0x318>)
 8000e88:	f001 f81f 	bl	8001eca <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2108      	movs	r1, #8
 8000e90:	48af      	ldr	r0, [pc, #700]	@ (8001150 <display7seg+0x318>)
 8000e92:	f001 f81a 	bl	8001eca <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2110      	movs	r1, #16
 8000e9a:	48ad      	ldr	r0, [pc, #692]	@ (8001150 <display7seg+0x318>)
 8000e9c:	f001 f815 	bl	8001eca <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	48aa      	ldr	r0, [pc, #680]	@ (8001150 <display7seg+0x318>)
 8000ea6:	f001 f810 	bl	8001eca <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2140      	movs	r1, #64	@ 0x40
 8000eae:	48a8      	ldr	r0, [pc, #672]	@ (8001150 <display7seg+0x318>)
 8000eb0:	f001 f80b 	bl	8001eca <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2180      	movs	r1, #128	@ 0x80
 8000eb8:	48a5      	ldr	r0, [pc, #660]	@ (8001150 <display7seg+0x318>)
 8000eba:	f001 f806 	bl	8001eca <HAL_GPIO_WritePin>

			   break;
 8000ebe:	e143      	b.n	8001148 <display7seg+0x310>

		 case 1:
			 HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	48a2      	ldr	r0, [pc, #648]	@ (8001150 <display7seg+0x318>)
 8000ec6:	f001 f800 	bl	8001eca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2108      	movs	r1, #8
 8000ece:	48a0      	ldr	r0, [pc, #640]	@ (8001150 <display7seg+0x318>)
 8000ed0:	f000 fffb 	bl	8001eca <HAL_GPIO_WritePin>


			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	489d      	ldr	r0, [pc, #628]	@ (8001150 <display7seg+0x318>)
 8000eda:	f000 fff6 	bl	8001eca <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2110      	movs	r1, #16
 8000ee2:	489b      	ldr	r0, [pc, #620]	@ (8001150 <display7seg+0x318>)
 8000ee4:	f000 fff1 	bl	8001eca <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2120      	movs	r1, #32
 8000eec:	4898      	ldr	r0, [pc, #608]	@ (8001150 <display7seg+0x318>)
 8000eee:	f000 ffec 	bl	8001eca <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2140      	movs	r1, #64	@ 0x40
 8000ef6:	4896      	ldr	r0, [pc, #600]	@ (8001150 <display7seg+0x318>)
 8000ef8:	f000 ffe7 	bl	8001eca <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2180      	movs	r1, #128	@ 0x80
 8000f00:	4893      	ldr	r0, [pc, #588]	@ (8001150 <display7seg+0x318>)
 8000f02:	f000 ffe2 	bl	8001eca <HAL_GPIO_WritePin>

			  break;
 8000f06:	e11f      	b.n	8001148 <display7seg+0x310>


		 case 2:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	4890      	ldr	r0, [pc, #576]	@ (8001150 <display7seg+0x318>)
 8000f0e:	f000 ffdc 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2104      	movs	r1, #4
 8000f16:	488e      	ldr	r0, [pc, #568]	@ (8001150 <display7seg+0x318>)
 8000f18:	f000 ffd7 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2110      	movs	r1, #16
 8000f20:	488b      	ldr	r0, [pc, #556]	@ (8001150 <display7seg+0x318>)
 8000f22:	f000 ffd2 	bl	8001eca <HAL_GPIO_WritePin>
					  		   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2120      	movs	r1, #32
 8000f2a:	4889      	ldr	r0, [pc, #548]	@ (8001150 <display7seg+0x318>)
 8000f2c:	f000 ffcd 	bl	8001eca <HAL_GPIO_WritePin>
					  		 HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2180      	movs	r1, #128	@ 0x80
 8000f34:	4886      	ldr	r0, [pc, #536]	@ (8001150 <display7seg+0x318>)
 8000f36:	f000 ffc8 	bl	8001eca <HAL_GPIO_WritePin>



					  		  HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	4884      	ldr	r0, [pc, #528]	@ (8001150 <display7seg+0x318>)
 8000f40:	f000 ffc3 	bl	8001eca <HAL_GPIO_WritePin>
					  		  HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2140      	movs	r1, #64	@ 0x40
 8000f48:	4881      	ldr	r0, [pc, #516]	@ (8001150 <display7seg+0x318>)
 8000f4a:	f000 ffbe 	bl	8001eca <HAL_GPIO_WritePin>
					  		  break;
 8000f4e:	e0fb      	b.n	8001148 <display7seg+0x310>

		 case 3:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2102      	movs	r1, #2
 8000f54:	487e      	ldr	r0, [pc, #504]	@ (8001150 <display7seg+0x318>)
 8000f56:	f000 ffb8 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	487c      	ldr	r0, [pc, #496]	@ (8001150 <display7seg+0x318>)
 8000f60:	f000 ffb3 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2108      	movs	r1, #8
 8000f68:	4879      	ldr	r0, [pc, #484]	@ (8001150 <display7seg+0x318>)
 8000f6a:	f000 ffae 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2110      	movs	r1, #16
 8000f72:	4877      	ldr	r0, [pc, #476]	@ (8001150 <display7seg+0x318>)
 8000f74:	f000 ffa9 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	4874      	ldr	r0, [pc, #464]	@ (8001150 <display7seg+0x318>)
 8000f7e:	f000 ffa4 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2140      	movs	r1, #64	@ 0x40
 8000f86:	4872      	ldr	r0, [pc, #456]	@ (8001150 <display7seg+0x318>)
 8000f88:	f000 ff9f 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2180      	movs	r1, #128	@ 0x80
 8000f90:	486f      	ldr	r0, [pc, #444]	@ (8001150 <display7seg+0x318>)
 8000f92:	f000 ff9a 	bl	8001eca <HAL_GPIO_WritePin>
					   break;
 8000f96:	e0d7      	b.n	8001148 <display7seg+0x310>


		 case 4:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	486c      	ldr	r0, [pc, #432]	@ (8001150 <display7seg+0x318>)
 8000f9e:	f000 ff94 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	486a      	ldr	r0, [pc, #424]	@ (8001150 <display7seg+0x318>)
 8000fa8:	f000 ff8f 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2108      	movs	r1, #8
 8000fb0:	4867      	ldr	r0, [pc, #412]	@ (8001150 <display7seg+0x318>)
 8000fb2:	f000 ff8a 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2110      	movs	r1, #16
 8000fba:	4865      	ldr	r0, [pc, #404]	@ (8001150 <display7seg+0x318>)
 8000fbc:	f000 ff85 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	4862      	ldr	r0, [pc, #392]	@ (8001150 <display7seg+0x318>)
 8000fc6:	f000 ff80 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2140      	movs	r1, #64	@ 0x40
 8000fce:	4860      	ldr	r0, [pc, #384]	@ (8001150 <display7seg+0x318>)
 8000fd0:	f000 ff7b 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2180      	movs	r1, #128	@ 0x80
 8000fd8:	485d      	ldr	r0, [pc, #372]	@ (8001150 <display7seg+0x318>)
 8000fda:	f000 ff76 	bl	8001eca <HAL_GPIO_WritePin>

					   break;
 8000fde:	e0b3      	b.n	8001148 <display7seg+0x310>


		 case 5:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	485a      	ldr	r0, [pc, #360]	@ (8001150 <display7seg+0x318>)
 8000fe6:	f000 ff70 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2104      	movs	r1, #4
 8000fee:	4858      	ldr	r0, [pc, #352]	@ (8001150 <display7seg+0x318>)
 8000ff0:	f000 ff6b 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	4855      	ldr	r0, [pc, #340]	@ (8001150 <display7seg+0x318>)
 8000ffa:	f000 ff66 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2110      	movs	r1, #16
 8001002:	4853      	ldr	r0, [pc, #332]	@ (8001150 <display7seg+0x318>)
 8001004:	f000 ff61 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	2120      	movs	r1, #32
 800100c:	4850      	ldr	r0, [pc, #320]	@ (8001150 <display7seg+0x318>)
 800100e:	f000 ff5c 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2140      	movs	r1, #64	@ 0x40
 8001016:	484e      	ldr	r0, [pc, #312]	@ (8001150 <display7seg+0x318>)
 8001018:	f000 ff57 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2180      	movs	r1, #128	@ 0x80
 8001020:	484b      	ldr	r0, [pc, #300]	@ (8001150 <display7seg+0x318>)
 8001022:	f000 ff52 	bl	8001eca <HAL_GPIO_WritePin>
					   break;
 8001026:	e08f      	b.n	8001148 <display7seg+0x310>


		 case 6:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2102      	movs	r1, #2
 800102c:	4848      	ldr	r0, [pc, #288]	@ (8001150 <display7seg+0x318>)
 800102e:	f000 ff4c 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2104      	movs	r1, #4
 8001036:	4846      	ldr	r0, [pc, #280]	@ (8001150 <display7seg+0x318>)
 8001038:	f000 ff47 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	2108      	movs	r1, #8
 8001040:	4843      	ldr	r0, [pc, #268]	@ (8001150 <display7seg+0x318>)
 8001042:	f000 ff42 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2110      	movs	r1, #16
 800104a:	4841      	ldr	r0, [pc, #260]	@ (8001150 <display7seg+0x318>)
 800104c:	f000 ff3d 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	483e      	ldr	r0, [pc, #248]	@ (8001150 <display7seg+0x318>)
 8001056:	f000 ff38 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2140      	movs	r1, #64	@ 0x40
 800105e:	483c      	ldr	r0, [pc, #240]	@ (8001150 <display7seg+0x318>)
 8001060:	f000 ff33 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2180      	movs	r1, #128	@ 0x80
 8001068:	4839      	ldr	r0, [pc, #228]	@ (8001150 <display7seg+0x318>)
 800106a:	f000 ff2e 	bl	8001eca <HAL_GPIO_WritePin>
					   break;
 800106e:	e06b      	b.n	8001148 <display7seg+0x310>


		 case 7:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2102      	movs	r1, #2
 8001074:	4836      	ldr	r0, [pc, #216]	@ (8001150 <display7seg+0x318>)
 8001076:	f000 ff28 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2104      	movs	r1, #4
 800107e:	4834      	ldr	r0, [pc, #208]	@ (8001150 <display7seg+0x318>)
 8001080:	f000 ff23 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2108      	movs	r1, #8
 8001088:	4831      	ldr	r0, [pc, #196]	@ (8001150 <display7seg+0x318>)
 800108a:	f000 ff1e 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2110      	movs	r1, #16
 8001092:	482f      	ldr	r0, [pc, #188]	@ (8001150 <display7seg+0x318>)
 8001094:	f000 ff19 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2120      	movs	r1, #32
 800109c:	482c      	ldr	r0, [pc, #176]	@ (8001150 <display7seg+0x318>)
 800109e:	f000 ff14 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2140      	movs	r1, #64	@ 0x40
 80010a6:	482a      	ldr	r0, [pc, #168]	@ (8001150 <display7seg+0x318>)
 80010a8:	f000 ff0f 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2180      	movs	r1, #128	@ 0x80
 80010b0:	4827      	ldr	r0, [pc, #156]	@ (8001150 <display7seg+0x318>)
 80010b2:	f000 ff0a 	bl	8001eca <HAL_GPIO_WritePin>
					   break;
 80010b6:	e047      	b.n	8001148 <display7seg+0x310>

		 case 8:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2102      	movs	r1, #2
 80010bc:	4824      	ldr	r0, [pc, #144]	@ (8001150 <display7seg+0x318>)
 80010be:	f000 ff04 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2104      	movs	r1, #4
 80010c6:	4822      	ldr	r0, [pc, #136]	@ (8001150 <display7seg+0x318>)
 80010c8:	f000 feff 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2108      	movs	r1, #8
 80010d0:	481f      	ldr	r0, [pc, #124]	@ (8001150 <display7seg+0x318>)
 80010d2:	f000 fefa 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2110      	movs	r1, #16
 80010da:	481d      	ldr	r0, [pc, #116]	@ (8001150 <display7seg+0x318>)
 80010dc:	f000 fef5 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2120      	movs	r1, #32
 80010e4:	481a      	ldr	r0, [pc, #104]	@ (8001150 <display7seg+0x318>)
 80010e6:	f000 fef0 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2140      	movs	r1, #64	@ 0x40
 80010ee:	4818      	ldr	r0, [pc, #96]	@ (8001150 <display7seg+0x318>)
 80010f0:	f000 feeb 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2180      	movs	r1, #128	@ 0x80
 80010f8:	4815      	ldr	r0, [pc, #84]	@ (8001150 <display7seg+0x318>)
 80010fa:	f000 fee6 	bl	8001eca <HAL_GPIO_WritePin>
					   break;
 80010fe:	e023      	b.n	8001148 <display7seg+0x310>

		 case 9:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2102      	movs	r1, #2
 8001104:	4812      	ldr	r0, [pc, #72]	@ (8001150 <display7seg+0x318>)
 8001106:	f000 fee0 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2104      	movs	r1, #4
 800110e:	4810      	ldr	r0, [pc, #64]	@ (8001150 <display7seg+0x318>)
 8001110:	f000 fedb 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2108      	movs	r1, #8
 8001118:	480d      	ldr	r0, [pc, #52]	@ (8001150 <display7seg+0x318>)
 800111a:	f000 fed6 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2110      	movs	r1, #16
 8001122:	480b      	ldr	r0, [pc, #44]	@ (8001150 <display7seg+0x318>)
 8001124:	f000 fed1 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	2120      	movs	r1, #32
 800112c:	4808      	ldr	r0, [pc, #32]	@ (8001150 <display7seg+0x318>)
 800112e:	f000 fecc 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2140      	movs	r1, #64	@ 0x40
 8001136:	4806      	ldr	r0, [pc, #24]	@ (8001150 <display7seg+0x318>)
 8001138:	f000 fec7 	bl	8001eca <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2180      	movs	r1, #128	@ 0x80
 8001140:	4803      	ldr	r0, [pc, #12]	@ (8001150 <display7seg+0x318>)
 8001142:	f000 fec2 	bl	8001eca <HAL_GPIO_WritePin>
					   break;
 8001146:	bf00      	nop


		 }

	 }
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40010800 	.word	0x40010800

08001154 <display7seg2>:


void display7seg2(int num){
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	switch(num){
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b09      	cmp	r3, #9
 8001160:	f200 81c9 	bhi.w	80014f6 <display7seg2+0x3a2>
 8001164:	a201      	add	r2, pc, #4	@ (adr r2, 800116c <display7seg2+0x18>)
 8001166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116a:	bf00      	nop
 800116c:	08001195 	.word	0x08001195
 8001170:	080011eb 	.word	0x080011eb
 8001174:	08001241 	.word	0x08001241
 8001178:	08001297 	.word	0x08001297
 800117c:	080012ed 	.word	0x080012ed
 8001180:	08001343 	.word	0x08001343
 8001184:	08001399 	.word	0x08001399
 8001188:	080013ef 	.word	0x080013ef
 800118c:	08001445 	.word	0x08001445
 8001190:	080014a1 	.word	0x080014a1
			 case 0:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800119a:	48c0      	ldr	r0, [pc, #768]	@ (800149c <display7seg2+0x348>)
 800119c:	f000 fe95 	bl	8001eca <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011a6:	48bd      	ldr	r0, [pc, #756]	@ (800149c <display7seg2+0x348>)
 80011a8:	f000 fe8f 	bl	8001eca <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011b2:	48ba      	ldr	r0, [pc, #744]	@ (800149c <display7seg2+0x348>)
 80011b4:	f000 fe89 	bl	8001eca <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011be:	48b7      	ldr	r0, [pc, #732]	@ (800149c <display7seg2+0x348>)
 80011c0:	f000 fe83 	bl	8001eca <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ca:	48b4      	ldr	r0, [pc, #720]	@ (800149c <display7seg2+0x348>)
 80011cc:	f000 fe7d 	bl	8001eca <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011d6:	48b1      	ldr	r0, [pc, #708]	@ (800149c <display7seg2+0x348>)
 80011d8:	f000 fe77 	bl	8001eca <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011e2:	48ae      	ldr	r0, [pc, #696]	@ (800149c <display7seg2+0x348>)
 80011e4:	f000 fe71 	bl	8001eca <HAL_GPIO_WritePin>

				   break;
 80011e8:	e185      	b.n	80014f6 <display7seg2+0x3a2>

			 case 1:
				 HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f0:	48aa      	ldr	r0, [pc, #680]	@ (800149c <display7seg2+0x348>)
 80011f2:	f000 fe6a 	bl	8001eca <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011fc:	48a7      	ldr	r0, [pc, #668]	@ (800149c <display7seg2+0x348>)
 80011fe:	f000 fe64 	bl	8001eca <HAL_GPIO_WritePin>


				HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001208:	48a4      	ldr	r0, [pc, #656]	@ (800149c <display7seg2+0x348>)
 800120a:	f000 fe5e 	bl	8001eca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001214:	48a1      	ldr	r0, [pc, #644]	@ (800149c <display7seg2+0x348>)
 8001216:	f000 fe58 	bl	8001eca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_SET);
 800121a:	2201      	movs	r2, #1
 800121c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001220:	489e      	ldr	r0, [pc, #632]	@ (800149c <display7seg2+0x348>)
 8001222:	f000 fe52 	bl	8001eca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800122c:	489b      	ldr	r0, [pc, #620]	@ (800149c <display7seg2+0x348>)
 800122e:	f000 fe4c 	bl	8001eca <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001238:	4898      	ldr	r0, [pc, #608]	@ (800149c <display7seg2+0x348>)
 800123a:	f000 fe46 	bl	8001eca <HAL_GPIO_WritePin>

				  break;
 800123e:	e15a      	b.n	80014f6 <display7seg2+0x3a2>


			 case 2:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001246:	4895      	ldr	r0, [pc, #596]	@ (800149c <display7seg2+0x348>)
 8001248:	f000 fe3f 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001252:	4892      	ldr	r0, [pc, #584]	@ (800149c <display7seg2+0x348>)
 8001254:	f000 fe39 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800125e:	488f      	ldr	r0, [pc, #572]	@ (800149c <display7seg2+0x348>)
 8001260:	f000 fe33 	bl	8001eca <HAL_GPIO_WritePin>
						  		   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800126a:	488c      	ldr	r0, [pc, #560]	@ (800149c <display7seg2+0x348>)
 800126c:	f000 fe2d 	bl	8001eca <HAL_GPIO_WritePin>
						  		 HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001276:	4889      	ldr	r0, [pc, #548]	@ (800149c <display7seg2+0x348>)
 8001278:	f000 fe27 	bl	8001eca <HAL_GPIO_WritePin>



						  		  HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_SET);
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001282:	4886      	ldr	r0, [pc, #536]	@ (800149c <display7seg2+0x348>)
 8001284:	f000 fe21 	bl	8001eca <HAL_GPIO_WritePin>
						  		  HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800128e:	4883      	ldr	r0, [pc, #524]	@ (800149c <display7seg2+0x348>)
 8001290:	f000 fe1b 	bl	8001eca <HAL_GPIO_WritePin>
						  		  break;
 8001294:	e12f      	b.n	80014f6 <display7seg2+0x3a2>

			 case 3:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800129c:	487f      	ldr	r0, [pc, #508]	@ (800149c <display7seg2+0x348>)
 800129e:	f000 fe14 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a8:	487c      	ldr	r0, [pc, #496]	@ (800149c <display7seg2+0x348>)
 80012aa:	f000 fe0e 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012b4:	4879      	ldr	r0, [pc, #484]	@ (800149c <display7seg2+0x348>)
 80012b6:	f000 fe08 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012c0:	4876      	ldr	r0, [pc, #472]	@ (800149c <display7seg2+0x348>)
 80012c2:	f000 fe02 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012cc:	4873      	ldr	r0, [pc, #460]	@ (800149c <display7seg2+0x348>)
 80012ce:	f000 fdfc 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012d8:	4870      	ldr	r0, [pc, #448]	@ (800149c <display7seg2+0x348>)
 80012da:	f000 fdf6 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012e4:	486d      	ldr	r0, [pc, #436]	@ (800149c <display7seg2+0x348>)
 80012e6:	f000 fdf0 	bl	8001eca <HAL_GPIO_WritePin>
						   break;
 80012ea:	e104      	b.n	80014f6 <display7seg2+0x3a2>


			 case 4:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012f2:	486a      	ldr	r0, [pc, #424]	@ (800149c <display7seg2+0x348>)
 80012f4:	f000 fde9 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012fe:	4867      	ldr	r0, [pc, #412]	@ (800149c <display7seg2+0x348>)
 8001300:	f000 fde3 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800130a:	4864      	ldr	r0, [pc, #400]	@ (800149c <display7seg2+0x348>)
 800130c:	f000 fddd 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001316:	4861      	ldr	r0, [pc, #388]	@ (800149c <display7seg2+0x348>)
 8001318:	f000 fdd7 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001322:	485e      	ldr	r0, [pc, #376]	@ (800149c <display7seg2+0x348>)
 8001324:	f000 fdd1 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800132e:	485b      	ldr	r0, [pc, #364]	@ (800149c <display7seg2+0x348>)
 8001330:	f000 fdcb 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800133a:	4858      	ldr	r0, [pc, #352]	@ (800149c <display7seg2+0x348>)
 800133c:	f000 fdc5 	bl	8001eca <HAL_GPIO_WritePin>

						   break;
 8001340:	e0d9      	b.n	80014f6 <display7seg2+0x3a2>


			 case 5:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001348:	4854      	ldr	r0, [pc, #336]	@ (800149c <display7seg2+0x348>)
 800134a:	f000 fdbe 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001354:	4851      	ldr	r0, [pc, #324]	@ (800149c <display7seg2+0x348>)
 8001356:	f000 fdb8 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001360:	484e      	ldr	r0, [pc, #312]	@ (800149c <display7seg2+0x348>)
 8001362:	f000 fdb2 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800136c:	484b      	ldr	r0, [pc, #300]	@ (800149c <display7seg2+0x348>)
 800136e:	f000 fdac 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001378:	4848      	ldr	r0, [pc, #288]	@ (800149c <display7seg2+0x348>)
 800137a:	f000 fda6 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001384:	4845      	ldr	r0, [pc, #276]	@ (800149c <display7seg2+0x348>)
 8001386:	f000 fda0 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001390:	4842      	ldr	r0, [pc, #264]	@ (800149c <display7seg2+0x348>)
 8001392:	f000 fd9a 	bl	8001eca <HAL_GPIO_WritePin>
						   break;
 8001396:	e0ae      	b.n	80014f6 <display7seg2+0x3a2>


			 case 6:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800139e:	483f      	ldr	r0, [pc, #252]	@ (800149c <display7seg2+0x348>)
 80013a0:	f000 fd93 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013aa:	483c      	ldr	r0, [pc, #240]	@ (800149c <display7seg2+0x348>)
 80013ac:	f000 fd8d 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013b6:	4839      	ldr	r0, [pc, #228]	@ (800149c <display7seg2+0x348>)
 80013b8:	f000 fd87 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013c2:	4836      	ldr	r0, [pc, #216]	@ (800149c <display7seg2+0x348>)
 80013c4:	f000 fd81 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013ce:	4833      	ldr	r0, [pc, #204]	@ (800149c <display7seg2+0x348>)
 80013d0:	f000 fd7b 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013da:	4830      	ldr	r0, [pc, #192]	@ (800149c <display7seg2+0x348>)
 80013dc:	f000 fd75 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013e6:	482d      	ldr	r0, [pc, #180]	@ (800149c <display7seg2+0x348>)
 80013e8:	f000 fd6f 	bl	8001eca <HAL_GPIO_WritePin>
						   break;
 80013ec:	e083      	b.n	80014f6 <display7seg2+0x3a2>


			 case 7:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f4:	4829      	ldr	r0, [pc, #164]	@ (800149c <display7seg2+0x348>)
 80013f6:	f000 fd68 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001400:	4826      	ldr	r0, [pc, #152]	@ (800149c <display7seg2+0x348>)
 8001402:	f000 fd62 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800140c:	4823      	ldr	r0, [pc, #140]	@ (800149c <display7seg2+0x348>)
 800140e:	f000 fd5c 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001418:	4820      	ldr	r0, [pc, #128]	@ (800149c <display7seg2+0x348>)
 800141a:	f000 fd56 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001424:	481d      	ldr	r0, [pc, #116]	@ (800149c <display7seg2+0x348>)
 8001426:	f000 fd50 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_SET);
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001430:	481a      	ldr	r0, [pc, #104]	@ (800149c <display7seg2+0x348>)
 8001432:	f000 fd4a 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800143c:	4817      	ldr	r0, [pc, #92]	@ (800149c <display7seg2+0x348>)
 800143e:	f000 fd44 	bl	8001eca <HAL_GPIO_WritePin>
						   break;
 8001442:	e058      	b.n	80014f6 <display7seg2+0x3a2>

			 case 8:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800144a:	4814      	ldr	r0, [pc, #80]	@ (800149c <display7seg2+0x348>)
 800144c:	f000 fd3d 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001456:	4811      	ldr	r0, [pc, #68]	@ (800149c <display7seg2+0x348>)
 8001458:	f000 fd37 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001462:	480e      	ldr	r0, [pc, #56]	@ (800149c <display7seg2+0x348>)
 8001464:	f000 fd31 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800146e:	480b      	ldr	r0, [pc, #44]	@ (800149c <display7seg2+0x348>)
 8001470:	f000 fd2b 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800147a:	4808      	ldr	r0, [pc, #32]	@ (800149c <display7seg2+0x348>)
 800147c:	f000 fd25 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <display7seg2+0x348>)
 8001488:	f000 fd1f 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001492:	4802      	ldr	r0, [pc, #8]	@ (800149c <display7seg2+0x348>)
 8001494:	f000 fd19 	bl	8001eca <HAL_GPIO_WritePin>
						   break;
 8001498:	e02d      	b.n	80014f6 <display7seg2+0x3a2>
 800149a:	bf00      	nop
 800149c:	40010800 	.word	0x40010800

			 case 9:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014a6:	4816      	ldr	r0, [pc, #88]	@ (8001500 <display7seg2+0x3ac>)
 80014a8:	f000 fd0f 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014b2:	4813      	ldr	r0, [pc, #76]	@ (8001500 <display7seg2+0x3ac>)
 80014b4:	f000 fd09 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014be:	4810      	ldr	r0, [pc, #64]	@ (8001500 <display7seg2+0x3ac>)
 80014c0:	f000 fd03 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014ca:	480d      	ldr	r0, [pc, #52]	@ (8001500 <display7seg2+0x3ac>)
 80014cc:	f000 fcfd 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014d6:	480a      	ldr	r0, [pc, #40]	@ (8001500 <display7seg2+0x3ac>)
 80014d8:	f000 fcf7 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014e2:	4807      	ldr	r0, [pc, #28]	@ (8001500 <display7seg2+0x3ac>)
 80014e4:	f000 fcf1 	bl	8001eca <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014ee:	4804      	ldr	r0, [pc, #16]	@ (8001500 <display7seg2+0x3ac>)
 80014f0:	f000 fceb 	bl	8001eca <HAL_GPIO_WritePin>
						   break;
 80014f4:	bf00      	nop


			 }
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40010800 	.word	0x40010800

08001504 <setTimer>:
 */
#include "software_timer.h"
int timer_counter[10];
int timer_flag[10];

void setTimer(int duration, int index){
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/10;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <setTimer+0x34>)
 8001512:	fb82 1203 	smull	r1, r2, r2, r3
 8001516:	1092      	asrs	r2, r2, #2
 8001518:	17db      	asrs	r3, r3, #31
 800151a:	1ad2      	subs	r2, r2, r3
 800151c:	4907      	ldr	r1, [pc, #28]	@ (800153c <setTimer+0x38>)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001524:	4a06      	ldr	r2, [pc, #24]	@ (8001540 <setTimer+0x3c>)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2100      	movs	r1, #0
 800152a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	66666667 	.word	0x66666667
 800153c:	200000fc 	.word	0x200000fc
 8001540:	20000124 	.word	0x20000124

08001544 <timerRun>:

void timerRun(){
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
	for(int i = 0; i<10; i++){ //TOI UU HOA ----> O(1)
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	e01c      	b.n	800158a <timerRun+0x46>
	if(timer_counter[i] > 0){
 8001550:	4a12      	ldr	r2, [pc, #72]	@ (800159c <timerRun+0x58>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	2b00      	cmp	r3, #0
 800155a:	dd13      	ble.n	8001584 <timerRun+0x40>
		timer_counter[i]--;
 800155c:	4a0f      	ldr	r2, [pc, #60]	@ (800159c <timerRun+0x58>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	490d      	ldr	r1, [pc, #52]	@ (800159c <timerRun+0x58>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] == 0){
 800156e:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <timerRun+0x58>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d104      	bne.n	8001584 <timerRun+0x40>
			timer_flag[i] = 1;
 800157a:	4a09      	ldr	r2, [pc, #36]	@ (80015a0 <timerRun+0x5c>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2101      	movs	r1, #1
 8001580:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<10; i++){ //TOI UU HOA ----> O(1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3301      	adds	r3, #1
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b09      	cmp	r3, #9
 800158e:	dddf      	ble.n	8001550 <timerRun+0xc>
		}
	}
}
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	200000fc 	.word	0x200000fc
 80015a0:	20000124 	.word	0x20000124

080015a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <HAL_MspInit+0x5c>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <HAL_MspInit+0x5c>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6193      	str	r3, [r2, #24]
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_MspInit+0x5c>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <HAL_MspInit+0x5c>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001600 <HAL_MspInit+0x5c>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	61d3      	str	r3, [r2, #28]
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <HAL_MspInit+0x5c>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80015da:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <HAL_MspInit+0x60>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_MspInit+0x60>)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000

08001608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001618:	d113      	bne.n	8001642 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <HAL_TIM_Base_MspInit+0x44>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <HAL_TIM_Base_MspInit+0x44>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <HAL_TIM_Base_MspInit+0x44>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	201c      	movs	r0, #28
 8001638:	f000 fa7d 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800163c:	201c      	movs	r0, #28
 800163e:	f000 fa96 	bl	8001b6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <NMI_Handler+0x4>

08001658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <MemManage_Handler+0x4>

08001668 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <UsageFault_Handler+0x4>

08001678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a0:	f000 f956 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016ac:	4802      	ldr	r0, [pc, #8]	@ (80016b8 <TIM2_IRQHandler+0x10>)
 80016ae:	f001 f89f 	bl	80027f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200000b4 	.word	0x200000b4

080016bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <traffic_green_red>:
 *
 *  Created on: Sep 24, 2024
 *      Author: 84859
 */
#include "traffic_led.h"
void traffic_green_red(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
 HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2108      	movs	r1, #8
 80016d0:	480e      	ldr	r0, [pc, #56]	@ (800170c <traffic_green_red+0x44>)
 80016d2:	f000 fbfa 	bl	8001eca <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); //ON
 80016d6:	2201      	movs	r2, #1
 80016d8:	2110      	movs	r1, #16
 80016da:	480c      	ldr	r0, [pc, #48]	@ (800170c <traffic_green_red+0x44>)
 80016dc:	f000 fbf5 	bl	8001eca <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2120      	movs	r1, #32
 80016e4:	4809      	ldr	r0, [pc, #36]	@ (800170c <traffic_green_red+0x44>)
 80016e6:	f000 fbf0 	bl	8001eca <HAL_GPIO_WritePin>

 HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, SET); //ON
 80016ea:	2201      	movs	r2, #1
 80016ec:	2101      	movs	r1, #1
 80016ee:	4807      	ldr	r0, [pc, #28]	@ (800170c <traffic_green_red+0x44>)
 80016f0:	f000 fbeb 	bl	8001eca <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2102      	movs	r1, #2
 80016f8:	4804      	ldr	r0, [pc, #16]	@ (800170c <traffic_green_red+0x44>)
 80016fa:	f000 fbe6 	bl	8001eca <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(Y_GPIO_Port, Y_Pin, RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2104      	movs	r1, #4
 8001702:	4802      	ldr	r0, [pc, #8]	@ (800170c <traffic_green_red+0x44>)
 8001704:	f000 fbe1 	bl	8001eca <HAL_GPIO_WritePin>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40010c00 	.word	0x40010c00

08001710 <traffic_amber_red>:
void traffic_amber_red(){
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	2108      	movs	r1, #8
 8001718:	480e      	ldr	r0, [pc, #56]	@ (8001754 <traffic_amber_red+0x44>)
 800171a:	f000 fbd6 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2110      	movs	r1, #16
 8001722:	480c      	ldr	r0, [pc, #48]	@ (8001754 <traffic_amber_red+0x44>)
 8001724:	f000 fbd1 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET); //ON
 8001728:	2201      	movs	r2, #1
 800172a:	2120      	movs	r1, #32
 800172c:	4809      	ldr	r0, [pc, #36]	@ (8001754 <traffic_amber_red+0x44>)
 800172e:	f000 fbcc 	bl	8001eca <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, SET); //ON
 8001732:	2201      	movs	r2, #1
 8001734:	2101      	movs	r1, #1
 8001736:	4807      	ldr	r0, [pc, #28]	@ (8001754 <traffic_amber_red+0x44>)
 8001738:	f000 fbc7 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	2102      	movs	r1, #2
 8001740:	4804      	ldr	r0, [pc, #16]	@ (8001754 <traffic_amber_red+0x44>)
 8001742:	f000 fbc2 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y_GPIO_Port, Y_Pin, RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	2104      	movs	r1, #4
 800174a:	4802      	ldr	r0, [pc, #8]	@ (8001754 <traffic_amber_red+0x44>)
 800174c:	f000 fbbd 	bl	8001eca <HAL_GPIO_WritePin>

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40010c00 	.word	0x40010c00

08001758 <traffic_red_green>:
void traffic_red_green(){
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); //ON
 800175c:	2201      	movs	r2, #1
 800175e:	2108      	movs	r1, #8
 8001760:	480e      	ldr	r0, [pc, #56]	@ (800179c <traffic_red_green+0x44>)
 8001762:	f000 fbb2 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	2110      	movs	r1, #16
 800176a:	480c      	ldr	r0, [pc, #48]	@ (800179c <traffic_red_green+0x44>)
 800176c:	f000 fbad 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	2120      	movs	r1, #32
 8001774:	4809      	ldr	r0, [pc, #36]	@ (800179c <traffic_red_green+0x44>)
 8001776:	f000 fba8 	bl	8001eca <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2101      	movs	r1, #1
 800177e:	4807      	ldr	r0, [pc, #28]	@ (800179c <traffic_red_green+0x44>)
 8001780:	f000 fba3 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET); //ON
 8001784:	2201      	movs	r2, #1
 8001786:	2102      	movs	r1, #2
 8001788:	4804      	ldr	r0, [pc, #16]	@ (800179c <traffic_red_green+0x44>)
 800178a:	f000 fb9e 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y_GPIO_Port, Y_Pin, RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	2104      	movs	r1, #4
 8001792:	4802      	ldr	r0, [pc, #8]	@ (800179c <traffic_red_green+0x44>)
 8001794:	f000 fb99 	bl	8001eca <HAL_GPIO_WritePin>

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40010c00 	.word	0x40010c00

080017a0 <traffic_red_amber>:
void traffic_red_amber(){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); //ON
 80017a4:	2201      	movs	r2, #1
 80017a6:	2108      	movs	r1, #8
 80017a8:	480e      	ldr	r0, [pc, #56]	@ (80017e4 <traffic_red_amber+0x44>)
 80017aa:	f000 fb8e 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2110      	movs	r1, #16
 80017b2:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <traffic_red_amber+0x44>)
 80017b4:	f000 fb89 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2120      	movs	r1, #32
 80017bc:	4809      	ldr	r0, [pc, #36]	@ (80017e4 <traffic_red_amber+0x44>)
 80017be:	f000 fb84 	bl	8001eca <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2101      	movs	r1, #1
 80017c6:	4807      	ldr	r0, [pc, #28]	@ (80017e4 <traffic_red_amber+0x44>)
 80017c8:	f000 fb7f 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2102      	movs	r1, #2
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <traffic_red_amber+0x44>)
 80017d2:	f000 fb7a 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y_GPIO_Port, Y_Pin, SET);
 80017d6:	2201      	movs	r2, #1
 80017d8:	2104      	movs	r1, #4
 80017da:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <traffic_red_amber+0x44>)
 80017dc:	f000 fb75 	bl	8001eca <HAL_GPIO_WritePin>
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40010c00 	.word	0x40010c00

080017e8 <traffic_amber_amber>:

void traffic_amber_amber(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2108      	movs	r1, #8
 80017f0:	480e      	ldr	r0, [pc, #56]	@ (800182c <traffic_amber_amber+0x44>)
 80017f2:	f000 fb6a 	bl	8001eca <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2110      	movs	r1, #16
 80017fa:	480c      	ldr	r0, [pc, #48]	@ (800182c <traffic_amber_amber+0x44>)
 80017fc:	f000 fb65 	bl	8001eca <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET); //ON
 8001800:	2201      	movs	r2, #1
 8001802:	2120      	movs	r1, #32
 8001804:	4809      	ldr	r0, [pc, #36]	@ (800182c <traffic_amber_amber+0x44>)
 8001806:	f000 fb60 	bl	8001eca <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2101      	movs	r1, #1
 800180e:	4807      	ldr	r0, [pc, #28]	@ (800182c <traffic_amber_amber+0x44>)
 8001810:	f000 fb5b 	bl	8001eca <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	2102      	movs	r1, #2
 8001818:	4804      	ldr	r0, [pc, #16]	@ (800182c <traffic_amber_amber+0x44>)
 800181a:	f000 fb56 	bl	8001eca <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Y_GPIO_Port, Y_Pin, SET);
 800181e:	2201      	movs	r2, #1
 8001820:	2104      	movs	r1, #4
 8001822:	4802      	ldr	r0, [pc, #8]	@ (800182c <traffic_amber_amber+0x44>)
 8001824:	f000 fb51 	bl	8001eca <HAL_GPIO_WritePin>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40010c00 	.word	0x40010c00

08001830 <traffic_green_green>:

void traffic_green_green(){
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	2108      	movs	r1, #8
 8001838:	480e      	ldr	r0, [pc, #56]	@ (8001874 <traffic_green_green+0x44>)
 800183a:	f000 fb46 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); //ON
 800183e:	2201      	movs	r2, #1
 8001840:	2110      	movs	r1, #16
 8001842:	480c      	ldr	r0, [pc, #48]	@ (8001874 <traffic_green_green+0x44>)
 8001844:	f000 fb41 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2120      	movs	r1, #32
 800184c:	4809      	ldr	r0, [pc, #36]	@ (8001874 <traffic_green_green+0x44>)
 800184e:	f000 fb3c 	bl	8001eca <HAL_GPIO_WritePin>


	 HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2101      	movs	r1, #1
 8001856:	4807      	ldr	r0, [pc, #28]	@ (8001874 <traffic_green_green+0x44>)
 8001858:	f000 fb37 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET); //ON
 800185c:	2201      	movs	r2, #1
 800185e:	2102      	movs	r1, #2
 8001860:	4804      	ldr	r0, [pc, #16]	@ (8001874 <traffic_green_green+0x44>)
 8001862:	f000 fb32 	bl	8001eca <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y_GPIO_Port, Y_Pin, RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2104      	movs	r1, #4
 800186a:	4802      	ldr	r0, [pc, #8]	@ (8001874 <traffic_green_green+0x44>)
 800186c:	f000 fb2d 	bl	8001eca <HAL_GPIO_WritePin>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40010c00 	.word	0x40010c00

08001878 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001878:	f7ff ff20 	bl	80016bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800187c:	480b      	ldr	r0, [pc, #44]	@ (80018ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800187e:	490c      	ldr	r1, [pc, #48]	@ (80018b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001880:	4a0c      	ldr	r2, [pc, #48]	@ (80018b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a09      	ldr	r2, [pc, #36]	@ (80018b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001894:	4c09      	ldr	r4, [pc, #36]	@ (80018bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018a2:	f001 faed 	bl	8002e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018a6:	f7fe fe95 	bl	80005d4 <main>
  bx lr
 80018aa:	4770      	bx	lr
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80018b4:	08002f0c 	.word	0x08002f0c
  ldr r2, =_sbss
 80018b8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80018bc:	20000150 	.word	0x20000150

080018c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC1_2_IRQHandler>
	...

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_Init+0x28>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a07      	ldr	r2, [pc, #28]	@ (80018ec <HAL_Init+0x28>)
 80018ce:	f043 0310 	orr.w	r3, r3, #16
 80018d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f000 f923 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018da:	200f      	movs	r0, #15
 80018dc:	f000 f808 	bl	80018f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e0:	f7ff fe60 	bl	80015a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40022000 	.word	0x40022000

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_InitTick+0x54>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_InitTick+0x58>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001906:	fbb3 f3f1 	udiv	r3, r3, r1
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f93b 	bl	8001b8a <HAL_SYSTICK_Config>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e00e      	b.n	800193c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b0f      	cmp	r3, #15
 8001922:	d80a      	bhi.n	800193a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001924:	2200      	movs	r2, #0
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f000 f903 	bl	8001b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001930:	4a06      	ldr	r2, [pc, #24]	@ (800194c <HAL_InitTick+0x5c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000007c 	.word	0x2000007c
 8001948:	20000084 	.word	0x20000084
 800194c:	20000080 	.word	0x20000080

08001950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_IncTick+0x1c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_IncTick+0x20>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a03      	ldr	r2, [pc, #12]	@ (8001970 <HAL_IncTick+0x20>)
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	20000084 	.word	0x20000084
 8001970:	2000014c 	.word	0x2000014c

08001974 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b02      	ldr	r3, [pc, #8]	@ (8001984 <HAL_GetTick+0x10>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	2000014c 	.word	0x2000014c

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4906      	ldr	r1, [pc, #24]	@ (8001a20 <__NVIC_EnableIRQ+0x34>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	@ (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	@ (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	@ 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	@ 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f7ff ff90 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff2d 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b48:	f7ff ff42 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7ff ff90 	bl	8001a78 <NVIC_EncodePriority>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff5f 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff35 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffa2 	bl	8001adc <SysTick_Config>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b08b      	sub	sp, #44	@ 0x2c
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb6:	e161      	b.n	8001e7c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f040 8150 	bne.w	8001e76 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4a97      	ldr	r2, [pc, #604]	@ (8001e38 <HAL_GPIO_Init+0x294>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d05e      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001be0:	4a95      	ldr	r2, [pc, #596]	@ (8001e38 <HAL_GPIO_Init+0x294>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d875      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001be6:	4a95      	ldr	r2, [pc, #596]	@ (8001e3c <HAL_GPIO_Init+0x298>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d058      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001bec:	4a93      	ldr	r2, [pc, #588]	@ (8001e3c <HAL_GPIO_Init+0x298>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d86f      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001bf2:	4a93      	ldr	r2, [pc, #588]	@ (8001e40 <HAL_GPIO_Init+0x29c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d052      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001bf8:	4a91      	ldr	r2, [pc, #580]	@ (8001e40 <HAL_GPIO_Init+0x29c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d869      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001bfe:	4a91      	ldr	r2, [pc, #580]	@ (8001e44 <HAL_GPIO_Init+0x2a0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d04c      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001c04:	4a8f      	ldr	r2, [pc, #572]	@ (8001e44 <HAL_GPIO_Init+0x2a0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d863      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001c0a:	4a8f      	ldr	r2, [pc, #572]	@ (8001e48 <HAL_GPIO_Init+0x2a4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d046      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001c10:	4a8d      	ldr	r2, [pc, #564]	@ (8001e48 <HAL_GPIO_Init+0x2a4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d85d      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001c16:	2b12      	cmp	r3, #18
 8001c18:	d82a      	bhi.n	8001c70 <HAL_GPIO_Init+0xcc>
 8001c1a:	2b12      	cmp	r3, #18
 8001c1c:	d859      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c24 <HAL_GPIO_Init+0x80>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c9f 	.word	0x08001c9f
 8001c28:	08001c79 	.word	0x08001c79
 8001c2c:	08001c8b 	.word	0x08001c8b
 8001c30:	08001ccd 	.word	0x08001ccd
 8001c34:	08001cd3 	.word	0x08001cd3
 8001c38:	08001cd3 	.word	0x08001cd3
 8001c3c:	08001cd3 	.word	0x08001cd3
 8001c40:	08001cd3 	.word	0x08001cd3
 8001c44:	08001cd3 	.word	0x08001cd3
 8001c48:	08001cd3 	.word	0x08001cd3
 8001c4c:	08001cd3 	.word	0x08001cd3
 8001c50:	08001cd3 	.word	0x08001cd3
 8001c54:	08001cd3 	.word	0x08001cd3
 8001c58:	08001cd3 	.word	0x08001cd3
 8001c5c:	08001cd3 	.word	0x08001cd3
 8001c60:	08001cd3 	.word	0x08001cd3
 8001c64:	08001cd3 	.word	0x08001cd3
 8001c68:	08001c81 	.word	0x08001c81
 8001c6c:	08001c95 	.word	0x08001c95
 8001c70:	4a76      	ldr	r2, [pc, #472]	@ (8001e4c <HAL_GPIO_Init+0x2a8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c76:	e02c      	b.n	8001cd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	623b      	str	r3, [r7, #32]
          break;
 8001c7e:	e029      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	3304      	adds	r3, #4
 8001c86:	623b      	str	r3, [r7, #32]
          break;
 8001c88:	e024      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	3308      	adds	r3, #8
 8001c90:	623b      	str	r3, [r7, #32]
          break;
 8001c92:	e01f      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	330c      	adds	r3, #12
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e01a      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	623b      	str	r3, [r7, #32]
          break;
 8001caa:	e013      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	611a      	str	r2, [r3, #16]
          break;
 8001cbe:	e009      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	615a      	str	r2, [r3, #20]
          break;
 8001cca:	e003      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
          break;
 8001cd0:	e000      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          break;
 8001cd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2bff      	cmp	r3, #255	@ 0xff
 8001cd8:	d801      	bhi.n	8001cde <HAL_GPIO_Init+0x13a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	e001      	b.n	8001ce2 <HAL_GPIO_Init+0x13e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2bff      	cmp	r3, #255	@ 0xff
 8001ce8:	d802      	bhi.n	8001cf0 <HAL_GPIO_Init+0x14c>
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	e002      	b.n	8001cf6 <HAL_GPIO_Init+0x152>
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf2:	3b08      	subs	r3, #8
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	210f      	movs	r1, #15
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	6a39      	ldr	r1, [r7, #32]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	431a      	orrs	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80a9 	beq.w	8001e76 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d24:	4b4a      	ldr	r3, [pc, #296]	@ (8001e50 <HAL_GPIO_Init+0x2ac>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a49      	ldr	r2, [pc, #292]	@ (8001e50 <HAL_GPIO_Init+0x2ac>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b47      	ldr	r3, [pc, #284]	@ (8001e50 <HAL_GPIO_Init+0x2ac>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d3c:	4a45      	ldr	r2, [pc, #276]	@ (8001e54 <HAL_GPIO_Init+0x2b0>)
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a3d      	ldr	r2, [pc, #244]	@ (8001e58 <HAL_GPIO_Init+0x2b4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00d      	beq.n	8001d84 <HAL_GPIO_Init+0x1e0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e5c <HAL_GPIO_Init+0x2b8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d007      	beq.n	8001d80 <HAL_GPIO_Init+0x1dc>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a3b      	ldr	r2, [pc, #236]	@ (8001e60 <HAL_GPIO_Init+0x2bc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d101      	bne.n	8001d7c <HAL_GPIO_Init+0x1d8>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e004      	b.n	8001d86 <HAL_GPIO_Init+0x1e2>
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e002      	b.n	8001d86 <HAL_GPIO_Init+0x1e2>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_GPIO_Init+0x1e2>
 8001d84:	2300      	movs	r3, #0
 8001d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d88:	f002 0203 	and.w	r2, r2, #3
 8001d8c:	0092      	lsls	r2, r2, #2
 8001d8e:	4093      	lsls	r3, r2
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d96:	492f      	ldr	r1, [pc, #188]	@ (8001e54 <HAL_GPIO_Init+0x2b0>)
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001db0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	492b      	ldr	r1, [pc, #172]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dbe:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	4927      	ldr	r1, [pc, #156]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dd8:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	4921      	ldr	r1, [pc, #132]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60cb      	str	r3, [r1, #12]
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001de6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	491d      	ldr	r1, [pc, #116]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4917      	ldr	r1, [pc, #92]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4913      	ldr	r1, [pc, #76]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01f      	beq.n	8001e68 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e28:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	490d      	ldr	r1, [pc, #52]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
 8001e34:	e01f      	b.n	8001e76 <HAL_GPIO_Init+0x2d2>
 8001e36:	bf00      	nop
 8001e38:	10320000 	.word	0x10320000
 8001e3c:	10310000 	.word	0x10310000
 8001e40:	10220000 	.word	0x10220000
 8001e44:	10210000 	.word	0x10210000
 8001e48:	10120000 	.word	0x10120000
 8001e4c:	10110000 	.word	0x10110000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010000 	.word	0x40010000
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	40010c00 	.word	0x40010c00
 8001e60:	40011000 	.word	0x40011000
 8001e64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <HAL_GPIO_Init+0x2f4>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	4909      	ldr	r1, [pc, #36]	@ (8001e98 <HAL_GPIO_Init+0x2f4>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	3301      	adds	r3, #1
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f47f ae96 	bne.w	8001bb8 <HAL_GPIO_Init+0x14>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	372c      	adds	r7, #44	@ 0x2c
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	887b      	ldrh	r3, [r7, #2]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	e001      	b.n	8001ebe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	807b      	strh	r3, [r7, #2]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eda:	787b      	ldrb	r3, [r7, #1]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee0:	887a      	ldrh	r2, [r7, #2]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ee6:	e003      	b.n	8001ef0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ee8:	887b      	ldrh	r3, [r7, #2]
 8001eea:	041a      	lsls	r2, r3, #16
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	611a      	str	r2, [r3, #16]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e272      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8087 	beq.w	800202a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f1c:	4b92      	ldr	r3, [pc, #584]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d00c      	beq.n	8001f42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f28:	4b8f      	ldr	r3, [pc, #572]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d112      	bne.n	8001f5a <HAL_RCC_OscConfig+0x5e>
 8001f34:	4b8c      	ldr	r3, [pc, #560]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f40:	d10b      	bne.n	8001f5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f42:	4b89      	ldr	r3, [pc, #548]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d06c      	beq.n	8002028 <HAL_RCC_OscConfig+0x12c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d168      	bne.n	8002028 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e24c      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x76>
 8001f64:	4b80      	ldr	r3, [pc, #512]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a7f      	ldr	r2, [pc, #508]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	e02e      	b.n	8001fd0 <HAL_RCC_OscConfig+0xd4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x98>
 8001f7a:	4b7b      	ldr	r3, [pc, #492]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7a      	ldr	r2, [pc, #488]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b78      	ldr	r3, [pc, #480]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a77      	ldr	r2, [pc, #476]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e01d      	b.n	8001fd0 <HAL_RCC_OscConfig+0xd4>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0xbc>
 8001f9e:	4b72      	ldr	r3, [pc, #456]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a71      	ldr	r2, [pc, #452]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b6f      	ldr	r3, [pc, #444]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6e      	ldr	r2, [pc, #440]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e00b      	b.n	8001fd0 <HAL_RCC_OscConfig+0xd4>
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6a      	ldr	r2, [pc, #424]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b68      	ldr	r3, [pc, #416]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a67      	ldr	r2, [pc, #412]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fccc 	bl	8001974 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff fcc8 	bl	8001974 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	@ 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e200      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xe4>
 8001ffe:	e014      	b.n	800202a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff fcb8 	bl	8001974 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002008:	f7ff fcb4 	bl	8001974 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	@ 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e1ec      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201a:	4b53      	ldr	r3, [pc, #332]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x10c>
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d063      	beq.n	80020fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002036:	4b4c      	ldr	r3, [pc, #304]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002042:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b08      	cmp	r3, #8
 800204c:	d11c      	bne.n	8002088 <HAL_RCC_OscConfig+0x18c>
 800204e:	4b46      	ldr	r3, [pc, #280]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d116      	bne.n	8002088 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205a:	4b43      	ldr	r3, [pc, #268]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_RCC_OscConfig+0x176>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d001      	beq.n	8002072 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e1c0      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	4b3d      	ldr	r3, [pc, #244]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4939      	ldr	r1, [pc, #228]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002086:	e03a      	b.n	80020fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002090:	4b36      	ldr	r3, [pc, #216]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff fc6d 	bl	8001974 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209e:	f7ff fc69 	bl	8001974 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e1a1      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4927      	ldr	r1, [pc, #156]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]
 80020d0:	e015      	b.n	80020fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d2:	4b26      	ldr	r3, [pc, #152]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fc4c 	bl	8001974 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e0:	f7ff fc48 	bl	8001974 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e180      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d03a      	beq.n	8002180 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d019      	beq.n	8002146 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002112:	4b17      	ldr	r3, [pc, #92]	@ (8002170 <HAL_RCC_OscConfig+0x274>)
 8002114:	2201      	movs	r2, #1
 8002116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002118:	f7ff fc2c 	bl	8001974 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002120:	f7ff fc28 	bl	8001974 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e160      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002132:	4b0d      	ldr	r3, [pc, #52]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800213e:	2001      	movs	r0, #1
 8002140:	f000 fa9c 	bl	800267c <RCC_Delay>
 8002144:	e01c      	b.n	8002180 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002146:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <HAL_RCC_OscConfig+0x274>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214c:	f7ff fc12 	bl	8001974 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002152:	e00f      	b.n	8002174 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002154:	f7ff fc0e 	bl	8001974 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d908      	bls.n	8002174 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e146      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	42420000 	.word	0x42420000
 8002170:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002174:	4b92      	ldr	r3, [pc, #584]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1e9      	bne.n	8002154 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80a6 	beq.w	80022da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002192:	4b8b      	ldr	r3, [pc, #556]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10d      	bne.n	80021ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	4b88      	ldr	r3, [pc, #544]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4a87      	ldr	r2, [pc, #540]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a8:	61d3      	str	r3, [r2, #28]
 80021aa:	4b85      	ldr	r3, [pc, #532]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b6:	2301      	movs	r3, #1
 80021b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ba:	4b82      	ldr	r3, [pc, #520]	@ (80023c4 <HAL_RCC_OscConfig+0x4c8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d118      	bne.n	80021f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c6:	4b7f      	ldr	r3, [pc, #508]	@ (80023c4 <HAL_RCC_OscConfig+0x4c8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7e      	ldr	r2, [pc, #504]	@ (80023c4 <HAL_RCC_OscConfig+0x4c8>)
 80021cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d2:	f7ff fbcf 	bl	8001974 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021da:	f7ff fbcb 	bl	8001974 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b64      	cmp	r3, #100	@ 0x64
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e103      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ec:	4b75      	ldr	r3, [pc, #468]	@ (80023c4 <HAL_RCC_OscConfig+0x4c8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x312>
 8002200:	4b6f      	ldr	r3, [pc, #444]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	4a6e      	ldr	r2, [pc, #440]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6213      	str	r3, [r2, #32]
 800220c:	e02d      	b.n	800226a <HAL_RCC_OscConfig+0x36e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0x334>
 8002216:	4b6a      	ldr	r3, [pc, #424]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4a69      	ldr	r2, [pc, #420]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6213      	str	r3, [r2, #32]
 8002222:	4b67      	ldr	r3, [pc, #412]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4a66      	ldr	r2, [pc, #408]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	f023 0304 	bic.w	r3, r3, #4
 800222c:	6213      	str	r3, [r2, #32]
 800222e:	e01c      	b.n	800226a <HAL_RCC_OscConfig+0x36e>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b05      	cmp	r3, #5
 8002236:	d10c      	bne.n	8002252 <HAL_RCC_OscConfig+0x356>
 8002238:	4b61      	ldr	r3, [pc, #388]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4a60      	ldr	r2, [pc, #384]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	6213      	str	r3, [r2, #32]
 8002244:	4b5e      	ldr	r3, [pc, #376]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a5d      	ldr	r2, [pc, #372]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6213      	str	r3, [r2, #32]
 8002250:	e00b      	b.n	800226a <HAL_RCC_OscConfig+0x36e>
 8002252:	4b5b      	ldr	r3, [pc, #364]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a5a      	ldr	r2, [pc, #360]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	f023 0301 	bic.w	r3, r3, #1
 800225c:	6213      	str	r3, [r2, #32]
 800225e:	4b58      	ldr	r3, [pc, #352]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4a57      	ldr	r2, [pc, #348]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	f023 0304 	bic.w	r3, r3, #4
 8002268:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d015      	beq.n	800229e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002272:	f7ff fb7f 	bl	8001974 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7ff fb7b 	bl	8001974 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e0b1      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002290:	4b4b      	ldr	r3, [pc, #300]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0ee      	beq.n	800227a <HAL_RCC_OscConfig+0x37e>
 800229c:	e014      	b.n	80022c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229e:	f7ff fb69 	bl	8001974 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7ff fb65 	bl	8001974 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e09b      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022bc:	4b40      	ldr	r3, [pc, #256]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1ee      	bne.n	80022a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022c8:	7dfb      	ldrb	r3, [r7, #23]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d105      	bne.n	80022da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ce:	4b3c      	ldr	r3, [pc, #240]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	4a3b      	ldr	r2, [pc, #236]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 8087 	beq.w	80023f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e4:	4b36      	ldr	r3, [pc, #216]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d061      	beq.n	80023b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d146      	bne.n	8002386 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f8:	4b33      	ldr	r3, [pc, #204]	@ (80023c8 <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7ff fb39 	bl	8001974 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002306:	f7ff fb35 	bl	8001974 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e06d      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002318:	4b29      	ldr	r3, [pc, #164]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f0      	bne.n	8002306 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800232c:	d108      	bne.n	8002340 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800232e:	4b24      	ldr	r3, [pc, #144]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4921      	ldr	r1, [pc, #132]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002340:	4b1f      	ldr	r3, [pc, #124]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a19      	ldr	r1, [r3, #32]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	430b      	orrs	r3, r1
 8002352:	491b      	ldr	r1, [pc, #108]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002358:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <HAL_RCC_OscConfig+0x4cc>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7ff fb09 	bl	8001974 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002366:	f7ff fb05 	bl	8001974 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e03d      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002378:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x46a>
 8002384:	e035      	b.n	80023f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002386:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <HAL_RCC_OscConfig+0x4cc>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff faf2 	bl	8001974 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7ff faee 	bl	8001974 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e026      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x498>
 80023b2:	e01e      	b.n	80023f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e019      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40007000 	.word	0x40007000
 80023c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_RCC_OscConfig+0x500>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d001      	beq.n	80023f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0d0      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002414:	4b6a      	ldr	r3, [pc, #424]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d910      	bls.n	8002444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b67      	ldr	r3, [pc, #412]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 0207 	bic.w	r2, r3, #7
 800242a:	4965      	ldr	r1, [pc, #404]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b63      	ldr	r3, [pc, #396]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0b8      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800245c:	4b59      	ldr	r3, [pc, #356]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a58      	ldr	r2, [pc, #352]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002466:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002474:	4b53      	ldr	r3, [pc, #332]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a52      	ldr	r2, [pc, #328]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800247e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b50      	ldr	r3, [pc, #320]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	494d      	ldr	r1, [pc, #308]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d040      	beq.n	8002520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b47      	ldr	r3, [pc, #284]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d115      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e07f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024be:	4b41      	ldr	r3, [pc, #260]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e073      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ce:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e06b      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024de:	4b39      	ldr	r3, [pc, #228]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f023 0203 	bic.w	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4936      	ldr	r1, [pc, #216]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f0:	f7ff fa40 	bl	8001974 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	e00a      	b.n	800250e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f8:	f7ff fa3c 	bl	8001974 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e053      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	4b2d      	ldr	r3, [pc, #180]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 020c 	and.w	r2, r3, #12
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	429a      	cmp	r2, r3
 800251e:	d1eb      	bne.n	80024f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002520:	4b27      	ldr	r3, [pc, #156]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d210      	bcs.n	8002550 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b24      	ldr	r3, [pc, #144]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0207 	bic.w	r2, r3, #7
 8002536:	4922      	ldr	r1, [pc, #136]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e032      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255c:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4916      	ldr	r1, [pc, #88]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800257a:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	490e      	ldr	r1, [pc, #56]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800258e:	f000 f821 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 8002592:	4602      	mov	r2, r0
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	490a      	ldr	r1, [pc, #40]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80025a0:	5ccb      	ldrb	r3, [r1, r3]
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	4a09      	ldr	r2, [pc, #36]	@ (80025cc <HAL_RCC_ClockConfig+0x1cc>)
 80025a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025aa:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <HAL_RCC_ClockConfig+0x1d0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f99e 	bl	80018f0 <HAL_InitTick>

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40022000 	.word	0x40022000
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08002ee0 	.word	0x08002ee0
 80025cc:	2000007c 	.word	0x2000007c
 80025d0:	20000080 	.word	0x20000080

080025d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x94>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d002      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0x30>
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d003      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0x36>
 8002602:	e027      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002604:	4b19      	ldr	r3, [pc, #100]	@ (800266c <HAL_RCC_GetSysClockFreq+0x98>)
 8002606:	613b      	str	r3, [r7, #16]
      break;
 8002608:	e027      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	0c9b      	lsrs	r3, r3, #18
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	4a17      	ldr	r2, [pc, #92]	@ (8002670 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002614:	5cd3      	ldrb	r3, [r2, r3]
 8002616:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d010      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002622:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x94>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	0c5b      	lsrs	r3, r3, #17
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	4a11      	ldr	r2, [pc, #68]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xa0>)
 800262e:	5cd3      	ldrb	r3, [r2, r3]
 8002630:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a0d      	ldr	r2, [pc, #52]	@ (800266c <HAL_RCC_GetSysClockFreq+0x98>)
 8002636:	fb03 f202 	mul.w	r2, r3, r2
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	e004      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a0c      	ldr	r2, [pc, #48]	@ (8002678 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002648:	fb02 f303 	mul.w	r3, r2, r3
 800264c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	613b      	str	r3, [r7, #16]
      break;
 8002652:	e002      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_RCC_GetSysClockFreq+0x98>)
 8002656:	613b      	str	r3, [r7, #16]
      break;
 8002658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800265a:	693b      	ldr	r3, [r7, #16]
}
 800265c:	4618      	mov	r0, r3
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	007a1200 	.word	0x007a1200
 8002670:	08002ef0 	.word	0x08002ef0
 8002674:	08002f00 	.word	0x08002f00
 8002678:	003d0900 	.word	0x003d0900

0800267c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002684:	4b0a      	ldr	r3, [pc, #40]	@ (80026b0 <RCC_Delay+0x34>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0a      	ldr	r2, [pc, #40]	@ (80026b4 <RCC_Delay+0x38>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0a5b      	lsrs	r3, r3, #9
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002698:	bf00      	nop
  }
  while (Delay --);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1e5a      	subs	r2, r3, #1
 800269e:	60fa      	str	r2, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f9      	bne.n	8002698 <RCC_Delay+0x1c>
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	2000007c 	.word	0x2000007c
 80026b4:	10624dd3 	.word	0x10624dd3

080026b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e041      	b.n	800274e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe ff92 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f000 fa56 	bl	8002ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d001      	beq.n	8002770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e035      	b.n	80027dc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a16      	ldr	r2, [pc, #88]	@ (80027e8 <HAL_TIM_Base_Start_IT+0x90>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d009      	beq.n	80027a6 <HAL_TIM_Base_Start_IT+0x4e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800279a:	d004      	beq.n	80027a6 <HAL_TIM_Base_Start_IT+0x4e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a12      	ldr	r2, [pc, #72]	@ (80027ec <HAL_TIM_Base_Start_IT+0x94>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d111      	bne.n	80027ca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b06      	cmp	r3, #6
 80027b6:	d010      	beq.n	80027da <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c8:	e007      	b.n	80027da <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0201 	orr.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40000400 	.word	0x40000400

080027f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d020      	beq.n	8002854 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01b      	beq.n	8002854 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0202 	mvn.w	r2, #2
 8002824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f998 	bl	8002b70 <HAL_TIM_IC_CaptureCallback>
 8002840:	e005      	b.n	800284e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f98b 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f99a 	bl	8002b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d020      	beq.n	80028a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01b      	beq.n	80028a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0204 	mvn.w	r2, #4
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f972 	bl	8002b70 <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f965 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f974 	bl	8002b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d020      	beq.n	80028ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0208 	mvn.w	r2, #8
 80028bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2204      	movs	r2, #4
 80028c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f94c 	bl	8002b70 <HAL_TIM_IC_CaptureCallback>
 80028d8:	e005      	b.n	80028e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f93f 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f94e 	bl	8002b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d020      	beq.n	8002938 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0210 	mvn.w	r2, #16
 8002908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2208      	movs	r2, #8
 800290e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f926 	bl	8002b70 <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f919 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f928 	bl	8002b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00c      	beq.n	800295c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0201 	mvn.w	r2, #1
 8002954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fd ff5e 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00c      	beq.n	8002980 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa6f 	bl	8002e5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00c      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800299c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f8f8 	bl	8002b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d007      	beq.n	80029c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0220 	mvn.w	r2, #32
 80029c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fa42 	bl	8002e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_TIM_ConfigClockSource+0x1c>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e0b4      	b.n	8002b56 <HAL_TIM_ConfigClockSource+0x186>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a24:	d03e      	beq.n	8002aa4 <HAL_TIM_ConfigClockSource+0xd4>
 8002a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a2a:	f200 8087 	bhi.w	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a32:	f000 8086 	beq.w	8002b42 <HAL_TIM_ConfigClockSource+0x172>
 8002a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a3a:	d87f      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a3c:	2b70      	cmp	r3, #112	@ 0x70
 8002a3e:	d01a      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0xa6>
 8002a40:	2b70      	cmp	r3, #112	@ 0x70
 8002a42:	d87b      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a44:	2b60      	cmp	r3, #96	@ 0x60
 8002a46:	d050      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0x11a>
 8002a48:	2b60      	cmp	r3, #96	@ 0x60
 8002a4a:	d877      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a4c:	2b50      	cmp	r3, #80	@ 0x50
 8002a4e:	d03c      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0xfa>
 8002a50:	2b50      	cmp	r3, #80	@ 0x50
 8002a52:	d873      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a54:	2b40      	cmp	r3, #64	@ 0x40
 8002a56:	d058      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x13a>
 8002a58:	2b40      	cmp	r3, #64	@ 0x40
 8002a5a:	d86f      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a5c:	2b30      	cmp	r3, #48	@ 0x30
 8002a5e:	d064      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15a>
 8002a60:	2b30      	cmp	r3, #48	@ 0x30
 8002a62:	d86b      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d060      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15a>
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d867      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d05c      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15a>
 8002a70:	2b10      	cmp	r3, #16
 8002a72:	d05a      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15a>
 8002a74:	e062      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a86:	f000 f96a 	bl	8002d5e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	609a      	str	r2, [r3, #8]
      break;
 8002aa2:	e04f      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ab4:	f000 f953 	bl	8002d5e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ac6:	609a      	str	r2, [r3, #8]
      break;
 8002ac8:	e03c      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f000 f8ca 	bl	8002c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2150      	movs	r1, #80	@ 0x50
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f921 	bl	8002d2a <TIM_ITRx_SetConfig>
      break;
 8002ae8:	e02c      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af6:	461a      	mov	r2, r3
 8002af8:	f000 f8e8 	bl	8002ccc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2160      	movs	r1, #96	@ 0x60
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f911 	bl	8002d2a <TIM_ITRx_SetConfig>
      break;
 8002b08:	e01c      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	461a      	mov	r2, r3
 8002b18:	f000 f8aa 	bl	8002c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2140      	movs	r1, #64	@ 0x40
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f901 	bl	8002d2a <TIM_ITRx_SetConfig>
      break;
 8002b28:	e00c      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f000 f8f8 	bl	8002d2a <TIM_ITRx_SetConfig>
      break;
 8002b3a:	e003      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b40:	e000      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
	...

08002ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a2b      	ldr	r2, [pc, #172]	@ (8002c68 <TIM_Base_SetConfig+0xc0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d007      	beq.n	8002bd0 <TIM_Base_SetConfig+0x28>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc6:	d003      	beq.n	8002bd0 <TIM_Base_SetConfig+0x28>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a28      	ldr	r2, [pc, #160]	@ (8002c6c <TIM_Base_SetConfig+0xc4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d108      	bne.n	8002be2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a20      	ldr	r2, [pc, #128]	@ (8002c68 <TIM_Base_SetConfig+0xc0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <TIM_Base_SetConfig+0x52>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf0:	d003      	beq.n	8002bfa <TIM_Base_SetConfig+0x52>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c6c <TIM_Base_SetConfig+0xc4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d108      	bne.n	8002c0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a0d      	ldr	r2, [pc, #52]	@ (8002c68 <TIM_Base_SetConfig+0xc0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d103      	bne.n	8002c40 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f023 0201 	bic.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	611a      	str	r2, [r3, #16]
  }
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40000400 	.word	0x40000400

08002c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f023 0201 	bic.w	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f023 030a 	bic.w	r3, r3, #10
 8002cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	621a      	str	r2, [r3, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f023 0210 	bic.w	r2, r3, #16
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	031b      	lsls	r3, r3, #12
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	621a      	str	r2, [r3, #32]
}
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f043 0307 	orr.w	r3, r3, #7
 8002d4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	609a      	str	r2, [r3, #8]
}
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b087      	sub	sp, #28
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	021a      	lsls	r2, r3, #8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	609a      	str	r2, [r3, #8]
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e041      	b.n	8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a14      	ldr	r2, [pc, #80]	@ (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d009      	beq.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e00:	d004      	beq.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a10      	ldr	r2, [pc, #64]	@ (8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d10c      	bne.n	8002e26 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	40000400 	.word	0x40000400

08002e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <memset>:
 8002e70:	4603      	mov	r3, r0
 8002e72:	4402      	add	r2, r0
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d100      	bne.n	8002e7a <memset+0xa>
 8002e78:	4770      	bx	lr
 8002e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e7e:	e7f9      	b.n	8002e74 <memset+0x4>

08002e80 <__libc_init_array>:
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	2600      	movs	r6, #0
 8002e84:	4d0c      	ldr	r5, [pc, #48]	@ (8002eb8 <__libc_init_array+0x38>)
 8002e86:	4c0d      	ldr	r4, [pc, #52]	@ (8002ebc <__libc_init_array+0x3c>)
 8002e88:	1b64      	subs	r4, r4, r5
 8002e8a:	10a4      	asrs	r4, r4, #2
 8002e8c:	42a6      	cmp	r6, r4
 8002e8e:	d109      	bne.n	8002ea4 <__libc_init_array+0x24>
 8002e90:	f000 f81a 	bl	8002ec8 <_init>
 8002e94:	2600      	movs	r6, #0
 8002e96:	4d0a      	ldr	r5, [pc, #40]	@ (8002ec0 <__libc_init_array+0x40>)
 8002e98:	4c0a      	ldr	r4, [pc, #40]	@ (8002ec4 <__libc_init_array+0x44>)
 8002e9a:	1b64      	subs	r4, r4, r5
 8002e9c:	10a4      	asrs	r4, r4, #2
 8002e9e:	42a6      	cmp	r6, r4
 8002ea0:	d105      	bne.n	8002eae <__libc_init_array+0x2e>
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea8:	4798      	blx	r3
 8002eaa:	3601      	adds	r6, #1
 8002eac:	e7ee      	b.n	8002e8c <__libc_init_array+0xc>
 8002eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb2:	4798      	blx	r3
 8002eb4:	3601      	adds	r6, #1
 8002eb6:	e7f2      	b.n	8002e9e <__libc_init_array+0x1e>
 8002eb8:	08002f04 	.word	0x08002f04
 8002ebc:	08002f04 	.word	0x08002f04
 8002ec0:	08002f04 	.word	0x08002f04
 8002ec4:	08002f08 	.word	0x08002f08

08002ec8 <_init>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	bf00      	nop
 8002ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ece:	bc08      	pop	{r3}
 8002ed0:	469e      	mov	lr, r3
 8002ed2:	4770      	bx	lr

08002ed4 <_fini>:
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	bf00      	nop
 8002ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eda:	bc08      	pop	{r3}
 8002edc:	469e      	mov	lr, r3
 8002ede:	4770      	bx	lr
