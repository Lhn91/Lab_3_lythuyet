
Button_traffic_FSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028d8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080029e4  080029e4  000039e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a08  08002a08  00004094  2**0
                  CONTENTS
  4 .ARM          00000000  08002a08  08002a08  00004094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a08  08002a08  00004094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a08  08002a08  00003a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a0c  08002a0c  00003a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08002a10  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000094  08002aa4  00004094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08002aa4  00004160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000842b  00000000  00000000  000040bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc1  00000000  00000000  0000c4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0000e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007bd  00000000  00000000  0000eae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eac  00000000  00000000  0000f29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7fa  00000000  00000000  00026149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008244c  00000000  00000000  00032943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4d8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002800  00000000  00000000  000b4dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b75d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	080029cc 	.word	0x080029cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	080029cc 	.word	0x080029cc

0800014c <automatic_run>:
int i = 0;
int j = 0;
void init_automatic(){

}
void automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status){
 8000150:	4b9e      	ldr	r3, [pc, #632]	@ (80003cc <automatic_run+0x280>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b04      	cmp	r3, #4
 8000158:	f200 811e 	bhi.w	8000398 <automatic_run+0x24c>
 800015c:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <automatic_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000179 	.word	0x08000179
 8000168:	08000191 	.word	0x08000191
 800016c:	0800021d 	.word	0x0800021d
 8000170:	0800029d 	.word	0x0800029d
 8000174:	0800031b 	.word	0x0800031b
	case INIT:
		if(1){
		status = GREEN_RED;
 8000178:	4b94      	ldr	r3, [pc, #592]	@ (80003cc <automatic_run+0x280>)
 800017a:	2202      	movs	r2, #2
 800017c:	601a      	str	r2, [r3, #0]
		setTimer(3000,0);
 800017e:	2100      	movs	r1, #0
 8000180:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000184:	f000 ff88 	bl	8001098 <setTimer>
		timer_flag[1] = 1;
 8000188:	4b91      	ldr	r3, [pc, #580]	@ (80003d0 <automatic_run+0x284>)
 800018a:	2201      	movs	r2, #1
 800018c:	605a      	str	r2, [r3, #4]
		}
	break;
 800018e:	e10c      	b.n	80003aa <automatic_run+0x25e>

	case GREEN_RED:
		traffic_green_red();
 8000190:	f001 f864 	bl	800125c <traffic_green_red>
		if(timer_flag[1] == 1){
 8000194:	4b8e      	ldr	r3, [pc, #568]	@ (80003d0 <automatic_run+0x284>)
 8000196:	685b      	ldr	r3, [r3, #4]
 8000198:	2b01      	cmp	r3, #1
 800019a:	d11e      	bne.n	80001da <automatic_run+0x8e>
			//update display (7seg)
			display7seg(arr1[i]);
 800019c:	4b8d      	ldr	r3, [pc, #564]	@ (80003d4 <automatic_run+0x288>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a8d      	ldr	r2, [pc, #564]	@ (80003d8 <automatic_run+0x28c>)
 80001a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 fc10 	bl	80009cc <display7seg>
			display7seg2(arr2[j]);
 80001ac:	4b8b      	ldr	r3, [pc, #556]	@ (80003dc <automatic_run+0x290>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a8b      	ldr	r2, [pc, #556]	@ (80003e0 <automatic_run+0x294>)
 80001b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001b6:	4618      	mov	r0, r3
 80001b8:	f000 fd96 	bl	8000ce8 <display7seg2>
			i++;
 80001bc:	4b85      	ldr	r3, [pc, #532]	@ (80003d4 <automatic_run+0x288>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	4a84      	ldr	r2, [pc, #528]	@ (80003d4 <automatic_run+0x288>)
 80001c4:	6013      	str	r3, [r2, #0]
			j++;
 80001c6:	4b85      	ldr	r3, [pc, #532]	@ (80003dc <automatic_run+0x290>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	3301      	adds	r3, #1
 80001cc:	4a83      	ldr	r2, [pc, #524]	@ (80003dc <automatic_run+0x290>)
 80001ce:	6013      	str	r3, [r2, #0]
			setTimer(1000,1);
 80001d0:	2101      	movs	r1, #1
 80001d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001d6:	f000 ff5f 	bl	8001098 <setTimer>
		}
		if(timer_flag[0] == 1){
 80001da:	4b7d      	ldr	r3, [pc, #500]	@ (80003d0 <automatic_run+0x284>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d107      	bne.n	80001f2 <automatic_run+0xa6>
			status = AMBER_RED;
 80001e2:	4b7a      	ldr	r3, [pc, #488]	@ (80003cc <automatic_run+0x280>)
 80001e4:	2203      	movs	r2, #3
 80001e6:	601a      	str	r2, [r3, #0]
			setTimer(2000,0);
 80001e8:	2100      	movs	r1, #0
 80001ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001ee:	f000 ff53 	bl	8001098 <setTimer>
		}
		if(isButtonPressed() == 1){
 80001f2:	f000 f8f7 	bl	80003e4 <isButtonPressed>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	f040 80cf 	bne.w	800039c <automatic_run+0x250>
			status = MAN_GREEN_RED;
 80001fe:	4b73      	ldr	r3, [pc, #460]	@ (80003cc <automatic_run+0x280>)
 8000200:	220c      	movs	r2, #12
 8000202:	601a      	str	r2, [r3, #0]
			display7seg(2);
 8000204:	2002      	movs	r0, #2
 8000206:	f000 fbe1 	bl	80009cc <display7seg>
			display7seg2(4);
 800020a:	2004      	movs	r0, #4
 800020c:	f000 fd6c 	bl	8000ce8 <display7seg2>
			setTimer(10000,1);
 8000210:	2101      	movs	r1, #1
 8000212:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000216:	f000 ff3f 	bl	8001098 <setTimer>
		}
		break;
 800021a:	e0bf      	b.n	800039c <automatic_run+0x250>

	case AMBER_RED:
			traffic_amber_red();
 800021c:	f001 f842 	bl	80012a4 <traffic_amber_red>
			if(timer_flag[1] == 1){
 8000220:	4b6b      	ldr	r3, [pc, #428]	@ (80003d0 <automatic_run+0x284>)
 8000222:	685b      	ldr	r3, [r3, #4]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d11e      	bne.n	8000266 <automatic_run+0x11a>
				//update display (7seg)
				display7seg(arr1[i]);
 8000228:	4b6a      	ldr	r3, [pc, #424]	@ (80003d4 <automatic_run+0x288>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a6a      	ldr	r2, [pc, #424]	@ (80003d8 <automatic_run+0x28c>)
 800022e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000232:	4618      	mov	r0, r3
 8000234:	f000 fbca 	bl	80009cc <display7seg>
			    display7seg2(arr2[j]);
 8000238:	4b68      	ldr	r3, [pc, #416]	@ (80003dc <automatic_run+0x290>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a68      	ldr	r2, [pc, #416]	@ (80003e0 <automatic_run+0x294>)
 800023e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fd50 	bl	8000ce8 <display7seg2>
				i++;
 8000248:	4b62      	ldr	r3, [pc, #392]	@ (80003d4 <automatic_run+0x288>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3301      	adds	r3, #1
 800024e:	4a61      	ldr	r2, [pc, #388]	@ (80003d4 <automatic_run+0x288>)
 8000250:	6013      	str	r3, [r2, #0]
				j++;
 8000252:	4b62      	ldr	r3, [pc, #392]	@ (80003dc <automatic_run+0x290>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3301      	adds	r3, #1
 8000258:	4a60      	ldr	r2, [pc, #384]	@ (80003dc <automatic_run+0x290>)
 800025a:	6013      	str	r3, [r2, #0]
				setTimer(1000,1);
 800025c:	2101      	movs	r1, #1
 800025e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000262:	f000 ff19 	bl	8001098 <setTimer>
			}
			if(timer_flag[0] == 1){
 8000266:	4b5a      	ldr	r3, [pc, #360]	@ (80003d0 <automatic_run+0x284>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b01      	cmp	r3, #1
 800026c:	d107      	bne.n	800027e <automatic_run+0x132>
				status = RED_GREEN;
 800026e:	4b57      	ldr	r3, [pc, #348]	@ (80003cc <automatic_run+0x280>)
 8000270:	2204      	movs	r2, #4
 8000272:	601a      	str	r2, [r3, #0]
				setTimer(3000,0);
 8000274:	2100      	movs	r1, #0
 8000276:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800027a:	f000 ff0d 	bl	8001098 <setTimer>
			}
			if(isButtonPressed() == 1){
 800027e:	f000 f8b1 	bl	80003e4 <isButtonPressed>
 8000282:	4603      	mov	r3, r0
 8000284:	2b01      	cmp	r3, #1
 8000286:	f040 808b 	bne.w	80003a0 <automatic_run+0x254>
				status = MAN_AMBER_RED;
 800028a:	4b50      	ldr	r3, [pc, #320]	@ (80003cc <automatic_run+0x280>)
 800028c:	220d      	movs	r2, #13
 800028e:	601a      	str	r2, [r3, #0]
				setTimer(10000,1);
 8000290:	2101      	movs	r1, #1
 8000292:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000296:	f000 feff 	bl	8001098 <setTimer>
			}
			break;
 800029a:	e081      	b.n	80003a0 <automatic_run+0x254>

	case RED_GREEN:

			traffic_red_green();
 800029c:	f001 f826 	bl	80012ec <traffic_red_green>
			if(timer_flag[1] == 1){
 80002a0:	4b4b      	ldr	r3, [pc, #300]	@ (80003d0 <automatic_run+0x284>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d11e      	bne.n	80002e6 <automatic_run+0x19a>
				//update display (7seg)
				display7seg(arr1[i]);
 80002a8:	4b4a      	ldr	r3, [pc, #296]	@ (80003d4 <automatic_run+0x288>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a4a      	ldr	r2, [pc, #296]	@ (80003d8 <automatic_run+0x28c>)
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fb8a 	bl	80009cc <display7seg>
				display7seg2(arr2[j]);
 80002b8:	4b48      	ldr	r3, [pc, #288]	@ (80003dc <automatic_run+0x290>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a48      	ldr	r2, [pc, #288]	@ (80003e0 <automatic_run+0x294>)
 80002be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fd10 	bl	8000ce8 <display7seg2>
			    i++;
 80002c8:	4b42      	ldr	r3, [pc, #264]	@ (80003d4 <automatic_run+0x288>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	4a41      	ldr	r2, [pc, #260]	@ (80003d4 <automatic_run+0x288>)
 80002d0:	6013      	str	r3, [r2, #0]
				j++;
 80002d2:	4b42      	ldr	r3, [pc, #264]	@ (80003dc <automatic_run+0x290>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	3301      	adds	r3, #1
 80002d8:	4a40      	ldr	r2, [pc, #256]	@ (80003dc <automatic_run+0x290>)
 80002da:	6013      	str	r3, [r2, #0]
				setTimer(1000,1);
 80002dc:	2101      	movs	r1, #1
 80002de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002e2:	f000 fed9 	bl	8001098 <setTimer>
			}
			if(timer_flag[0] == 1){
 80002e6:	4b3a      	ldr	r3, [pc, #232]	@ (80003d0 <automatic_run+0x284>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d107      	bne.n	80002fe <automatic_run+0x1b2>
				status = RED_AMBER;
 80002ee:	4b37      	ldr	r3, [pc, #220]	@ (80003cc <automatic_run+0x280>)
 80002f0:	2205      	movs	r2, #5
 80002f2:	601a      	str	r2, [r3, #0]
				setTimer(2000,0);
 80002f4:	2100      	movs	r1, #0
 80002f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002fa:	f000 fecd 	bl	8001098 <setTimer>
			}
			if(isButtonPressed() == 1){
 80002fe:	f000 f871 	bl	80003e4 <isButtonPressed>
 8000302:	4603      	mov	r3, r0
 8000304:	2b01      	cmp	r3, #1
 8000306:	d14d      	bne.n	80003a4 <automatic_run+0x258>
				status = MAN_RED_GREEN;
 8000308:	4b30      	ldr	r3, [pc, #192]	@ (80003cc <automatic_run+0x280>)
 800030a:	220e      	movs	r2, #14
 800030c:	601a      	str	r2, [r3, #0]
				setTimer(10000,1);
 800030e:	2101      	movs	r1, #1
 8000310:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000314:	f000 fec0 	bl	8001098 <setTimer>
			}
			break;
 8000318:	e044      	b.n	80003a4 <automatic_run+0x258>

	case RED_AMBER:
			traffic_red_amber();
 800031a:	f001 f80b 	bl	8001334 <traffic_red_amber>
			if(timer_flag[1] == 1){
 800031e:	4b2c      	ldr	r3, [pc, #176]	@ (80003d0 <automatic_run+0x284>)
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d11e      	bne.n	8000364 <automatic_run+0x218>
				//update display (7seg)
				display7seg(arr1[i]);
 8000326:	4b2b      	ldr	r3, [pc, #172]	@ (80003d4 <automatic_run+0x288>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a2b      	ldr	r2, [pc, #172]	@ (80003d8 <automatic_run+0x28c>)
 800032c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fb4b 	bl	80009cc <display7seg>
							display7seg2(arr2[j]);
 8000336:	4b29      	ldr	r3, [pc, #164]	@ (80003dc <automatic_run+0x290>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a29      	ldr	r2, [pc, #164]	@ (80003e0 <automatic_run+0x294>)
 800033c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fcd1 	bl	8000ce8 <display7seg2>
							i++;
 8000346:	4b23      	ldr	r3, [pc, #140]	@ (80003d4 <automatic_run+0x288>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3301      	adds	r3, #1
 800034c:	4a21      	ldr	r2, [pc, #132]	@ (80003d4 <automatic_run+0x288>)
 800034e:	6013      	str	r3, [r2, #0]
							j++;
 8000350:	4b22      	ldr	r3, [pc, #136]	@ (80003dc <automatic_run+0x290>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	3301      	adds	r3, #1
 8000356:	4a21      	ldr	r2, [pc, #132]	@ (80003dc <automatic_run+0x290>)
 8000358:	6013      	str	r3, [r2, #0]
				setTimer(1000,1);
 800035a:	2101      	movs	r1, #1
 800035c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000360:	f000 fe9a 	bl	8001098 <setTimer>
			}
			if(timer_flag[0] == 1){
 8000364:	4b1a      	ldr	r3, [pc, #104]	@ (80003d0 <automatic_run+0x284>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d107      	bne.n	800037c <automatic_run+0x230>
				status = GREEN_RED;
 800036c:	4b17      	ldr	r3, [pc, #92]	@ (80003cc <automatic_run+0x280>)
 800036e:	2202      	movs	r2, #2
 8000370:	601a      	str	r2, [r3, #0]
				setTimer(3000,0);
 8000372:	2100      	movs	r1, #0
 8000374:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000378:	f000 fe8e 	bl	8001098 <setTimer>
			}
			if(isButtonPressed() == 1){
 800037c:	f000 f832 	bl	80003e4 <isButtonPressed>
 8000380:	4603      	mov	r3, r0
 8000382:	2b01      	cmp	r3, #1
 8000384:	d110      	bne.n	80003a8 <automatic_run+0x25c>
				status = MAN_RED_AMBER;
 8000386:	4b11      	ldr	r3, [pc, #68]	@ (80003cc <automatic_run+0x280>)
 8000388:	220f      	movs	r2, #15
 800038a:	601a      	str	r2, [r3, #0]
				setTimer(10000,1);
 800038c:	2101      	movs	r1, #1
 800038e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000392:	f000 fe81 	bl	8001098 <setTimer>
			}
			break;
 8000396:	e007      	b.n	80003a8 <automatic_run+0x25c>


	default:
		break;
 8000398:	bf00      	nop
 800039a:	e006      	b.n	80003aa <automatic_run+0x25e>
		break;
 800039c:	bf00      	nop
 800039e:	e004      	b.n	80003aa <automatic_run+0x25e>
			break;
 80003a0:	bf00      	nop
 80003a2:	e002      	b.n	80003aa <automatic_run+0x25e>
			break;
 80003a4:	bf00      	nop
 80003a6:	e000      	b.n	80003aa <automatic_run+0x25e>
			break;
 80003a8:	bf00      	nop
	}

	if( i == 10 || j == 10){
 80003aa:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <automatic_run+0x288>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b0a      	cmp	r3, #10
 80003b0:	d003      	beq.n	80003ba <automatic_run+0x26e>
 80003b2:	4b0a      	ldr	r3, [pc, #40]	@ (80003dc <automatic_run+0x290>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2b0a      	cmp	r3, #10
 80003b8:	d105      	bne.n	80003c6 <automatic_run+0x27a>
		i=0;
 80003ba:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <automatic_run+0x288>)
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
		j=0;
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <automatic_run+0x290>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
	}
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000000 	.word	0x20000000
 80003d0:	20000134 	.word	0x20000134
 80003d4:	200000b0 	.word	0x200000b0
 80003d8:	20000004 	.word	0x20000004
 80003dc:	200000b4 	.word	0x200000b4
 80003e0:	2000002c 	.word	0x2000002c

080003e4 <isButtonPressed>:
int keyReg1[3] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int keyReg2[3] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int keyReg3[3] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int TimerForKeyPressed = 200; //nhan de 2s moi xu li

int isButtonPressed(){
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
	for(int i = 0; i<3; i++){
 80003ea:	2300      	movs	r3, #0
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	e00f      	b.n	8000410 <isButtonPressed+0x2c>
		if(button_flag[i] == 1){
 80003f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000424 <isButtonPressed+0x40>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d106      	bne.n	800040a <isButtonPressed+0x26>
			button_flag[i] = 0;
 80003fc:	4a09      	ldr	r2, [pc, #36]	@ (8000424 <isButtonPressed+0x40>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2100      	movs	r1, #0
 8000402:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000406:	2301      	movs	r3, #1
 8000408:	e006      	b.n	8000418 <isButtonPressed+0x34>
	for(int i = 0; i<3; i++){
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	3301      	adds	r3, #1
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2b02      	cmp	r3, #2
 8000414:	ddec      	ble.n	80003f0 <isButtonPressed+0xc>
		}
	}
		return 0;
 8000416:	2300      	movs	r3, #0
}
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	200000b8 	.word	0x200000b8

08000428 <subKeyProcess>:
void subKeyProcess(int i){
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000430:	4a04      	ldr	r2, [pc, #16]	@ (8000444 <subKeyProcess+0x1c>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2101      	movs	r1, #1
 8000436:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	200000b8 	.word	0x200000b8

08000448 <getKeyInput>:
void getKeyInput(){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
	for(int i = 0; i<3;i++){
 800044e:	2300      	movs	r3, #0
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	e085      	b.n	8000560 <getKeyInput+0x118>
 keyReg0[i] = keyReg1[i];
 8000454:	4a47      	ldr	r2, [pc, #284]	@ (8000574 <getKeyInput+0x12c>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800045c:	4946      	ldr	r1, [pc, #280]	@ (8000578 <getKeyInput+0x130>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 keyReg1[i] = keyReg2[i];
 8000464:	4a45      	ldr	r2, [pc, #276]	@ (800057c <getKeyInput+0x134>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800046c:	4941      	ldr	r1, [pc, #260]	@ (8000574 <getKeyInput+0x12c>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 switch (i){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b02      	cmp	r3, #2
 8000478:	d01d      	beq.n	80004b6 <getKeyInput+0x6e>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	2b02      	cmp	r3, #2
 800047e:	dc24      	bgt.n	80004ca <getKeyInput+0x82>
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d003      	beq.n	800048e <getKeyInput+0x46>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d00a      	beq.n	80004a2 <getKeyInput+0x5a>
 800048c:	e01d      	b.n	80004ca <getKeyInput+0x82>
	 case 0: keyReg2[0] = HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 800048e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000492:	483b      	ldr	r0, [pc, #236]	@ (8000580 <getKeyInput+0x138>)
 8000494:	f001 fa84 	bl	80019a0 <HAL_GPIO_ReadPin>
 8000498:	4603      	mov	r3, r0
 800049a:	461a      	mov	r2, r3
 800049c:	4b37      	ldr	r3, [pc, #220]	@ (800057c <getKeyInput+0x134>)
 800049e:	601a      	str	r2, [r3, #0]
		 break;
 80004a0:	e013      	b.n	80004ca <getKeyInput+0x82>
	 case 1: keyReg2[1] = HAL_GPIO_ReadPin(b1_GPIO_Port,b1_Pin);
 80004a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004a6:	4837      	ldr	r0, [pc, #220]	@ (8000584 <getKeyInput+0x13c>)
 80004a8:	f001 fa7a 	bl	80019a0 <HAL_GPIO_ReadPin>
 80004ac:	4603      	mov	r3, r0
 80004ae:	461a      	mov	r2, r3
 80004b0:	4b32      	ldr	r3, [pc, #200]	@ (800057c <getKeyInput+0x134>)
 80004b2:	605a      	str	r2, [r3, #4]
		 break;
 80004b4:	e009      	b.n	80004ca <getKeyInput+0x82>
	 case 2: keyReg2[2] = HAL_GPIO_ReadPin(b2_GPIO_Port, b2_Pin);
 80004b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004ba:	4832      	ldr	r0, [pc, #200]	@ (8000584 <getKeyInput+0x13c>)
 80004bc:	f001 fa70 	bl	80019a0 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	461a      	mov	r2, r3
 80004c4:	4b2d      	ldr	r3, [pc, #180]	@ (800057c <getKeyInput+0x134>)
 80004c6:	609a      	str	r2, [r3, #8]
		 break;
 80004c8:	bf00      	nop
 }
 if((keyReg0[i] == keyReg1[i])&&(keyReg1[i] == keyReg2[i])){
 80004ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000578 <getKeyInput+0x130>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004d2:	4928      	ldr	r1, [pc, #160]	@ (8000574 <getKeyInput+0x12c>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004da:	429a      	cmp	r2, r3
 80004dc:	d13d      	bne.n	800055a <getKeyInput+0x112>
 80004de:	4a25      	ldr	r2, [pc, #148]	@ (8000574 <getKeyInput+0x12c>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004e6:	4925      	ldr	r1, [pc, #148]	@ (800057c <getKeyInput+0x134>)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d133      	bne.n	800055a <getKeyInput+0x112>
	 if(keyReg3[i] != keyReg2[i]){
 80004f2:	4a25      	ldr	r2, [pc, #148]	@ (8000588 <getKeyInput+0x140>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004fa:	4920      	ldr	r1, [pc, #128]	@ (800057c <getKeyInput+0x134>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000502:	429a      	cmp	r2, r3
 8000504:	d014      	beq.n	8000530 <getKeyInput+0xe8>
		 keyReg3[i] = keyReg2[i];
 8000506:	4a1d      	ldr	r2, [pc, #116]	@ (800057c <getKeyInput+0x134>)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800050e:	491e      	ldr	r1, [pc, #120]	@ (8000588 <getKeyInput+0x140>)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 if(keyReg2[i] == PRESSED_STATE){
 8000516:	4a19      	ldr	r2, [pc, #100]	@ (800057c <getKeyInput+0x134>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d11b      	bne.n	800055a <getKeyInput+0x112>
			 //TODO
			 subKeyProcess(i);
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff ff80 	bl	8000428 <subKeyProcess>
			 TimerForKeyPressed = 200;
 8000528:	4b18      	ldr	r3, [pc, #96]	@ (800058c <getKeyInput+0x144>)
 800052a:	22c8      	movs	r2, #200	@ 0xc8
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	e014      	b.n	800055a <getKeyInput+0x112>
		 }
	 }else{
		 TimerForKeyPressed--;
 8000530:	4b16      	ldr	r3, [pc, #88]	@ (800058c <getKeyInput+0x144>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3b01      	subs	r3, #1
 8000536:	4a15      	ldr	r2, [pc, #84]	@ (800058c <getKeyInput+0x144>)
 8000538:	6013      	str	r3, [r2, #0]
		 if(TimerForKeyPressed == 0){
 800053a:	4b14      	ldr	r3, [pc, #80]	@ (800058c <getKeyInput+0x144>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d10b      	bne.n	800055a <getKeyInput+0x112>
			 //TODO
			if(keyReg2[i] == PRESSED_STATE){
 8000542:	4a0e      	ldr	r2, [pc, #56]	@ (800057c <getKeyInput+0x134>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d102      	bne.n	8000554 <getKeyInput+0x10c>
			 subKeyProcess(i);
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f7ff ff6a 	bl	8000428 <subKeyProcess>
			}
			 TimerForKeyPressed = 200;
 8000554:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <getKeyInput+0x144>)
 8000556:	22c8      	movs	r2, #200	@ 0xc8
 8000558:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<3;i++){
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3301      	adds	r3, #1
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b02      	cmp	r3, #2
 8000564:	f77f af76 	ble.w	8000454 <getKeyInput+0xc>
		 }
	 }
 }
	}
}
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000060 	.word	0x20000060
 8000578:	20000054 	.word	0x20000054
 800057c:	2000006c 	.word	0x2000006c
 8000580:	40011000 	.word	0x40011000
 8000584:	40010c00 	.word	0x40010c00
 8000588:	20000078 	.word	0x20000078
 800058c:	20000084 	.word	0x20000084

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 ff18 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f810 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f896 	bl	80006cc <MX_GPIO_Init>
  MX_TIM2_Init();
 80005a0:	f000 f848 	bl	8000634 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 80005a4:	4804      	ldr	r0, [pc, #16]	@ (80005b8 <main+0x28>)
 80005a6:	f001 fe59 	bl	800225c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  automatic_run();
 80005aa:	f7ff fdcf 	bl	800014c <automatic_run>
	  manual_run();
 80005ae:	f000 f91b 	bl	80007e8 <manual_run>
	  automatic_run();
 80005b2:	bf00      	nop
 80005b4:	e7f9      	b.n	80005aa <main+0x1a>
 80005b6:	bf00      	nop
 80005b8:	200000c4 	.word	0x200000c4

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	@ 0x40
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	2228      	movs	r2, #40	@ 0x28
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 f9d2 	bl	8002974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005de:	2302      	movs	r3, #2
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e2:	2301      	movs	r3, #1
 80005e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e6:	2310      	movs	r3, #16
 80005e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fa04 	bl	8001a00 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005fe:	f000 f8ed 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fc72 	bl	8001f04 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000626:	f000 f8d9 	bl	80007dc <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3740      	adds	r7, #64	@ 0x40
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000648:	463b      	mov	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_TIM2_Init+0x94>)
 8000652:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000656:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_TIM2_Init+0x94>)
 800065a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800065e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_TIM2_Init+0x94>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000666:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <MX_TIM2_Init+0x94>)
 8000668:	2209      	movs	r2, #9
 800066a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066c:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <MX_TIM2_Init+0x94>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <MX_TIM2_Init+0x94>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000678:	4813      	ldr	r0, [pc, #76]	@ (80006c8 <MX_TIM2_Init+0x94>)
 800067a:	f001 fd9f 	bl	80021bc <HAL_TIM_Base_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000684:	f000 f8aa 	bl	80007dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	4619      	mov	r1, r3
 8000694:	480c      	ldr	r0, [pc, #48]	@ (80006c8 <MX_TIM2_Init+0x94>)
 8000696:	f001 ff1d 	bl	80024d4 <HAL_TIM_ConfigClockSource>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006a0:	f000 f89c 	bl	80007dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a4:	2300      	movs	r3, #0
 80006a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_TIM2_Init+0x94>)
 80006b2:	f002 f8f5 	bl	80028a0 <HAL_TIMEx_MasterConfigSynchronization>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006bc:	f000 f88e 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200000c4 	.word	0x200000c4

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e0:	4b34      	ldr	r3, [pc, #208]	@ (80007b4 <MX_GPIO_Init+0xe8>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a33      	ldr	r2, [pc, #204]	@ (80007b4 <MX_GPIO_Init+0xe8>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b31      	ldr	r3, [pc, #196]	@ (80007b4 <MX_GPIO_Init+0xe8>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0310 	and.w	r3, r3, #16
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <MX_GPIO_Init+0xe8>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a2d      	ldr	r2, [pc, #180]	@ (80007b4 <MX_GPIO_Init+0xe8>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <MX_GPIO_Init+0xe8>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <MX_GPIO_Init+0xe8>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a27      	ldr	r2, [pc, #156]	@ (80007b4 <MX_GPIO_Init+0xe8>)
 8000716:	f043 0308 	orr.w	r3, r3, #8
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_GPIO_Init+0xe8>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0308 	and.w	r3, r3, #8
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S1_Pin|S2_Pin|S3_Pin|S4_Pin
 8000728:	2200      	movs	r2, #0
 800072a:	f647 71fe 	movw	r1, #32766	@ 0x7ffe
 800072e:	4822      	ldr	r0, [pc, #136]	@ (80007b8 <MX_GPIO_Init+0xec>)
 8000730:	f001 f94d 	bl	80019ce <HAL_GPIO_WritePin>
                          |S5_Pin|S6_Pin|S7_Pin|S8_Pin
                          |S9_Pin|S10_Pin|S11_Pin|S12_Pin
                          |S13_Pin|S14_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_Pin|G_Pin|Y_Pin|R1_Pin
 8000734:	2200      	movs	r2, #0
 8000736:	213f      	movs	r1, #63	@ 0x3f
 8000738:	4820      	ldr	r0, [pc, #128]	@ (80007bc <MX_GPIO_Init+0xf0>)
 800073a:	f001 f948 	bl	80019ce <HAL_GPIO_WritePin>
                          |G1_Pin|Y1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 800073e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000748:	2301      	movs	r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4619      	mov	r1, r3
 8000752:	481b      	ldr	r0, [pc, #108]	@ (80007c0 <MX_GPIO_Init+0xf4>)
 8000754:	f000 ffa8 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin S3_Pin S4_Pin
                           S5_Pin S6_Pin S7_Pin S8_Pin
                           S9_Pin S10_Pin S11_Pin S12_Pin
                           S13_Pin S14_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin|S4_Pin
 8000758:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 800075c:	613b      	str	r3, [r7, #16]
                          |S5_Pin|S6_Pin|S7_Pin|S8_Pin
                          |S9_Pin|S10_Pin|S11_Pin|S12_Pin
                          |S13_Pin|S14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2302      	movs	r3, #2
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <MX_GPIO_Init+0xec>)
 8000772:	f000 ff99 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_Pin G_Pin Y_Pin R1_Pin
                           G1_Pin Y1_Pin */
  GPIO_InitStruct.Pin = R_Pin|G_Pin|Y_Pin|R1_Pin
 8000776:	233f      	movs	r3, #63	@ 0x3f
 8000778:	613b      	str	r3, [r7, #16]
                          |G1_Pin|Y1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2302      	movs	r3, #2
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	480b      	ldr	r0, [pc, #44]	@ (80007bc <MX_GPIO_Init+0xf0>)
 800078e:	f000 ff8b 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : b1_Pin b2_Pin */
  GPIO_InitStruct.Pin = b1_Pin|b2_Pin;
 8000792:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079c:	2301      	movs	r3, #1
 800079e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_GPIO_Init+0xf0>)
 80007a8:	f000 ff7e 	bl	80016a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40010800 	.word	0x40010800
 80007bc:	40010c00 	.word	0x40010c00
 80007c0:	40011000 	.word	0x40011000

080007c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	getKeyInput();
 80007cc:	f7ff fe3c 	bl	8000448 <getKeyInput>
	timerRun();
 80007d0:	f000 fc82 	bl	80010d8 <timerRun>

}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <manual_run>:
#include "manual.h"

void manual_run() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	switch (status) {
 80007ec:	4b71      	ldr	r3, [pc, #452]	@ (80009b4 <manual_run+0x1cc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3b0c      	subs	r3, #12
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	f200 80db 	bhi.w	80009ae <manual_run+0x1c6>
 80007f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000800 <manual_run+0x18>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000811 	.word	0x08000811
 8000804:	08000879 	.word	0x08000879
 8000808:	080008df 	.word	0x080008df
 800080c:	08000945 	.word	0x08000945
		case MAN_GREEN_RED:
			traffic_green_red();
 8000810:	f000 fd24 	bl	800125c <traffic_green_red>
			i = 0;
 8000814:	4b68      	ldr	r3, [pc, #416]	@ (80009b8 <manual_run+0x1d0>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
			j = 0;
 800081a:	4b68      	ldr	r3, [pc, #416]	@ (80009bc <manual_run+0x1d4>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
			display7seg(arr1[i]);
 8000820:	4b65      	ldr	r3, [pc, #404]	@ (80009b8 <manual_run+0x1d0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a66      	ldr	r2, [pc, #408]	@ (80009c0 <manual_run+0x1d8>)
 8000826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f8ce 	bl	80009cc <display7seg>
			display7seg2(arr2[j]);
 8000830:	4b62      	ldr	r3, [pc, #392]	@ (80009bc <manual_run+0x1d4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a63      	ldr	r2, [pc, #396]	@ (80009c4 <manual_run+0x1dc>)
 8000836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fa54 	bl	8000ce8 <display7seg2>
			if (isButtonPressed()) {
 8000840:	f7ff fdd0 	bl	80003e4 <isButtonPressed>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d008      	beq.n	800085c <manual_run+0x74>
				setTimer(6000, 1);
 800084a:	2101      	movs	r1, #1
 800084c:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000850:	f000 fc22 	bl	8001098 <setTimer>
				status = MAN_AMBER_RED;
 8000854:	4b57      	ldr	r3, [pc, #348]	@ (80009b4 <manual_run+0x1cc>)
 8000856:	220d      	movs	r2, #13
 8000858:	601a      	str	r2, [r3, #0]
			} else if (timer_flag[1] == 1) {
				setTimer(3000, 0);
				status = GREEN_RED;
			}
			break;
 800085a:	e0a1      	b.n	80009a0 <manual_run+0x1b8>
			} else if (timer_flag[1] == 1) {
 800085c:	4b5a      	ldr	r3, [pc, #360]	@ (80009c8 <manual_run+0x1e0>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	2b01      	cmp	r3, #1
 8000862:	f040 809d 	bne.w	80009a0 <manual_run+0x1b8>
				setTimer(3000, 0);
 8000866:	2100      	movs	r1, #0
 8000868:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800086c:	f000 fc14 	bl	8001098 <setTimer>
				status = GREEN_RED;
 8000870:	4b50      	ldr	r3, [pc, #320]	@ (80009b4 <manual_run+0x1cc>)
 8000872:	2202      	movs	r2, #2
 8000874:	601a      	str	r2, [r3, #0]
			break;
 8000876:	e093      	b.n	80009a0 <manual_run+0x1b8>

		case MAN_AMBER_RED:
			traffic_amber_red();
 8000878:	f000 fd14 	bl	80012a4 <traffic_amber_red>
			i = 3;
 800087c:	4b4e      	ldr	r3, [pc, #312]	@ (80009b8 <manual_run+0x1d0>)
 800087e:	2203      	movs	r2, #3
 8000880:	601a      	str	r2, [r3, #0]
			j = 3;
 8000882:	4b4e      	ldr	r3, [pc, #312]	@ (80009bc <manual_run+0x1d4>)
 8000884:	2203      	movs	r2, #3
 8000886:	601a      	str	r2, [r3, #0]
			display7seg(arr1[i]);
 8000888:	4b4b      	ldr	r3, [pc, #300]	@ (80009b8 <manual_run+0x1d0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a4c      	ldr	r2, [pc, #304]	@ (80009c0 <manual_run+0x1d8>)
 800088e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f89a 	bl	80009cc <display7seg>
			display7seg2(arr2[j]);
 8000898:	4b48      	ldr	r3, [pc, #288]	@ (80009bc <manual_run+0x1d4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a49      	ldr	r2, [pc, #292]	@ (80009c4 <manual_run+0x1dc>)
 800089e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fa20 	bl	8000ce8 <display7seg2>
			if (isButtonPressed()) {
 80008a8:	f7ff fd9c 	bl	80003e4 <isButtonPressed>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d008      	beq.n	80008c4 <manual_run+0xdc>
				status = MAN_RED_GREEN;
 80008b2:	4b40      	ldr	r3, [pc, #256]	@ (80009b4 <manual_run+0x1cc>)
 80008b4:	220e      	movs	r2, #14
 80008b6:	601a      	str	r2, [r3, #0]
				setTimer(6000, 1);
 80008b8:	2101      	movs	r1, #1
 80008ba:	f241 7070 	movw	r0, #6000	@ 0x1770
 80008be:	f000 fbeb 	bl	8001098 <setTimer>
			} else if (timer_flag[1] == 1) {

				setTimer(2000, 0);
				status = GREEN_RED;
			}
			break;
 80008c2:	e06f      	b.n	80009a4 <manual_run+0x1bc>
			} else if (timer_flag[1] == 1) {
 80008c4:	4b40      	ldr	r3, [pc, #256]	@ (80009c8 <manual_run+0x1e0>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d16b      	bne.n	80009a4 <manual_run+0x1bc>
				setTimer(2000, 0);
 80008cc:	2100      	movs	r1, #0
 80008ce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008d2:	f000 fbe1 	bl	8001098 <setTimer>
				status = GREEN_RED;
 80008d6:	4b37      	ldr	r3, [pc, #220]	@ (80009b4 <manual_run+0x1cc>)
 80008d8:	2202      	movs	r2, #2
 80008da:	601a      	str	r2, [r3, #0]
			break;
 80008dc:	e062      	b.n	80009a4 <manual_run+0x1bc>

		case MAN_RED_GREEN:
			traffic_red_green();
 80008de:	f000 fd05 	bl	80012ec <traffic_red_green>
			i = 5;
 80008e2:	4b35      	ldr	r3, [pc, #212]	@ (80009b8 <manual_run+0x1d0>)
 80008e4:	2205      	movs	r2, #5
 80008e6:	601a      	str	r2, [r3, #0]
			j = 5;
 80008e8:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <manual_run+0x1d4>)
 80008ea:	2205      	movs	r2, #5
 80008ec:	601a      	str	r2, [r3, #0]
			display7seg(arr1[i]);
 80008ee:	4b32      	ldr	r3, [pc, #200]	@ (80009b8 <manual_run+0x1d0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a33      	ldr	r2, [pc, #204]	@ (80009c0 <manual_run+0x1d8>)
 80008f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f867 	bl	80009cc <display7seg>
			display7seg2(arr2[j]);
 80008fe:	4b2f      	ldr	r3, [pc, #188]	@ (80009bc <manual_run+0x1d4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a30      	ldr	r2, [pc, #192]	@ (80009c4 <manual_run+0x1dc>)
 8000904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000908:	4618      	mov	r0, r3
 800090a:	f000 f9ed 	bl	8000ce8 <display7seg2>
			if (isButtonPressed()) {
 800090e:	f7ff fd69 	bl	80003e4 <isButtonPressed>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d008      	beq.n	800092a <manual_run+0x142>
				status = MAN_RED_AMBER;
 8000918:	4b26      	ldr	r3, [pc, #152]	@ (80009b4 <manual_run+0x1cc>)
 800091a:	220f      	movs	r2, #15
 800091c:	601a      	str	r2, [r3, #0]
				setTimer(6000, 1);
 800091e:	2101      	movs	r1, #1
 8000920:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000924:	f000 fbb8 	bl	8001098 <setTimer>
			} else if (timer_flag[1] == 1) {

				setTimer(3000, 0);
				status = RED_GREEN;
			}
			break;
 8000928:	e03e      	b.n	80009a8 <manual_run+0x1c0>
			} else if (timer_flag[1] == 1) {
 800092a:	4b27      	ldr	r3, [pc, #156]	@ (80009c8 <manual_run+0x1e0>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d13a      	bne.n	80009a8 <manual_run+0x1c0>
				setTimer(3000, 0);
 8000932:	2100      	movs	r1, #0
 8000934:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000938:	f000 fbae 	bl	8001098 <setTimer>
				status = RED_GREEN;
 800093c:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <manual_run+0x1cc>)
 800093e:	2204      	movs	r2, #4
 8000940:	601a      	str	r2, [r3, #0]
			break;
 8000942:	e031      	b.n	80009a8 <manual_run+0x1c0>

		case MAN_RED_AMBER:
			traffic_red_amber();
 8000944:	f000 fcf6 	bl	8001334 <traffic_red_amber>
			i = 8;
 8000948:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <manual_run+0x1d0>)
 800094a:	2208      	movs	r2, #8
 800094c:	601a      	str	r2, [r3, #0]
			j = 8;
 800094e:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <manual_run+0x1d4>)
 8000950:	2208      	movs	r2, #8
 8000952:	601a      	str	r2, [r3, #0]
			display7seg(arr1[i]);
 8000954:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <manual_run+0x1d0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <manual_run+0x1d8>)
 800095a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f834 	bl	80009cc <display7seg>
			display7seg2(arr2[j]);
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <manual_run+0x1d4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a16      	ldr	r2, [pc, #88]	@ (80009c4 <manual_run+0x1dc>)
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f9ba 	bl	8000ce8 <display7seg2>
			if (isButtonPressed()) {
 8000974:	f7ff fd36 	bl	80003e4 <isButtonPressed>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d003      	beq.n	8000986 <manual_run+0x19e>
				status = MAN_GREEN_RED;
 800097e:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <manual_run+0x1cc>)
 8000980:	220c      	movs	r2, #12
 8000982:	601a      	str	r2, [r3, #0]
			} else if (timer_flag[1] == 1) {
				setTimer(2000, 0);
				status = RED_AMBER;
			}
			break;
 8000984:	e012      	b.n	80009ac <manual_run+0x1c4>
			} else if (timer_flag[1] == 1) {
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <manual_run+0x1e0>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d10e      	bne.n	80009ac <manual_run+0x1c4>
				setTimer(2000, 0);
 800098e:	2100      	movs	r1, #0
 8000990:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000994:	f000 fb80 	bl	8001098 <setTimer>
				status = RED_AMBER;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <manual_run+0x1cc>)
 800099a:	2205      	movs	r2, #5
 800099c:	601a      	str	r2, [r3, #0]
			break;
 800099e:	e005      	b.n	80009ac <manual_run+0x1c4>
			break;
 80009a0:	bf00      	nop
 80009a2:	e004      	b.n	80009ae <manual_run+0x1c6>
			break;
 80009a4:	bf00      	nop
 80009a6:	e002      	b.n	80009ae <manual_run+0x1c6>
			break;
 80009a8:	bf00      	nop
 80009aa:	e000      	b.n	80009ae <manual_run+0x1c6>
			break;
 80009ac:	bf00      	nop
	}
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000000 	.word	0x20000000
 80009b8:	200000b0 	.word	0x200000b0
 80009bc:	200000b4 	.word	0x200000b4
 80009c0:	20000004 	.word	0x20000004
 80009c4:	2000002c 	.word	0x2000002c
 80009c8:	20000134 	.word	0x20000134

080009cc <display7seg>:
 *
 *  Created on: Sep 24, 2024
 *      Author: 84859
 */
#include "seven_seg.h"
void display7seg(int num){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	switch(num){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b09      	cmp	r3, #9
 80009d8:	f200 8180 	bhi.w	8000cdc <display7seg+0x310>
 80009dc:	a201      	add	r2, pc, #4	@ (adr r2, 80009e4 <display7seg+0x18>)
 80009de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e2:	bf00      	nop
 80009e4:	08000a0d 	.word	0x08000a0d
 80009e8:	08000a55 	.word	0x08000a55
 80009ec:	08000a9d 	.word	0x08000a9d
 80009f0:	08000ae5 	.word	0x08000ae5
 80009f4:	08000b2d 	.word	0x08000b2d
 80009f8:	08000b75 	.word	0x08000b75
 80009fc:	08000bbd 	.word	0x08000bbd
 8000a00:	08000c05 	.word	0x08000c05
 8000a04:	08000c4d 	.word	0x08000c4d
 8000a08:	08000c95 	.word	0x08000c95
		 case 0:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2102      	movs	r1, #2
 8000a10:	48b4      	ldr	r0, [pc, #720]	@ (8000ce4 <display7seg+0x318>)
 8000a12:	f000 ffdc 	bl	80019ce <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2104      	movs	r1, #4
 8000a1a:	48b2      	ldr	r0, [pc, #712]	@ (8000ce4 <display7seg+0x318>)
 8000a1c:	f000 ffd7 	bl	80019ce <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2108      	movs	r1, #8
 8000a24:	48af      	ldr	r0, [pc, #700]	@ (8000ce4 <display7seg+0x318>)
 8000a26:	f000 ffd2 	bl	80019ce <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	48ad      	ldr	r0, [pc, #692]	@ (8000ce4 <display7seg+0x318>)
 8000a30:	f000 ffcd 	bl	80019ce <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2120      	movs	r1, #32
 8000a38:	48aa      	ldr	r0, [pc, #680]	@ (8000ce4 <display7seg+0x318>)
 8000a3a:	f000 ffc8 	bl	80019ce <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2140      	movs	r1, #64	@ 0x40
 8000a42:	48a8      	ldr	r0, [pc, #672]	@ (8000ce4 <display7seg+0x318>)
 8000a44:	f000 ffc3 	bl	80019ce <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2180      	movs	r1, #128	@ 0x80
 8000a4c:	48a5      	ldr	r0, [pc, #660]	@ (8000ce4 <display7seg+0x318>)
 8000a4e:	f000 ffbe 	bl	80019ce <HAL_GPIO_WritePin>

			   break;
 8000a52:	e143      	b.n	8000cdc <display7seg+0x310>

		 case 1:
			 HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2104      	movs	r1, #4
 8000a58:	48a2      	ldr	r0, [pc, #648]	@ (8000ce4 <display7seg+0x318>)
 8000a5a:	f000 ffb8 	bl	80019ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2108      	movs	r1, #8
 8000a62:	48a0      	ldr	r0, [pc, #640]	@ (8000ce4 <display7seg+0x318>)
 8000a64:	f000 ffb3 	bl	80019ce <HAL_GPIO_WritePin>


			HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	489d      	ldr	r0, [pc, #628]	@ (8000ce4 <display7seg+0x318>)
 8000a6e:	f000 ffae 	bl	80019ce <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2110      	movs	r1, #16
 8000a76:	489b      	ldr	r0, [pc, #620]	@ (8000ce4 <display7seg+0x318>)
 8000a78:	f000 ffa9 	bl	80019ce <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2120      	movs	r1, #32
 8000a80:	4898      	ldr	r0, [pc, #608]	@ (8000ce4 <display7seg+0x318>)
 8000a82:	f000 ffa4 	bl	80019ce <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2140      	movs	r1, #64	@ 0x40
 8000a8a:	4896      	ldr	r0, [pc, #600]	@ (8000ce4 <display7seg+0x318>)
 8000a8c:	f000 ff9f 	bl	80019ce <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2180      	movs	r1, #128	@ 0x80
 8000a94:	4893      	ldr	r0, [pc, #588]	@ (8000ce4 <display7seg+0x318>)
 8000a96:	f000 ff9a 	bl	80019ce <HAL_GPIO_WritePin>

			  break;
 8000a9a:	e11f      	b.n	8000cdc <display7seg+0x310>


		 case 2:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	4890      	ldr	r0, [pc, #576]	@ (8000ce4 <display7seg+0x318>)
 8000aa2:	f000 ff94 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	488e      	ldr	r0, [pc, #568]	@ (8000ce4 <display7seg+0x318>)
 8000aac:	f000 ff8f 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	488b      	ldr	r0, [pc, #556]	@ (8000ce4 <display7seg+0x318>)
 8000ab6:	f000 ff8a 	bl	80019ce <HAL_GPIO_WritePin>
					  		   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2120      	movs	r1, #32
 8000abe:	4889      	ldr	r0, [pc, #548]	@ (8000ce4 <display7seg+0x318>)
 8000ac0:	f000 ff85 	bl	80019ce <HAL_GPIO_WritePin>
					  		 HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2180      	movs	r1, #128	@ 0x80
 8000ac8:	4886      	ldr	r0, [pc, #536]	@ (8000ce4 <display7seg+0x318>)
 8000aca:	f000 ff80 	bl	80019ce <HAL_GPIO_WritePin>



					  		  HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	4884      	ldr	r0, [pc, #528]	@ (8000ce4 <display7seg+0x318>)
 8000ad4:	f000 ff7b 	bl	80019ce <HAL_GPIO_WritePin>
					  		  HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2140      	movs	r1, #64	@ 0x40
 8000adc:	4881      	ldr	r0, [pc, #516]	@ (8000ce4 <display7seg+0x318>)
 8000ade:	f000 ff76 	bl	80019ce <HAL_GPIO_WritePin>
					  		  break;
 8000ae2:	e0fb      	b.n	8000cdc <display7seg+0x310>

		 case 3:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	487e      	ldr	r0, [pc, #504]	@ (8000ce4 <display7seg+0x318>)
 8000aea:	f000 ff70 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2104      	movs	r1, #4
 8000af2:	487c      	ldr	r0, [pc, #496]	@ (8000ce4 <display7seg+0x318>)
 8000af4:	f000 ff6b 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2108      	movs	r1, #8
 8000afc:	4879      	ldr	r0, [pc, #484]	@ (8000ce4 <display7seg+0x318>)
 8000afe:	f000 ff66 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2110      	movs	r1, #16
 8000b06:	4877      	ldr	r0, [pc, #476]	@ (8000ce4 <display7seg+0x318>)
 8000b08:	f000 ff61 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2120      	movs	r1, #32
 8000b10:	4874      	ldr	r0, [pc, #464]	@ (8000ce4 <display7seg+0x318>)
 8000b12:	f000 ff5c 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2140      	movs	r1, #64	@ 0x40
 8000b1a:	4872      	ldr	r0, [pc, #456]	@ (8000ce4 <display7seg+0x318>)
 8000b1c:	f000 ff57 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2180      	movs	r1, #128	@ 0x80
 8000b24:	486f      	ldr	r0, [pc, #444]	@ (8000ce4 <display7seg+0x318>)
 8000b26:	f000 ff52 	bl	80019ce <HAL_GPIO_WritePin>
					   break;
 8000b2a:	e0d7      	b.n	8000cdc <display7seg+0x310>


		 case 4:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2102      	movs	r1, #2
 8000b30:	486c      	ldr	r0, [pc, #432]	@ (8000ce4 <display7seg+0x318>)
 8000b32:	f000 ff4c 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2104      	movs	r1, #4
 8000b3a:	486a      	ldr	r0, [pc, #424]	@ (8000ce4 <display7seg+0x318>)
 8000b3c:	f000 ff47 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2108      	movs	r1, #8
 8000b44:	4867      	ldr	r0, [pc, #412]	@ (8000ce4 <display7seg+0x318>)
 8000b46:	f000 ff42 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2110      	movs	r1, #16
 8000b4e:	4865      	ldr	r0, [pc, #404]	@ (8000ce4 <display7seg+0x318>)
 8000b50:	f000 ff3d 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2120      	movs	r1, #32
 8000b58:	4862      	ldr	r0, [pc, #392]	@ (8000ce4 <display7seg+0x318>)
 8000b5a:	f000 ff38 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2140      	movs	r1, #64	@ 0x40
 8000b62:	4860      	ldr	r0, [pc, #384]	@ (8000ce4 <display7seg+0x318>)
 8000b64:	f000 ff33 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2180      	movs	r1, #128	@ 0x80
 8000b6c:	485d      	ldr	r0, [pc, #372]	@ (8000ce4 <display7seg+0x318>)
 8000b6e:	f000 ff2e 	bl	80019ce <HAL_GPIO_WritePin>

					   break;
 8000b72:	e0b3      	b.n	8000cdc <display7seg+0x310>


		 case 5:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2102      	movs	r1, #2
 8000b78:	485a      	ldr	r0, [pc, #360]	@ (8000ce4 <display7seg+0x318>)
 8000b7a:	f000 ff28 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2104      	movs	r1, #4
 8000b82:	4858      	ldr	r0, [pc, #352]	@ (8000ce4 <display7seg+0x318>)
 8000b84:	f000 ff23 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	4855      	ldr	r0, [pc, #340]	@ (8000ce4 <display7seg+0x318>)
 8000b8e:	f000 ff1e 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2110      	movs	r1, #16
 8000b96:	4853      	ldr	r0, [pc, #332]	@ (8000ce4 <display7seg+0x318>)
 8000b98:	f000 ff19 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	4850      	ldr	r0, [pc, #320]	@ (8000ce4 <display7seg+0x318>)
 8000ba2:	f000 ff14 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2140      	movs	r1, #64	@ 0x40
 8000baa:	484e      	ldr	r0, [pc, #312]	@ (8000ce4 <display7seg+0x318>)
 8000bac:	f000 ff0f 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2180      	movs	r1, #128	@ 0x80
 8000bb4:	484b      	ldr	r0, [pc, #300]	@ (8000ce4 <display7seg+0x318>)
 8000bb6:	f000 ff0a 	bl	80019ce <HAL_GPIO_WritePin>
					   break;
 8000bba:	e08f      	b.n	8000cdc <display7seg+0x310>


		 case 6:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	4848      	ldr	r0, [pc, #288]	@ (8000ce4 <display7seg+0x318>)
 8000bc2:	f000 ff04 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2104      	movs	r1, #4
 8000bca:	4846      	ldr	r0, [pc, #280]	@ (8000ce4 <display7seg+0x318>)
 8000bcc:	f000 feff 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	4843      	ldr	r0, [pc, #268]	@ (8000ce4 <display7seg+0x318>)
 8000bd6:	f000 fefa 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2110      	movs	r1, #16
 8000bde:	4841      	ldr	r0, [pc, #260]	@ (8000ce4 <display7seg+0x318>)
 8000be0:	f000 fef5 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2120      	movs	r1, #32
 8000be8:	483e      	ldr	r0, [pc, #248]	@ (8000ce4 <display7seg+0x318>)
 8000bea:	f000 fef0 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2140      	movs	r1, #64	@ 0x40
 8000bf2:	483c      	ldr	r0, [pc, #240]	@ (8000ce4 <display7seg+0x318>)
 8000bf4:	f000 feeb 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2180      	movs	r1, #128	@ 0x80
 8000bfc:	4839      	ldr	r0, [pc, #228]	@ (8000ce4 <display7seg+0x318>)
 8000bfe:	f000 fee6 	bl	80019ce <HAL_GPIO_WritePin>
					   break;
 8000c02:	e06b      	b.n	8000cdc <display7seg+0x310>


		 case 7:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2102      	movs	r1, #2
 8000c08:	4836      	ldr	r0, [pc, #216]	@ (8000ce4 <display7seg+0x318>)
 8000c0a:	f000 fee0 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2104      	movs	r1, #4
 8000c12:	4834      	ldr	r0, [pc, #208]	@ (8000ce4 <display7seg+0x318>)
 8000c14:	f000 fedb 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2108      	movs	r1, #8
 8000c1c:	4831      	ldr	r0, [pc, #196]	@ (8000ce4 <display7seg+0x318>)
 8000c1e:	f000 fed6 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2110      	movs	r1, #16
 8000c26:	482f      	ldr	r0, [pc, #188]	@ (8000ce4 <display7seg+0x318>)
 8000c28:	f000 fed1 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2120      	movs	r1, #32
 8000c30:	482c      	ldr	r0, [pc, #176]	@ (8000ce4 <display7seg+0x318>)
 8000c32:	f000 fecc 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2140      	movs	r1, #64	@ 0x40
 8000c3a:	482a      	ldr	r0, [pc, #168]	@ (8000ce4 <display7seg+0x318>)
 8000c3c:	f000 fec7 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2180      	movs	r1, #128	@ 0x80
 8000c44:	4827      	ldr	r0, [pc, #156]	@ (8000ce4 <display7seg+0x318>)
 8000c46:	f000 fec2 	bl	80019ce <HAL_GPIO_WritePin>
					   break;
 8000c4a:	e047      	b.n	8000cdc <display7seg+0x310>

		 case 8:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2102      	movs	r1, #2
 8000c50:	4824      	ldr	r0, [pc, #144]	@ (8000ce4 <display7seg+0x318>)
 8000c52:	f000 febc 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2104      	movs	r1, #4
 8000c5a:	4822      	ldr	r0, [pc, #136]	@ (8000ce4 <display7seg+0x318>)
 8000c5c:	f000 feb7 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2108      	movs	r1, #8
 8000c64:	481f      	ldr	r0, [pc, #124]	@ (8000ce4 <display7seg+0x318>)
 8000c66:	f000 feb2 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2110      	movs	r1, #16
 8000c6e:	481d      	ldr	r0, [pc, #116]	@ (8000ce4 <display7seg+0x318>)
 8000c70:	f000 fead 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2120      	movs	r1, #32
 8000c78:	481a      	ldr	r0, [pc, #104]	@ (8000ce4 <display7seg+0x318>)
 8000c7a:	f000 fea8 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2140      	movs	r1, #64	@ 0x40
 8000c82:	4818      	ldr	r0, [pc, #96]	@ (8000ce4 <display7seg+0x318>)
 8000c84:	f000 fea3 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2180      	movs	r1, #128	@ 0x80
 8000c8c:	4815      	ldr	r0, [pc, #84]	@ (8000ce4 <display7seg+0x318>)
 8000c8e:	f000 fe9e 	bl	80019ce <HAL_GPIO_WritePin>
					   break;
 8000c92:	e023      	b.n	8000cdc <display7seg+0x310>

		 case 9:
			 HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2102      	movs	r1, #2
 8000c98:	4812      	ldr	r0, [pc, #72]	@ (8000ce4 <display7seg+0x318>)
 8000c9a:	f000 fe98 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	4810      	ldr	r0, [pc, #64]	@ (8000ce4 <display7seg+0x318>)
 8000ca4:	f000 fe93 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2108      	movs	r1, #8
 8000cac:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <display7seg+0x318>)
 8000cae:	f000 fe8e 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	480b      	ldr	r0, [pc, #44]	@ (8000ce4 <display7seg+0x318>)
 8000cb8:	f000 fe89 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2120      	movs	r1, #32
 8000cc0:	4808      	ldr	r0, [pc, #32]	@ (8000ce4 <display7seg+0x318>)
 8000cc2:	f000 fe84 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2140      	movs	r1, #64	@ 0x40
 8000cca:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <display7seg+0x318>)
 8000ccc:	f000 fe7f 	bl	80019ce <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(S7_GPIO_Port, S7_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2180      	movs	r1, #128	@ 0x80
 8000cd4:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <display7seg+0x318>)
 8000cd6:	f000 fe7a 	bl	80019ce <HAL_GPIO_WritePin>
					   break;
 8000cda:	bf00      	nop


		 }

	 }
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40010800 	.word	0x40010800

08000ce8 <display7seg2>:


void display7seg2(int num){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	switch(num){
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b09      	cmp	r3, #9
 8000cf4:	f200 81c9 	bhi.w	800108a <display7seg2+0x3a2>
 8000cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8000d00 <display7seg2+0x18>)
 8000cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfe:	bf00      	nop
 8000d00:	08000d29 	.word	0x08000d29
 8000d04:	08000d7f 	.word	0x08000d7f
 8000d08:	08000dd5 	.word	0x08000dd5
 8000d0c:	08000e2b 	.word	0x08000e2b
 8000d10:	08000e81 	.word	0x08000e81
 8000d14:	08000ed7 	.word	0x08000ed7
 8000d18:	08000f2d 	.word	0x08000f2d
 8000d1c:	08000f83 	.word	0x08000f83
 8000d20:	08000fd9 	.word	0x08000fd9
 8000d24:	08001035 	.word	0x08001035
			 case 0:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d2e:	48c0      	ldr	r0, [pc, #768]	@ (8001030 <display7seg2+0x348>)
 8000d30:	f000 fe4d 	bl	80019ce <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d3a:	48bd      	ldr	r0, [pc, #756]	@ (8001030 <display7seg2+0x348>)
 8000d3c:	f000 fe47 	bl	80019ce <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d46:	48ba      	ldr	r0, [pc, #744]	@ (8001030 <display7seg2+0x348>)
 8000d48:	f000 fe41 	bl	80019ce <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d52:	48b7      	ldr	r0, [pc, #732]	@ (8001030 <display7seg2+0x348>)
 8000d54:	f000 fe3b 	bl	80019ce <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d5e:	48b4      	ldr	r0, [pc, #720]	@ (8001030 <display7seg2+0x348>)
 8000d60:	f000 fe35 	bl	80019ce <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d6a:	48b1      	ldr	r0, [pc, #708]	@ (8001030 <display7seg2+0x348>)
 8000d6c:	f000 fe2f 	bl	80019ce <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d76:	48ae      	ldr	r0, [pc, #696]	@ (8001030 <display7seg2+0x348>)
 8000d78:	f000 fe29 	bl	80019ce <HAL_GPIO_WritePin>

				   break;
 8000d7c:	e185      	b.n	800108a <display7seg2+0x3a2>

			 case 1:
				 HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d84:	48aa      	ldr	r0, [pc, #680]	@ (8001030 <display7seg2+0x348>)
 8000d86:	f000 fe22 	bl	80019ce <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d90:	48a7      	ldr	r0, [pc, #668]	@ (8001030 <display7seg2+0x348>)
 8000d92:	f000 fe1c 	bl	80019ce <HAL_GPIO_WritePin>


				HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d9c:	48a4      	ldr	r0, [pc, #656]	@ (8001030 <display7seg2+0x348>)
 8000d9e:	f000 fe16 	bl	80019ce <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000da8:	48a1      	ldr	r0, [pc, #644]	@ (8001030 <display7seg2+0x348>)
 8000daa:	f000 fe10 	bl	80019ce <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db4:	489e      	ldr	r0, [pc, #632]	@ (8001030 <display7seg2+0x348>)
 8000db6:	f000 fe0a 	bl	80019ce <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dc0:	489b      	ldr	r0, [pc, #620]	@ (8001030 <display7seg2+0x348>)
 8000dc2:	f000 fe04 	bl	80019ce <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dcc:	4898      	ldr	r0, [pc, #608]	@ (8001030 <display7seg2+0x348>)
 8000dce:	f000 fdfe 	bl	80019ce <HAL_GPIO_WritePin>

				  break;
 8000dd2:	e15a      	b.n	800108a <display7seg2+0x3a2>


			 case 2:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dda:	4895      	ldr	r0, [pc, #596]	@ (8001030 <display7seg2+0x348>)
 8000ddc:	f000 fdf7 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000de6:	4892      	ldr	r0, [pc, #584]	@ (8001030 <display7seg2+0x348>)
 8000de8:	f000 fdf1 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000df2:	488f      	ldr	r0, [pc, #572]	@ (8001030 <display7seg2+0x348>)
 8000df4:	f000 fdeb 	bl	80019ce <HAL_GPIO_WritePin>
						  		   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dfe:	488c      	ldr	r0, [pc, #560]	@ (8001030 <display7seg2+0x348>)
 8000e00:	f000 fde5 	bl	80019ce <HAL_GPIO_WritePin>
						  		 HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e0a:	4889      	ldr	r0, [pc, #548]	@ (8001030 <display7seg2+0x348>)
 8000e0c:	f000 fddf 	bl	80019ce <HAL_GPIO_WritePin>



						  		  HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e16:	4886      	ldr	r0, [pc, #536]	@ (8001030 <display7seg2+0x348>)
 8000e18:	f000 fdd9 	bl	80019ce <HAL_GPIO_WritePin>
						  		  HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e22:	4883      	ldr	r0, [pc, #524]	@ (8001030 <display7seg2+0x348>)
 8000e24:	f000 fdd3 	bl	80019ce <HAL_GPIO_WritePin>
						  		  break;
 8000e28:	e12f      	b.n	800108a <display7seg2+0x3a2>

			 case 3:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e30:	487f      	ldr	r0, [pc, #508]	@ (8001030 <display7seg2+0x348>)
 8000e32:	f000 fdcc 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3c:	487c      	ldr	r0, [pc, #496]	@ (8001030 <display7seg2+0x348>)
 8000e3e:	f000 fdc6 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e48:	4879      	ldr	r0, [pc, #484]	@ (8001030 <display7seg2+0x348>)
 8000e4a:	f000 fdc0 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e54:	4876      	ldr	r0, [pc, #472]	@ (8001030 <display7seg2+0x348>)
 8000e56:	f000 fdba 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e60:	4873      	ldr	r0, [pc, #460]	@ (8001030 <display7seg2+0x348>)
 8000e62:	f000 fdb4 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e6c:	4870      	ldr	r0, [pc, #448]	@ (8001030 <display7seg2+0x348>)
 8000e6e:	f000 fdae 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e78:	486d      	ldr	r0, [pc, #436]	@ (8001030 <display7seg2+0x348>)
 8000e7a:	f000 fda8 	bl	80019ce <HAL_GPIO_WritePin>
						   break;
 8000e7e:	e104      	b.n	800108a <display7seg2+0x3a2>


			 case 4:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e86:	486a      	ldr	r0, [pc, #424]	@ (8001030 <display7seg2+0x348>)
 8000e88:	f000 fda1 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e92:	4867      	ldr	r0, [pc, #412]	@ (8001030 <display7seg2+0x348>)
 8000e94:	f000 fd9b 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e9e:	4864      	ldr	r0, [pc, #400]	@ (8001030 <display7seg2+0x348>)
 8000ea0:	f000 fd95 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eaa:	4861      	ldr	r0, [pc, #388]	@ (8001030 <display7seg2+0x348>)
 8000eac:	f000 fd8f 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb6:	485e      	ldr	r0, [pc, #376]	@ (8001030 <display7seg2+0x348>)
 8000eb8:	f000 fd89 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ec2:	485b      	ldr	r0, [pc, #364]	@ (8001030 <display7seg2+0x348>)
 8000ec4:	f000 fd83 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ece:	4858      	ldr	r0, [pc, #352]	@ (8001030 <display7seg2+0x348>)
 8000ed0:	f000 fd7d 	bl	80019ce <HAL_GPIO_WritePin>

						   break;
 8000ed4:	e0d9      	b.n	800108a <display7seg2+0x3a2>


			 case 5:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000edc:	4854      	ldr	r0, [pc, #336]	@ (8001030 <display7seg2+0x348>)
 8000ede:	f000 fd76 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee8:	4851      	ldr	r0, [pc, #324]	@ (8001030 <display7seg2+0x348>)
 8000eea:	f000 fd70 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef4:	484e      	ldr	r0, [pc, #312]	@ (8001030 <display7seg2+0x348>)
 8000ef6:	f000 fd6a 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f00:	484b      	ldr	r0, [pc, #300]	@ (8001030 <display7seg2+0x348>)
 8000f02:	f000 fd64 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f0c:	4848      	ldr	r0, [pc, #288]	@ (8001030 <display7seg2+0x348>)
 8000f0e:	f000 fd5e 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f18:	4845      	ldr	r0, [pc, #276]	@ (8001030 <display7seg2+0x348>)
 8000f1a:	f000 fd58 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f24:	4842      	ldr	r0, [pc, #264]	@ (8001030 <display7seg2+0x348>)
 8000f26:	f000 fd52 	bl	80019ce <HAL_GPIO_WritePin>
						   break;
 8000f2a:	e0ae      	b.n	800108a <display7seg2+0x3a2>


			 case 6:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f32:	483f      	ldr	r0, [pc, #252]	@ (8001030 <display7seg2+0x348>)
 8000f34:	f000 fd4b 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3e:	483c      	ldr	r0, [pc, #240]	@ (8001030 <display7seg2+0x348>)
 8000f40:	f000 fd45 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f4a:	4839      	ldr	r0, [pc, #228]	@ (8001030 <display7seg2+0x348>)
 8000f4c:	f000 fd3f 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f56:	4836      	ldr	r0, [pc, #216]	@ (8001030 <display7seg2+0x348>)
 8000f58:	f000 fd39 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f62:	4833      	ldr	r0, [pc, #204]	@ (8001030 <display7seg2+0x348>)
 8000f64:	f000 fd33 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6e:	4830      	ldr	r0, [pc, #192]	@ (8001030 <display7seg2+0x348>)
 8000f70:	f000 fd2d 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f7a:	482d      	ldr	r0, [pc, #180]	@ (8001030 <display7seg2+0x348>)
 8000f7c:	f000 fd27 	bl	80019ce <HAL_GPIO_WritePin>
						   break;
 8000f80:	e083      	b.n	800108a <display7seg2+0x3a2>


			 case 7:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f88:	4829      	ldr	r0, [pc, #164]	@ (8001030 <display7seg2+0x348>)
 8000f8a:	f000 fd20 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f94:	4826      	ldr	r0, [pc, #152]	@ (8001030 <display7seg2+0x348>)
 8000f96:	f000 fd1a 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fa0:	4823      	ldr	r0, [pc, #140]	@ (8001030 <display7seg2+0x348>)
 8000fa2:	f000 fd14 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fac:	4820      	ldr	r0, [pc, #128]	@ (8001030 <display7seg2+0x348>)
 8000fae:	f000 fd0e 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fb8:	481d      	ldr	r0, [pc, #116]	@ (8001030 <display7seg2+0x348>)
 8000fba:	f000 fd08 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc4:	481a      	ldr	r0, [pc, #104]	@ (8001030 <display7seg2+0x348>)
 8000fc6:	f000 fd02 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fd0:	4817      	ldr	r0, [pc, #92]	@ (8001030 <display7seg2+0x348>)
 8000fd2:	f000 fcfc 	bl	80019ce <HAL_GPIO_WritePin>
						   break;
 8000fd6:	e058      	b.n	800108a <display7seg2+0x3a2>

			 case 8:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fde:	4814      	ldr	r0, [pc, #80]	@ (8001030 <display7seg2+0x348>)
 8000fe0:	f000 fcf5 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fea:	4811      	ldr	r0, [pc, #68]	@ (8001030 <display7seg2+0x348>)
 8000fec:	f000 fcef 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ff6:	480e      	ldr	r0, [pc, #56]	@ (8001030 <display7seg2+0x348>)
 8000ff8:	f000 fce9 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001002:	480b      	ldr	r0, [pc, #44]	@ (8001030 <display7seg2+0x348>)
 8001004:	f000 fce3 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800100e:	4808      	ldr	r0, [pc, #32]	@ (8001030 <display7seg2+0x348>)
 8001010:	f000 fcdd 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <display7seg2+0x348>)
 800101c:	f000 fcd7 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001026:	4802      	ldr	r0, [pc, #8]	@ (8001030 <display7seg2+0x348>)
 8001028:	f000 fcd1 	bl	80019ce <HAL_GPIO_WritePin>
						   break;
 800102c:	e02d      	b.n	800108a <display7seg2+0x3a2>
 800102e:	bf00      	nop
 8001030:	40010800 	.word	0x40010800

			 case 9:
				 HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800103a:	4816      	ldr	r0, [pc, #88]	@ (8001094 <display7seg2+0x3ac>)
 800103c:	f000 fcc7 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S9_GPIO_Port, S9_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001046:	4813      	ldr	r0, [pc, #76]	@ (8001094 <display7seg2+0x3ac>)
 8001048:	f000 fcc1 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S10_GPIO_Port, S10_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001052:	4810      	ldr	r0, [pc, #64]	@ (8001094 <display7seg2+0x3ac>)
 8001054:	f000 fcbb 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S11_GPIO_Port, S11_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800105e:	480d      	ldr	r0, [pc, #52]	@ (8001094 <display7seg2+0x3ac>)
 8001060:	f000 fcb5 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S12_GPIO_Port, S12_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800106a:	480a      	ldr	r0, [pc, #40]	@ (8001094 <display7seg2+0x3ac>)
 800106c:	f000 fcaf 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S13_GPIO_Port, S13_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001076:	4807      	ldr	r0, [pc, #28]	@ (8001094 <display7seg2+0x3ac>)
 8001078:	f000 fca9 	bl	80019ce <HAL_GPIO_WritePin>
						   HAL_GPIO_WritePin(S14_GPIO_Port, S14_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001082:	4804      	ldr	r0, [pc, #16]	@ (8001094 <display7seg2+0x3ac>)
 8001084:	f000 fca3 	bl	80019ce <HAL_GPIO_WritePin>
						   break;
 8001088:	bf00      	nop


			 }
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40010800 	.word	0x40010800

08001098 <setTimer>:
 */
#include "software_timer.h"
int timer_counter[10];
int timer_flag[10];

void setTimer(int duration, int index){
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/10;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a09      	ldr	r2, [pc, #36]	@ (80010cc <setTimer+0x34>)
 80010a6:	fb82 1203 	smull	r1, r2, r2, r3
 80010aa:	1092      	asrs	r2, r2, #2
 80010ac:	17db      	asrs	r3, r3, #31
 80010ae:	1ad2      	subs	r2, r2, r3
 80010b0:	4907      	ldr	r1, [pc, #28]	@ (80010d0 <setTimer+0x38>)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80010b8:	4a06      	ldr	r2, [pc, #24]	@ (80010d4 <setTimer+0x3c>)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2100      	movs	r1, #0
 80010be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	66666667 	.word	0x66666667
 80010d0:	2000010c 	.word	0x2000010c
 80010d4:	20000134 	.word	0x20000134

080010d8 <timerRun>:

void timerRun(){
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
	for(int i = 0; i<10; i++){ //TOI UU HOA ----> O(1)
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	e01c      	b.n	800111e <timerRun+0x46>
	if(timer_counter[i] > 0){
 80010e4:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <timerRun+0x58>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	dd13      	ble.n	8001118 <timerRun+0x40>
		timer_counter[i]--;
 80010f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <timerRun+0x58>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	1e5a      	subs	r2, r3, #1
 80010fa:	490d      	ldr	r1, [pc, #52]	@ (8001130 <timerRun+0x58>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] == 0){
 8001102:	4a0b      	ldr	r2, [pc, #44]	@ (8001130 <timerRun+0x58>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d104      	bne.n	8001118 <timerRun+0x40>
			timer_flag[i] = 1;
 800110e:	4a09      	ldr	r2, [pc, #36]	@ (8001134 <timerRun+0x5c>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2101      	movs	r1, #1
 8001114:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<10; i++){ //TOI UU HOA ----> O(1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3301      	adds	r3, #1
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b09      	cmp	r3, #9
 8001122:	dddf      	ble.n	80010e4 <timerRun+0xc>
		}
	}
}
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	2000010c 	.word	0x2000010c
 8001134:	20000134 	.word	0x20000134

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_MspInit+0x5c>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	4a14      	ldr	r2, [pc, #80]	@ (8001194 <HAL_MspInit+0x5c>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6193      	str	r3, [r2, #24]
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <HAL_MspInit+0x5c>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_MspInit+0x5c>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <HAL_MspInit+0x5c>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <HAL_MspInit+0x5c>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_MspInit+0x60>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <HAL_MspInit+0x60>)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40021000 	.word	0x40021000
 8001198:	40010000 	.word	0x40010000

0800119c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011ac:	d113      	bne.n	80011d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <HAL_TIM_Base_MspInit+0x44>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <HAL_TIM_Base_MspInit+0x44>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <HAL_TIM_Base_MspInit+0x44>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	201c      	movs	r0, #28
 80011cc:	f000 fa35 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011d0:	201c      	movs	r0, #28
 80011d2:	f000 fa4e 	bl	8001672 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000

080011e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <NMI_Handler+0x4>

080011ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <MemManage_Handler+0x4>

080011fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <UsageFault_Handler+0x4>

0800120c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 f90e 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001240:	4802      	ldr	r0, [pc, #8]	@ (800124c <TIM2_IRQHandler+0x10>)
 8001242:	f001 f857 	bl	80022f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200000c4 	.word	0x200000c4

08001250 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <traffic_green_red>:
 *
 *  Created on: Sep 24, 2024
 *      Author: 84859
 */
#include "traffic_led.h"
void traffic_green_red(){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
 HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2108      	movs	r1, #8
 8001264:	480e      	ldr	r0, [pc, #56]	@ (80012a0 <traffic_green_red+0x44>)
 8001266:	f000 fbb2 	bl	80019ce <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); //ON
 800126a:	2201      	movs	r2, #1
 800126c:	2110      	movs	r1, #16
 800126e:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <traffic_green_red+0x44>)
 8001270:	f000 fbad 	bl	80019ce <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2120      	movs	r1, #32
 8001278:	4809      	ldr	r0, [pc, #36]	@ (80012a0 <traffic_green_red+0x44>)
 800127a:	f000 fba8 	bl	80019ce <HAL_GPIO_WritePin>

 HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, SET); //ON
 800127e:	2201      	movs	r2, #1
 8001280:	2101      	movs	r1, #1
 8001282:	4807      	ldr	r0, [pc, #28]	@ (80012a0 <traffic_green_red+0x44>)
 8001284:	f000 fba3 	bl	80019ce <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2102      	movs	r1, #2
 800128c:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <traffic_green_red+0x44>)
 800128e:	f000 fb9e 	bl	80019ce <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(Y_GPIO_Port, Y_Pin, RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2104      	movs	r1, #4
 8001296:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <traffic_green_red+0x44>)
 8001298:	f000 fb99 	bl	80019ce <HAL_GPIO_WritePin>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40010c00 	.word	0x40010c00

080012a4 <traffic_amber_red>:
void traffic_amber_red(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2108      	movs	r1, #8
 80012ac:	480e      	ldr	r0, [pc, #56]	@ (80012e8 <traffic_amber_red+0x44>)
 80012ae:	f000 fb8e 	bl	80019ce <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2110      	movs	r1, #16
 80012b6:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <traffic_amber_red+0x44>)
 80012b8:	f000 fb89 	bl	80019ce <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET); //ON
 80012bc:	2201      	movs	r2, #1
 80012be:	2120      	movs	r1, #32
 80012c0:	4809      	ldr	r0, [pc, #36]	@ (80012e8 <traffic_amber_red+0x44>)
 80012c2:	f000 fb84 	bl	80019ce <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, SET); //ON
 80012c6:	2201      	movs	r2, #1
 80012c8:	2101      	movs	r1, #1
 80012ca:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <traffic_amber_red+0x44>)
 80012cc:	f000 fb7f 	bl	80019ce <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2102      	movs	r1, #2
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <traffic_amber_red+0x44>)
 80012d6:	f000 fb7a 	bl	80019ce <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y_GPIO_Port, Y_Pin, RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2104      	movs	r1, #4
 80012de:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <traffic_amber_red+0x44>)
 80012e0:	f000 fb75 	bl	80019ce <HAL_GPIO_WritePin>

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40010c00 	.word	0x40010c00

080012ec <traffic_red_green>:
void traffic_red_green(){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); //ON
 80012f0:	2201      	movs	r2, #1
 80012f2:	2108      	movs	r1, #8
 80012f4:	480e      	ldr	r0, [pc, #56]	@ (8001330 <traffic_red_green+0x44>)
 80012f6:	f000 fb6a 	bl	80019ce <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2110      	movs	r1, #16
 80012fe:	480c      	ldr	r0, [pc, #48]	@ (8001330 <traffic_red_green+0x44>)
 8001300:	f000 fb65 	bl	80019ce <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2120      	movs	r1, #32
 8001308:	4809      	ldr	r0, [pc, #36]	@ (8001330 <traffic_red_green+0x44>)
 800130a:	f000 fb60 	bl	80019ce <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2101      	movs	r1, #1
 8001312:	4807      	ldr	r0, [pc, #28]	@ (8001330 <traffic_red_green+0x44>)
 8001314:	f000 fb5b 	bl	80019ce <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET); //ON
 8001318:	2201      	movs	r2, #1
 800131a:	2102      	movs	r1, #2
 800131c:	4804      	ldr	r0, [pc, #16]	@ (8001330 <traffic_red_green+0x44>)
 800131e:	f000 fb56 	bl	80019ce <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y_GPIO_Port, Y_Pin, RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2104      	movs	r1, #4
 8001326:	4802      	ldr	r0, [pc, #8]	@ (8001330 <traffic_red_green+0x44>)
 8001328:	f000 fb51 	bl	80019ce <HAL_GPIO_WritePin>

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40010c00 	.word	0x40010c00

08001334 <traffic_red_amber>:
void traffic_red_amber(){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); //ON
 8001338:	2201      	movs	r2, #1
 800133a:	2108      	movs	r1, #8
 800133c:	480e      	ldr	r0, [pc, #56]	@ (8001378 <traffic_red_amber+0x44>)
 800133e:	f000 fb46 	bl	80019ce <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2110      	movs	r1, #16
 8001346:	480c      	ldr	r0, [pc, #48]	@ (8001378 <traffic_red_amber+0x44>)
 8001348:	f000 fb41 	bl	80019ce <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2120      	movs	r1, #32
 8001350:	4809      	ldr	r0, [pc, #36]	@ (8001378 <traffic_red_amber+0x44>)
 8001352:	f000 fb3c 	bl	80019ce <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2101      	movs	r1, #1
 800135a:	4807      	ldr	r0, [pc, #28]	@ (8001378 <traffic_red_amber+0x44>)
 800135c:	f000 fb37 	bl	80019ce <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2102      	movs	r1, #2
 8001364:	4804      	ldr	r0, [pc, #16]	@ (8001378 <traffic_red_amber+0x44>)
 8001366:	f000 fb32 	bl	80019ce <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Y_GPIO_Port, Y_Pin, SET);
 800136a:	2201      	movs	r2, #1
 800136c:	2104      	movs	r1, #4
 800136e:	4802      	ldr	r0, [pc, #8]	@ (8001378 <traffic_red_amber+0x44>)
 8001370:	f000 fb2d 	bl	80019ce <HAL_GPIO_WritePin>
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40010c00 	.word	0x40010c00

0800137c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800137c:	f7ff ff68 	bl	8001250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001380:	480b      	ldr	r0, [pc, #44]	@ (80013b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001382:	490c      	ldr	r1, [pc, #48]	@ (80013b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001384:	4a0c      	ldr	r2, [pc, #48]	@ (80013b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a09      	ldr	r2, [pc, #36]	@ (80013bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001398:	4c09      	ldr	r4, [pc, #36]	@ (80013c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a6:	f001 faed 	bl	8002984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013aa:	f7ff f8f1 	bl	8000590 <main>
  bx lr
 80013ae:	4770      	bx	lr
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80013b8:	08002a10 	.word	0x08002a10
  ldr r2, =_sbss
 80013bc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80013c0:	20000160 	.word	0x20000160

080013c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC1_2_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <HAL_Init+0x28>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	@ (80013f0 <HAL_Init+0x28>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 f923 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	200f      	movs	r0, #15
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff fea8 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40022000 	.word	0x40022000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f93b 	bl	800168e <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 f903 	bl	800163a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	@ (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000088 	.word	0x20000088
 800144c:	20000090 	.word	0x20000090
 8001450:	2000008c 	.word	0x2000008c

08001454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <HAL_IncTick+0x1c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <HAL_IncTick+0x20>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a03      	ldr	r2, [pc, #12]	@ (8001474 <HAL_IncTick+0x20>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	20000090 	.word	0x20000090
 8001474:	2000015c 	.word	0x2000015c

08001478 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b02      	ldr	r3, [pc, #8]	@ (8001488 <HAL_GetTick+0x10>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	2000015c 	.word	0x2000015c

0800148c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db0b      	blt.n	800151a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	4906      	ldr	r1, [pc, #24]	@ (8001524 <__NVIC_EnableIRQ+0x34>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2001      	movs	r0, #1
 8001512:	fa00 f202 	lsl.w	r2, r0, r2
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	@ (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	@ (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	@ 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	@ 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015f0:	d301      	bcc.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <SysTick_Config+0x40>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	210f      	movs	r1, #15
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f7ff ff90 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001608:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <SysTick_Config+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160e:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <SysTick_Config+0x40>)
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff2d 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800164c:	f7ff ff42 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff90 	bl	800157c <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5f 	bl	8001528 <__NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff35 	bl	80014f0 <__NVIC_EnableIRQ>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffa2 	bl	80015e0 <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b08b      	sub	sp, #44	@ 0x2c
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ba:	e161      	b.n	8001980 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016bc:	2201      	movs	r2, #1
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f040 8150 	bne.w	800197a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4a97      	ldr	r2, [pc, #604]	@ (800193c <HAL_GPIO_Init+0x294>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d05e      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 80016e4:	4a95      	ldr	r2, [pc, #596]	@ (800193c <HAL_GPIO_Init+0x294>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d875      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 80016ea:	4a95      	ldr	r2, [pc, #596]	@ (8001940 <HAL_GPIO_Init+0x298>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d058      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 80016f0:	4a93      	ldr	r2, [pc, #588]	@ (8001940 <HAL_GPIO_Init+0x298>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d86f      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 80016f6:	4a93      	ldr	r2, [pc, #588]	@ (8001944 <HAL_GPIO_Init+0x29c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d052      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 80016fc:	4a91      	ldr	r2, [pc, #580]	@ (8001944 <HAL_GPIO_Init+0x29c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d869      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 8001702:	4a91      	ldr	r2, [pc, #580]	@ (8001948 <HAL_GPIO_Init+0x2a0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d04c      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 8001708:	4a8f      	ldr	r2, [pc, #572]	@ (8001948 <HAL_GPIO_Init+0x2a0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d863      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 800170e:	4a8f      	ldr	r2, [pc, #572]	@ (800194c <HAL_GPIO_Init+0x2a4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d046      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
 8001714:	4a8d      	ldr	r2, [pc, #564]	@ (800194c <HAL_GPIO_Init+0x2a4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d85d      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 800171a:	2b12      	cmp	r3, #18
 800171c:	d82a      	bhi.n	8001774 <HAL_GPIO_Init+0xcc>
 800171e:	2b12      	cmp	r3, #18
 8001720:	d859      	bhi.n	80017d6 <HAL_GPIO_Init+0x12e>
 8001722:	a201      	add	r2, pc, #4	@ (adr r2, 8001728 <HAL_GPIO_Init+0x80>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	080017a3 	.word	0x080017a3
 800172c:	0800177d 	.word	0x0800177d
 8001730:	0800178f 	.word	0x0800178f
 8001734:	080017d1 	.word	0x080017d1
 8001738:	080017d7 	.word	0x080017d7
 800173c:	080017d7 	.word	0x080017d7
 8001740:	080017d7 	.word	0x080017d7
 8001744:	080017d7 	.word	0x080017d7
 8001748:	080017d7 	.word	0x080017d7
 800174c:	080017d7 	.word	0x080017d7
 8001750:	080017d7 	.word	0x080017d7
 8001754:	080017d7 	.word	0x080017d7
 8001758:	080017d7 	.word	0x080017d7
 800175c:	080017d7 	.word	0x080017d7
 8001760:	080017d7 	.word	0x080017d7
 8001764:	080017d7 	.word	0x080017d7
 8001768:	080017d7 	.word	0x080017d7
 800176c:	08001785 	.word	0x08001785
 8001770:	08001799 	.word	0x08001799
 8001774:	4a76      	ldr	r2, [pc, #472]	@ (8001950 <HAL_GPIO_Init+0x2a8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800177a:	e02c      	b.n	80017d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e029      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	3304      	adds	r3, #4
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e024      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	3308      	adds	r3, #8
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e01f      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	330c      	adds	r3, #12
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e01a      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017aa:	2304      	movs	r3, #4
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e013      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b8:	2308      	movs	r3, #8
 80017ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	611a      	str	r2, [r3, #16]
          break;
 80017c2:	e009      	b.n	80017d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c4:	2308      	movs	r3, #8
 80017c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	615a      	str	r2, [r3, #20]
          break;
 80017ce:	e003      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
          break;
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x130>
          break;
 80017d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2bff      	cmp	r3, #255	@ 0xff
 80017dc:	d801      	bhi.n	80017e2 <HAL_GPIO_Init+0x13a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	e001      	b.n	80017e6 <HAL_GPIO_Init+0x13e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3304      	adds	r3, #4
 80017e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2bff      	cmp	r3, #255	@ 0xff
 80017ec:	d802      	bhi.n	80017f4 <HAL_GPIO_Init+0x14c>
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	e002      	b.n	80017fa <HAL_GPIO_Init+0x152>
 80017f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f6:	3b08      	subs	r3, #8
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	210f      	movs	r1, #15
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	401a      	ands	r2, r3
 800180c:	6a39      	ldr	r1, [r7, #32]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	431a      	orrs	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 80a9 	beq.w	800197a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001828:	4b4a      	ldr	r3, [pc, #296]	@ (8001954 <HAL_GPIO_Init+0x2ac>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4a49      	ldr	r2, [pc, #292]	@ (8001954 <HAL_GPIO_Init+0x2ac>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	4b47      	ldr	r3, [pc, #284]	@ (8001954 <HAL_GPIO_Init+0x2ac>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001840:	4a45      	ldr	r2, [pc, #276]	@ (8001958 <HAL_GPIO_Init+0x2b0>)
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	220f      	movs	r2, #15
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a3d      	ldr	r2, [pc, #244]	@ (800195c <HAL_GPIO_Init+0x2b4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d00d      	beq.n	8001888 <HAL_GPIO_Init+0x1e0>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a3c      	ldr	r2, [pc, #240]	@ (8001960 <HAL_GPIO_Init+0x2b8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d007      	beq.n	8001884 <HAL_GPIO_Init+0x1dc>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a3b      	ldr	r2, [pc, #236]	@ (8001964 <HAL_GPIO_Init+0x2bc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d101      	bne.n	8001880 <HAL_GPIO_Init+0x1d8>
 800187c:	2302      	movs	r3, #2
 800187e:	e004      	b.n	800188a <HAL_GPIO_Init+0x1e2>
 8001880:	2303      	movs	r3, #3
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0x1e2>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_GPIO_Init+0x1e2>
 8001888:	2300      	movs	r3, #0
 800188a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800188c:	f002 0203 	and.w	r2, r2, #3
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	4093      	lsls	r3, r2
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800189a:	492f      	ldr	r1, [pc, #188]	@ (8001958 <HAL_GPIO_Init+0x2b0>)
 800189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	492b      	ldr	r1, [pc, #172]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	608b      	str	r3, [r1, #8]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018c2:	4b29      	ldr	r3, [pc, #164]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4927      	ldr	r1, [pc, #156]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018dc:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	4921      	ldr	r1, [pc, #132]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	60cb      	str	r3, [r1, #12]
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	491d      	ldr	r1, [pc, #116]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001904:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	4917      	ldr	r1, [pc, #92]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4913      	ldr	r1, [pc, #76]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 800191c:	4013      	ands	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01f      	beq.n	800196c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800192c:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	490d      	ldr	r1, [pc, #52]	@ (8001968 <HAL_GPIO_Init+0x2c0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
 8001938:	e01f      	b.n	800197a <HAL_GPIO_Init+0x2d2>
 800193a:	bf00      	nop
 800193c:	10320000 	.word	0x10320000
 8001940:	10310000 	.word	0x10310000
 8001944:	10220000 	.word	0x10220000
 8001948:	10210000 	.word	0x10210000
 800194c:	10120000 	.word	0x10120000
 8001950:	10110000 	.word	0x10110000
 8001954:	40021000 	.word	0x40021000
 8001958:	40010000 	.word	0x40010000
 800195c:	40010800 	.word	0x40010800
 8001960:	40010c00 	.word	0x40010c00
 8001964:	40011000 	.word	0x40011000
 8001968:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800196c:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <HAL_GPIO_Init+0x2f4>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	43db      	mvns	r3, r3
 8001974:	4909      	ldr	r1, [pc, #36]	@ (800199c <HAL_GPIO_Init+0x2f4>)
 8001976:	4013      	ands	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	3301      	adds	r3, #1
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	fa22 f303 	lsr.w	r3, r2, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	f47f ae96 	bne.w	80016bc <HAL_GPIO_Init+0x14>
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	372c      	adds	r7, #44	@ 0x2c
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e001      	b.n	80019c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	807b      	strh	r3, [r7, #2]
 80019da:	4613      	mov	r3, r2
 80019dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019de:	787b      	ldrb	r3, [r7, #1]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e4:	887a      	ldrh	r2, [r7, #2]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019ea:	e003      	b.n	80019f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ec:	887b      	ldrh	r3, [r7, #2]
 80019ee:	041a      	lsls	r2, r3, #16
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	611a      	str	r2, [r3, #16]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e272      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8087 	beq.w	8001b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a20:	4b92      	ldr	r3, [pc, #584]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d00c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a2c:	4b8f      	ldr	r3, [pc, #572]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d112      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5e>
 8001a38:	4b8c      	ldr	r3, [pc, #560]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a44:	d10b      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a46:	4b89      	ldr	r3, [pc, #548]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d06c      	beq.n	8001b2c <HAL_RCC_OscConfig+0x12c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d168      	bne.n	8001b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e24c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x76>
 8001a68:	4b80      	ldr	r3, [pc, #512]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a7f      	ldr	r2, [pc, #508]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	e02e      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x98>
 8001a7e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a7a      	ldr	r2, [pc, #488]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b78      	ldr	r3, [pc, #480]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a77      	ldr	r2, [pc, #476]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e01d      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0xbc>
 8001aa2:	4b72      	ldr	r3, [pc, #456]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a71      	ldr	r2, [pc, #452]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b6f      	ldr	r3, [pc, #444]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a6e      	ldr	r2, [pc, #440]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001abc:	4b6b      	ldr	r3, [pc, #428]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6a      	ldr	r2, [pc, #424]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b68      	ldr	r3, [pc, #416]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a67      	ldr	r2, [pc, #412]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ad2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fccc 	bl	8001478 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fcc8 	bl	8001478 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	@ 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e200      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xe4>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fcb8 	bl	8001478 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fcb4 	bl	8001478 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	@ 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1ec      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	4b53      	ldr	r3, [pc, #332]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x10c>
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b46:	4b49      	ldr	r3, [pc, #292]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d11c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x18c>
 8001b52:	4b46      	ldr	r3, [pc, #280]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d116      	bne.n	8001b8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	4b43      	ldr	r3, [pc, #268]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_RCC_OscConfig+0x176>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e1c0      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	4b3d      	ldr	r3, [pc, #244]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4939      	ldr	r1, [pc, #228]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	e03a      	b.n	8001c02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b94:	4b36      	ldr	r3, [pc, #216]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fc6d 	bl	8001478 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fc69 	bl	8001478 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1a1      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4927      	ldr	r1, [pc, #156]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
 8001bd4:	e015      	b.n	8001c02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd6:	4b26      	ldr	r3, [pc, #152]	@ (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fc4c 	bl	8001478 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be4:	f7ff fc48 	bl	8001478 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e180      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d03a      	beq.n	8001c84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d019      	beq.n	8001c4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c16:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1c:	f7ff fc2c 	bl	8001478 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff fc28 	bl	8001478 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e160      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f000 fa9c 	bl	8002180 <RCC_Delay>
 8001c48:	e01c      	b.n	8001c84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7ff fc12 	bl	8001478 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c56:	e00f      	b.n	8001c78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff fc0e 	bl	8001478 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d908      	bls.n	8001c78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e146      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	42420000 	.word	0x42420000
 8001c74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c78:	4b92      	ldr	r3, [pc, #584]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e9      	bne.n	8001c58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80a6 	beq.w	8001dde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c96:	4b8b      	ldr	r3, [pc, #556]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10d      	bne.n	8001cbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	4b88      	ldr	r3, [pc, #544]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a87      	ldr	r2, [pc, #540]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b85      	ldr	r3, [pc, #532]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbe:	4b82      	ldr	r3, [pc, #520]	@ (8001ec8 <HAL_RCC_OscConfig+0x4c8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cca:	4b7f      	ldr	r3, [pc, #508]	@ (8001ec8 <HAL_RCC_OscConfig+0x4c8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a7e      	ldr	r2, [pc, #504]	@ (8001ec8 <HAL_RCC_OscConfig+0x4c8>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd6:	f7ff fbcf 	bl	8001478 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cde:	f7ff fbcb 	bl	8001478 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	@ 0x64
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e103      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	4b75      	ldr	r3, [pc, #468]	@ (8001ec8 <HAL_RCC_OscConfig+0x4c8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x312>
 8001d04:	4b6f      	ldr	r3, [pc, #444]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a6e      	ldr	r2, [pc, #440]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6213      	str	r3, [r2, #32]
 8001d10:	e02d      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x334>
 8001d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a69      	ldr	r2, [pc, #420]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6213      	str	r3, [r2, #32]
 8001d26:	4b67      	ldr	r3, [pc, #412]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a66      	ldr	r2, [pc, #408]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	f023 0304 	bic.w	r3, r3, #4
 8001d30:	6213      	str	r3, [r2, #32]
 8001d32:	e01c      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d10c      	bne.n	8001d56 <HAL_RCC_OscConfig+0x356>
 8001d3c:	4b61      	ldr	r3, [pc, #388]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4a60      	ldr	r2, [pc, #384]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6213      	str	r3, [r2, #32]
 8001d48:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	e00b      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d56:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6213      	str	r3, [r2, #32]
 8001d62:	4b58      	ldr	r3, [pc, #352]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a57      	ldr	r2, [pc, #348]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d015      	beq.n	8001da2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7ff fb7f 	bl	8001478 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7ff fb7b 	bl	8001478 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e0b1      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	4b4b      	ldr	r3, [pc, #300]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ee      	beq.n	8001d7e <HAL_RCC_OscConfig+0x37e>
 8001da0:	e014      	b.n	8001dcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da2:	f7ff fb69 	bl	8001478 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7ff fb65 	bl	8001478 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e09b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	4b40      	ldr	r3, [pc, #256]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1ee      	bne.n	8001daa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d105      	bne.n	8001dde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8087 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de8:	4b36      	ldr	r3, [pc, #216]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d061      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d146      	bne.n	8001e8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b33      	ldr	r3, [pc, #204]	@ (8001ecc <HAL_RCC_OscConfig+0x4cc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fb39 	bl	8001478 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff fb35 	bl	8001478 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e06d      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1c:	4b29      	ldr	r3, [pc, #164]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e30:	d108      	bne.n	8001e44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e32:	4b24      	ldr	r3, [pc, #144]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4921      	ldr	r1, [pc, #132]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a19      	ldr	r1, [r3, #32]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	430b      	orrs	r3, r1
 8001e56:	491b      	ldr	r1, [pc, #108]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <HAL_RCC_OscConfig+0x4cc>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff fb09 	bl	8001478 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7ff fb05 	bl	8001478 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e03d      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x46a>
 8001e88:	e035      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <HAL_RCC_OscConfig+0x4cc>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff faf2 	bl	8001478 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff faee 	bl	8001478 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e026      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x498>
 8001eb6:	e01e      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e019      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_RCC_OscConfig+0x500>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0d0      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f18:	4b6a      	ldr	r3, [pc, #424]	@ (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d910      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b67      	ldr	r3, [pc, #412]	@ (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0207 	bic.w	r2, r3, #7
 8001f2e:	4965      	ldr	r1, [pc, #404]	@ (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b63      	ldr	r3, [pc, #396]	@ (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0b8      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f60:	4b59      	ldr	r3, [pc, #356]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a58      	ldr	r2, [pc, #352]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f78:	4b53      	ldr	r3, [pc, #332]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a52      	ldr	r2, [pc, #328]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f84:	4b50      	ldr	r3, [pc, #320]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	494d      	ldr	r1, [pc, #308]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d040      	beq.n	8002024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b47      	ldr	r3, [pc, #284]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d115      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e07f      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc2:	4b41      	ldr	r3, [pc, #260]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e073      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e06b      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe2:	4b39      	ldr	r3, [pc, #228]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4936      	ldr	r1, [pc, #216]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff4:	f7ff fa40 	bl	8001478 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7ff fa3c 	bl	8001478 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e053      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b2d      	ldr	r3, [pc, #180]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 020c 	and.w	r2, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1eb      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002024:	4b27      	ldr	r3, [pc, #156]	@ (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d210      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b24      	ldr	r3, [pc, #144]	@ (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	4922      	ldr	r1, [pc, #136]	@ (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e032      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4916      	ldr	r1, [pc, #88]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800207e:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	490e      	ldr	r1, [pc, #56]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002092:	f000 f821 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	490a      	ldr	r1, [pc, #40]	@ (80020cc <HAL_RCC_ClockConfig+0x1c8>)
 80020a4:	5ccb      	ldrb	r3, [r1, r3]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	4a09      	ldr	r2, [pc, #36]	@ (80020d0 <HAL_RCC_ClockConfig+0x1cc>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ae:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <HAL_RCC_ClockConfig+0x1d0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f99e 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	080029e4 	.word	0x080029e4
 80020d0:	20000088 	.word	0x20000088
 80020d4:	2000008c 	.word	0x2000008c

080020d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020f2:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d002      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x30>
 8002102:	2b08      	cmp	r3, #8
 8002104:	d003      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x36>
 8002106:	e027      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002108:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 800210a:	613b      	str	r3, [r7, #16]
      break;
 800210c:	e027      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	0c9b      	lsrs	r3, r3, #18
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	4a17      	ldr	r2, [pc, #92]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d010      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	0c5b      	lsrs	r3, r3, #17
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	4a11      	ldr	r2, [pc, #68]	@ (8002178 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002132:	5cd3      	ldrb	r3, [r2, r3]
 8002134:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a0d      	ldr	r2, [pc, #52]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 800213a:	fb03 f202 	mul.w	r2, r3, r2
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e004      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a0c      	ldr	r2, [pc, #48]	@ (800217c <HAL_RCC_GetSysClockFreq+0xa4>)
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	613b      	str	r3, [r7, #16]
      break;
 8002156:	e002      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 800215a:	613b      	str	r3, [r7, #16]
      break;
 800215c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215e:	693b      	ldr	r3, [r7, #16]
}
 8002160:	4618      	mov	r0, r3
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	007a1200 	.word	0x007a1200
 8002174:	080029f4 	.word	0x080029f4
 8002178:	08002a04 	.word	0x08002a04
 800217c:	003d0900 	.word	0x003d0900

08002180 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002188:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <RCC_Delay+0x34>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <RCC_Delay+0x38>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0a5b      	lsrs	r3, r3, #9
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800219c:	bf00      	nop
  }
  while (Delay --);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1e5a      	subs	r2, r3, #1
 80021a2:	60fa      	str	r2, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f9      	bne.n	800219c <RCC_Delay+0x1c>
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20000088 	.word	0x20000088
 80021b8:	10624dd3 	.word	0x10624dd3

080021bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e041      	b.n	8002252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe ffda 	bl	800119c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f000 fa56 	bl	80026ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d001      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e035      	b.n	80022e0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a16      	ldr	r2, [pc, #88]	@ (80022ec <HAL_TIM_Base_Start_IT+0x90>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d009      	beq.n	80022aa <HAL_TIM_Base_Start_IT+0x4e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800229e:	d004      	beq.n	80022aa <HAL_TIM_Base_Start_IT+0x4e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a12      	ldr	r2, [pc, #72]	@ (80022f0 <HAL_TIM_Base_Start_IT+0x94>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d111      	bne.n	80022ce <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b06      	cmp	r3, #6
 80022ba:	d010      	beq.n	80022de <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022cc:	e007      	b.n	80022de <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40012c00 	.word	0x40012c00
 80022f0:	40000400 	.word	0x40000400

080022f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d020      	beq.n	8002358 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01b      	beq.n	8002358 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0202 	mvn.w	r2, #2
 8002328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f998 	bl	8002674 <HAL_TIM_IC_CaptureCallback>
 8002344:	e005      	b.n	8002352 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f98b 	bl	8002662 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f99a 	bl	8002686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	d020      	beq.n	80023a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01b      	beq.n	80023a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0204 	mvn.w	r2, #4
 8002374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2202      	movs	r2, #2
 800237a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f972 	bl	8002674 <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f965 	bl	8002662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f974 	bl	8002686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d020      	beq.n	80023f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01b      	beq.n	80023f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0208 	mvn.w	r2, #8
 80023c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2204      	movs	r2, #4
 80023c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f94c 	bl	8002674 <HAL_TIM_IC_CaptureCallback>
 80023dc:	e005      	b.n	80023ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f93f 	bl	8002662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f94e 	bl	8002686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d020      	beq.n	800243c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0210 	mvn.w	r2, #16
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2208      	movs	r2, #8
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f926 	bl	8002674 <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f919 	bl	8002662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f928 	bl	8002686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00c      	beq.n	8002460 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0201 	mvn.w	r2, #1
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe f9b2 	bl	80007c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00c      	beq.n	8002484 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fa6f 	bl	8002962 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00c      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f8f8 	bl	8002698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00c      	beq.n	80024cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0220 	mvn.w	r2, #32
 80024c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fa42 	bl	8002950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_TIM_ConfigClockSource+0x1c>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e0b4      	b.n	800265a <HAL_TIM_ConfigClockSource+0x186>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800250e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002528:	d03e      	beq.n	80025a8 <HAL_TIM_ConfigClockSource+0xd4>
 800252a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800252e:	f200 8087 	bhi.w	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002536:	f000 8086 	beq.w	8002646 <HAL_TIM_ConfigClockSource+0x172>
 800253a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800253e:	d87f      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002540:	2b70      	cmp	r3, #112	@ 0x70
 8002542:	d01a      	beq.n	800257a <HAL_TIM_ConfigClockSource+0xa6>
 8002544:	2b70      	cmp	r3, #112	@ 0x70
 8002546:	d87b      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002548:	2b60      	cmp	r3, #96	@ 0x60
 800254a:	d050      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0x11a>
 800254c:	2b60      	cmp	r3, #96	@ 0x60
 800254e:	d877      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002550:	2b50      	cmp	r3, #80	@ 0x50
 8002552:	d03c      	beq.n	80025ce <HAL_TIM_ConfigClockSource+0xfa>
 8002554:	2b50      	cmp	r3, #80	@ 0x50
 8002556:	d873      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002558:	2b40      	cmp	r3, #64	@ 0x40
 800255a:	d058      	beq.n	800260e <HAL_TIM_ConfigClockSource+0x13a>
 800255c:	2b40      	cmp	r3, #64	@ 0x40
 800255e:	d86f      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002560:	2b30      	cmp	r3, #48	@ 0x30
 8002562:	d064      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x15a>
 8002564:	2b30      	cmp	r3, #48	@ 0x30
 8002566:	d86b      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002568:	2b20      	cmp	r3, #32
 800256a:	d060      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x15a>
 800256c:	2b20      	cmp	r3, #32
 800256e:	d867      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002570:	2b00      	cmp	r3, #0
 8002572:	d05c      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x15a>
 8002574:	2b10      	cmp	r3, #16
 8002576:	d05a      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x15a>
 8002578:	e062      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800258a:	f000 f96a 	bl	8002862 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800259c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	609a      	str	r2, [r3, #8]
      break;
 80025a6:	e04f      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025b8:	f000 f953 	bl	8002862 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025ca:	609a      	str	r2, [r3, #8]
      break;
 80025cc:	e03c      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025da:	461a      	mov	r2, r3
 80025dc:	f000 f8ca 	bl	8002774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2150      	movs	r1, #80	@ 0x50
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f921 	bl	800282e <TIM_ITRx_SetConfig>
      break;
 80025ec:	e02c      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025fa:	461a      	mov	r2, r3
 80025fc:	f000 f8e8 	bl	80027d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2160      	movs	r1, #96	@ 0x60
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f911 	bl	800282e <TIM_ITRx_SetConfig>
      break;
 800260c:	e01c      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800261a:	461a      	mov	r2, r3
 800261c:	f000 f8aa 	bl	8002774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2140      	movs	r1, #64	@ 0x40
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f901 	bl	800282e <TIM_ITRx_SetConfig>
      break;
 800262c:	e00c      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4619      	mov	r1, r3
 8002638:	4610      	mov	r0, r2
 800263a:	f000 f8f8 	bl	800282e <TIM_ITRx_SetConfig>
      break;
 800263e:	e003      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      break;
 8002644:	e000      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002658:	7bfb      	ldrb	r3, [r7, #15]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
	...

080026ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a2b      	ldr	r2, [pc, #172]	@ (800276c <TIM_Base_SetConfig+0xc0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d007      	beq.n	80026d4 <TIM_Base_SetConfig+0x28>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ca:	d003      	beq.n	80026d4 <TIM_Base_SetConfig+0x28>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a28      	ldr	r2, [pc, #160]	@ (8002770 <TIM_Base_SetConfig+0xc4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d108      	bne.n	80026e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a20      	ldr	r2, [pc, #128]	@ (800276c <TIM_Base_SetConfig+0xc0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d007      	beq.n	80026fe <TIM_Base_SetConfig+0x52>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f4:	d003      	beq.n	80026fe <TIM_Base_SetConfig+0x52>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002770 <TIM_Base_SetConfig+0xc4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d108      	bne.n	8002710 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a0d      	ldr	r2, [pc, #52]	@ (800276c <TIM_Base_SetConfig+0xc0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d103      	bne.n	8002744 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f023 0201 	bic.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	611a      	str	r2, [r3, #16]
  }
}
 8002762:	bf00      	nop
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	40012c00 	.word	0x40012c00
 8002770:	40000400 	.word	0x40000400

08002774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	f023 0201 	bic.w	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800279e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f023 030a 	bic.w	r3, r3, #10
 80027b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	621a      	str	r2, [r3, #32]
}
 80027c6:	bf00      	nop
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	f023 0210 	bic.w	r2, r3, #16
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	031b      	lsls	r3, r3, #12
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800280c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	621a      	str	r2, [r3, #32]
}
 8002824:	bf00      	nop
 8002826:	371c      	adds	r7, #28
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800282e:	b480      	push	{r7}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	f043 0307 	orr.w	r3, r3, #7
 8002850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	609a      	str	r2, [r3, #8]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002862:	b480      	push	{r7}
 8002864:	b087      	sub	sp, #28
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800287c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	021a      	lsls	r2, r3, #8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	431a      	orrs	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4313      	orrs	r3, r2
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	609a      	str	r2, [r3, #8]
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e041      	b.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a14      	ldr	r2, [pc, #80]	@ (8002948 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d009      	beq.n	8002910 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002904:	d004      	beq.n	8002910 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a10      	ldr	r2, [pc, #64]	@ (800294c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d10c      	bne.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002916:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	4313      	orrs	r3, r2
 8002920:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40000400 	.word	0x40000400

08002950 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <memset>:
 8002974:	4603      	mov	r3, r0
 8002976:	4402      	add	r2, r0
 8002978:	4293      	cmp	r3, r2
 800297a:	d100      	bne.n	800297e <memset+0xa>
 800297c:	4770      	bx	lr
 800297e:	f803 1b01 	strb.w	r1, [r3], #1
 8002982:	e7f9      	b.n	8002978 <memset+0x4>

08002984 <__libc_init_array>:
 8002984:	b570      	push	{r4, r5, r6, lr}
 8002986:	2600      	movs	r6, #0
 8002988:	4d0c      	ldr	r5, [pc, #48]	@ (80029bc <__libc_init_array+0x38>)
 800298a:	4c0d      	ldr	r4, [pc, #52]	@ (80029c0 <__libc_init_array+0x3c>)
 800298c:	1b64      	subs	r4, r4, r5
 800298e:	10a4      	asrs	r4, r4, #2
 8002990:	42a6      	cmp	r6, r4
 8002992:	d109      	bne.n	80029a8 <__libc_init_array+0x24>
 8002994:	f000 f81a 	bl	80029cc <_init>
 8002998:	2600      	movs	r6, #0
 800299a:	4d0a      	ldr	r5, [pc, #40]	@ (80029c4 <__libc_init_array+0x40>)
 800299c:	4c0a      	ldr	r4, [pc, #40]	@ (80029c8 <__libc_init_array+0x44>)
 800299e:	1b64      	subs	r4, r4, r5
 80029a0:	10a4      	asrs	r4, r4, #2
 80029a2:	42a6      	cmp	r6, r4
 80029a4:	d105      	bne.n	80029b2 <__libc_init_array+0x2e>
 80029a6:	bd70      	pop	{r4, r5, r6, pc}
 80029a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ac:	4798      	blx	r3
 80029ae:	3601      	adds	r6, #1
 80029b0:	e7ee      	b.n	8002990 <__libc_init_array+0xc>
 80029b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b6:	4798      	blx	r3
 80029b8:	3601      	adds	r6, #1
 80029ba:	e7f2      	b.n	80029a2 <__libc_init_array+0x1e>
 80029bc:	08002a08 	.word	0x08002a08
 80029c0:	08002a08 	.word	0x08002a08
 80029c4:	08002a08 	.word	0x08002a08
 80029c8:	08002a0c 	.word	0x08002a0c

080029cc <_init>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	bf00      	nop
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr

080029d8 <_fini>:
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029da:	bf00      	nop
 80029dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029de:	bc08      	pop	{r3}
 80029e0:	469e      	mov	lr, r3
 80029e2:	4770      	bx	lr
